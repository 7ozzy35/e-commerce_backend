{"ast":null,"code":"/**\n * Foreign key from the database stored in this class.\n */\nexport class TableForeignKey {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(options) {\n    this[\"@instanceof\"] = Symbol.for(\"TableForeignKey\");\n    /**\n     * Column names which included by this foreign key.\n     */\n    this.columnNames = [];\n    /**\n     * Column names which included by this foreign key.\n     */\n    this.referencedColumnNames = [];\n    this.name = options.name;\n    this.columnNames = options.columnNames;\n    this.referencedColumnNames = options.referencedColumnNames;\n    this.referencedDatabase = options.referencedDatabase;\n    this.referencedSchema = options.referencedSchema;\n    this.referencedTableName = options.referencedTableName;\n    this.onDelete = options.onDelete;\n    this.onUpdate = options.onUpdate;\n    this.deferrable = options.deferrable;\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates a new copy of this foreign key with exactly same properties.\n   */\n  clone() {\n    return new TableForeignKey({\n      name: this.name,\n      columnNames: [...this.columnNames],\n      referencedColumnNames: [...this.referencedColumnNames],\n      referencedDatabase: this.referencedDatabase,\n      referencedSchema: this.referencedSchema,\n      referencedTableName: this.referencedTableName,\n      onDelete: this.onDelete,\n      onUpdate: this.onUpdate,\n      deferrable: this.deferrable\n    });\n  }\n  // -------------------------------------------------------------------------\n  // Static Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates a new table foreign key from the given foreign key metadata.\n   */\n  static create(metadata, driver) {\n    return new TableForeignKey({\n      name: metadata.name,\n      columnNames: metadata.columnNames,\n      referencedColumnNames: metadata.referencedColumnNames,\n      referencedDatabase: metadata.referencedEntityMetadata.database,\n      referencedSchema: metadata.referencedEntityMetadata.schema,\n      referencedTableName: metadata.referencedTablePath,\n      onDelete: metadata.onDelete,\n      onUpdate: metadata.onUpdate,\n      deferrable: metadata.deferrable\n    });\n  }\n}","map":{"version":3,"names":["TableForeignKey","constructor","options","Symbol","for","columnNames","referencedColumnNames","name","referencedDatabase","referencedSchema","referencedTableName","onDelete","onUpdate","deferrable","clone","create","metadata","driver","referencedEntityMetadata","database","schema","referencedTablePath"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\schema-builder\\table\\TableForeignKey.ts"],"sourcesContent":["import { ForeignKeyMetadata } from \"../../metadata/ForeignKeyMetadata\"\nimport { TableForeignKeyOptions } from \"../options/TableForeignKeyOptions\"\nimport { Driver } from \"../../driver/Driver\"\n\n/**\n * Foreign key from the database stored in this class.\n */\nexport class TableForeignKey {\n    readonly \"@instanceof\" = Symbol.for(\"TableForeignKey\")\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Name of the foreign key constraint.\n     */\n    name?: string\n\n    /**\n     * Column names which included by this foreign key.\n     */\n    columnNames: string[] = []\n\n    /**\n     * Database of Table referenced in the foreign key.\n     */\n    referencedDatabase?: string\n\n    /**\n     * Database of Table referenced in the foreign key.\n     */\n    referencedSchema?: string\n\n    /**\n     * Table referenced in the foreign key.\n     */\n    referencedTableName: string\n\n    /**\n     * Column names which included by this foreign key.\n     */\n    referencedColumnNames: string[] = []\n\n    /**\n     * \"ON DELETE\" of this foreign key, e.g. what action database should perform when\n     * referenced stuff is being deleted.\n     */\n    onDelete?: string\n\n    /**\n     * \"ON UPDATE\" of this foreign key, e.g. what action database should perform when\n     * referenced stuff is being updated.\n     */\n    onUpdate?: string\n\n    /**\n     * Set this foreign key constraint as \"DEFERRABLE\" e.g. check constraints at start\n     * or at the end of a transaction\n     */\n    deferrable?: string\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: TableForeignKeyOptions) {\n        this.name = options.name\n        this.columnNames = options.columnNames\n        this.referencedColumnNames = options.referencedColumnNames\n        this.referencedDatabase = options.referencedDatabase\n        this.referencedSchema = options.referencedSchema\n        this.referencedTableName = options.referencedTableName\n        this.onDelete = options.onDelete\n        this.onUpdate = options.onUpdate\n        this.deferrable = options.deferrable\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this foreign key with exactly same properties.\n     */\n    clone(): TableForeignKey {\n        return new TableForeignKey(<TableForeignKeyOptions>{\n            name: this.name,\n            columnNames: [...this.columnNames],\n            referencedColumnNames: [...this.referencedColumnNames],\n            referencedDatabase: this.referencedDatabase,\n            referencedSchema: this.referencedSchema,\n            referencedTableName: this.referencedTableName,\n            onDelete: this.onDelete,\n            onUpdate: this.onUpdate,\n            deferrable: this.deferrable,\n        })\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new table foreign key from the given foreign key metadata.\n     */\n    static create(\n        metadata: ForeignKeyMetadata,\n        driver: Driver,\n    ): TableForeignKey {\n        return new TableForeignKey(<TableForeignKeyOptions>{\n            name: metadata.name,\n            columnNames: metadata.columnNames,\n            referencedColumnNames: metadata.referencedColumnNames,\n            referencedDatabase: metadata.referencedEntityMetadata.database,\n            referencedSchema: metadata.referencedEntityMetadata.schema,\n            referencedTableName: metadata.referencedTablePath,\n            onDelete: metadata.onDelete,\n            onUpdate: metadata.onUpdate,\n            deferrable: metadata.deferrable,\n        })\n    }\n}\n"],"mappings":"AAIA;;;AAGA,OAAM,MAAOA,eAAe;EAuDxB;EACA;EACA;EAEAC,YAAYC,OAA+B;IA1DlC,mBAAa,GAAGC,MAAM,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAWtD;;;IAGA,KAAAC,WAAW,GAAa,EAAE;IAiB1B;;;IAGA,KAAAC,qBAAqB,GAAa,EAAE;IAyBhC,IAAI,CAACC,IAAI,GAAGL,OAAO,CAACK,IAAI;IACxB,IAAI,CAACF,WAAW,GAAGH,OAAO,CAACG,WAAW;IACtC,IAAI,CAACC,qBAAqB,GAAGJ,OAAO,CAACI,qBAAqB;IAC1D,IAAI,CAACE,kBAAkB,GAAGN,OAAO,CAACM,kBAAkB;IACpD,IAAI,CAACC,gBAAgB,GAAGP,OAAO,CAACO,gBAAgB;IAChD,IAAI,CAACC,mBAAmB,GAAGR,OAAO,CAACQ,mBAAmB;IACtD,IAAI,CAACC,QAAQ,GAAGT,OAAO,CAACS,QAAQ;IAChC,IAAI,CAACC,QAAQ,GAAGV,OAAO,CAACU,QAAQ;IAChC,IAAI,CAACC,UAAU,GAAGX,OAAO,CAACW,UAAU;EACxC;EAEA;EACA;EACA;EAEA;;;EAGAC,KAAKA,CAAA;IACD,OAAO,IAAId,eAAe,CAAyB;MAC/CO,IAAI,EAAE,IAAI,CAACA,IAAI;MACfF,WAAW,EAAE,CAAC,GAAG,IAAI,CAACA,WAAW,CAAC;MAClCC,qBAAqB,EAAE,CAAC,GAAG,IAAI,CAACA,qBAAqB,CAAC;MACtDE,kBAAkB,EAAE,IAAI,CAACA,kBAAkB;MAC3CC,gBAAgB,EAAE,IAAI,CAACA,gBAAgB;MACvCC,mBAAmB,EAAE,IAAI,CAACA,mBAAmB;MAC7CC,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,UAAU,EAAE,IAAI,CAACA;KACpB,CAAC;EACN;EAEA;EACA;EACA;EAEA;;;EAGA,OAAOE,MAAMA,CACTC,QAA4B,EAC5BC,MAAc;IAEd,OAAO,IAAIjB,eAAe,CAAyB;MAC/CO,IAAI,EAAES,QAAQ,CAACT,IAAI;MACnBF,WAAW,EAAEW,QAAQ,CAACX,WAAW;MACjCC,qBAAqB,EAAEU,QAAQ,CAACV,qBAAqB;MACrDE,kBAAkB,EAAEQ,QAAQ,CAACE,wBAAwB,CAACC,QAAQ;MAC9DV,gBAAgB,EAAEO,QAAQ,CAACE,wBAAwB,CAACE,MAAM;MAC1DV,mBAAmB,EAAEM,QAAQ,CAACK,mBAAmB;MACjDV,QAAQ,EAAEK,QAAQ,CAACL,QAAQ;MAC3BC,QAAQ,EAAEI,QAAQ,CAACJ,QAAQ;MAC3BC,UAAU,EAAEG,QAAQ,CAACH;KACxB,CAAC;EACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}