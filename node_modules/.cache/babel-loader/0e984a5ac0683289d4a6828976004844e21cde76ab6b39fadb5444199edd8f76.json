{"ast":null,"code":"import { RandomGenerator } from \"../util/RandomGenerator\";\nimport { DefaultNamingStrategy } from \"./DefaultNamingStrategy\";\nimport { TypeORMError } from \"../error\";\n/**\n * Naming strategy for legacy Oracle database with 30 bytes identifier limit.\n *\n * Currently, only column name must be shorten in order to avoid ORA-00972.\n * Issues with other identifiers were fixed.\n */\nexport class LegacyOracleNamingStrategy extends DefaultNamingStrategy {\n  constructor(shortenStrategy = \"hash\") {\n    super();\n    this.IDENTIFIER_MAX_SIZE = 30;\n    this.DEFAULT_COLUMN_PREFIX = \"COL_\";\n    this.shortenStrategy = shortenStrategy;\n  }\n  columnName(propertyName, customName, embeddedPrefixes) {\n    const longName = super.columnName(propertyName, customName, embeddedPrefixes);\n    if (this.shortenStrategy === \"truncate\") {\n      return this.truncateIdentifier(longName);\n    } else if (this.shortenStrategy === \"hash\") {\n      return this.hashIdentifier(longName, this.DEFAULT_COLUMN_PREFIX);\n    } else {\n      throw new TypeORMError(`Invalid shortenStrategy`);\n    }\n  }\n  hashIdentifier(input, prefix) {\n    if (prefix.length >= this.IDENTIFIER_MAX_SIZE) {\n      throw new TypeORMError(`Prefix must be shorter than IDENTIFIER_MAX_SIZE`);\n    }\n    return prefix + RandomGenerator.sha1(input).substring(0, this.IDENTIFIER_MAX_SIZE - prefix.length);\n  }\n  truncateIdentifier(input) {\n    if (input.length > this.IDENTIFIER_MAX_SIZE) {\n      return input.substring(0, this.IDENTIFIER_MAX_SIZE);\n    } else {\n      return input;\n    }\n  }\n}","map":{"version":3,"names":["RandomGenerator","DefaultNamingStrategy","TypeORMError","LegacyOracleNamingStrategy","constructor","shortenStrategy","IDENTIFIER_MAX_SIZE","DEFAULT_COLUMN_PREFIX","columnName","propertyName","customName","embeddedPrefixes","longName","truncateIdentifier","hashIdentifier","input","prefix","length","sha1","substring"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\naming-strategy\\LegacyOracleNamingStrategy.ts"],"sourcesContent":["import { NamingStrategyInterface } from \"./NamingStrategyInterface\"\nimport { RandomGenerator } from \"../util/RandomGenerator\"\nimport { DefaultNamingStrategy } from \"./DefaultNamingStrategy\"\nimport { TypeORMError } from \"../error\"\n\n/**\n * Shorten strategy\n */\nexport type ShortenStrategy = \"truncate\" | \"hash\"\n\n/**\n * Naming strategy for legacy Oracle database with 30 bytes identifier limit.\n *\n * Currently, only column name must be shorten in order to avoid ORA-00972.\n * Issues with other identifiers were fixed.\n */\nexport class LegacyOracleNamingStrategy\n    extends DefaultNamingStrategy\n    implements NamingStrategyInterface\n{\n    public readonly IDENTIFIER_MAX_SIZE = 30\n    public readonly DEFAULT_COLUMN_PREFIX = \"COL_\"\n    protected shortenStrategy: ShortenStrategy\n\n    constructor(shortenStrategy: ShortenStrategy = \"hash\") {\n        super()\n        this.shortenStrategy = shortenStrategy\n    }\n\n    columnName(\n        propertyName: string,\n        customName: string,\n        embeddedPrefixes: string[],\n    ): string {\n        const longName: string = super.columnName(\n            propertyName,\n            customName,\n            embeddedPrefixes,\n        )\n        if (this.shortenStrategy === \"truncate\") {\n            return this.truncateIdentifier(longName)\n        } else if (this.shortenStrategy === \"hash\") {\n            return this.hashIdentifier(longName, this.DEFAULT_COLUMN_PREFIX)\n        } else {\n            throw new TypeORMError(`Invalid shortenStrategy`)\n        }\n    }\n\n    protected hashIdentifier(input: string, prefix: string): string {\n        if (prefix.length >= this.IDENTIFIER_MAX_SIZE) {\n            throw new TypeORMError(\n                `Prefix must be shorter than IDENTIFIER_MAX_SIZE`,\n            )\n        }\n        return (\n            prefix +\n            RandomGenerator.sha1(input).substring(\n                0,\n                this.IDENTIFIER_MAX_SIZE - prefix.length,\n            )\n        )\n    }\n\n    protected truncateIdentifier(input: string): string {\n        if (input.length > this.IDENTIFIER_MAX_SIZE) {\n            return input.substring(0, this.IDENTIFIER_MAX_SIZE)\n        } else {\n            return input\n        }\n    }\n}\n"],"mappings":"AACA,SAASA,eAAe,QAAQ,yBAAyB;AACzD,SAASC,qBAAqB,QAAQ,yBAAyB;AAC/D,SAASC,YAAY,QAAQ,UAAU;AAOvC;;;;;;AAMA,OAAM,MAAOC,0BACT,SAAQF,qBAAqB;EAO7BG,YAAYC,eAAA,GAAmC,MAAM;IACjD,KAAK,EAAE;IALK,KAAAC,mBAAmB,GAAG,EAAE;IACxB,KAAAC,qBAAqB,GAAG,MAAM;IAK1C,IAAI,CAACF,eAAe,GAAGA,eAAe;EAC1C;EAEAG,UAAUA,CACNC,YAAoB,EACpBC,UAAkB,EAClBC,gBAA0B;IAE1B,MAAMC,QAAQ,GAAW,KAAK,CAACJ,UAAU,CACrCC,YAAY,EACZC,UAAU,EACVC,gBAAgB,CACnB;IACD,IAAI,IAAI,CAACN,eAAe,KAAK,UAAU,EAAE;MACrC,OAAO,IAAI,CAACQ,kBAAkB,CAACD,QAAQ,CAAC;IAC5C,CAAC,MAAM,IAAI,IAAI,CAACP,eAAe,KAAK,MAAM,EAAE;MACxC,OAAO,IAAI,CAACS,cAAc,CAACF,QAAQ,EAAE,IAAI,CAACL,qBAAqB,CAAC;IACpE,CAAC,MAAM;MACH,MAAM,IAAIL,YAAY,CAAC,yBAAyB,CAAC;IACrD;EACJ;EAEUY,cAAcA,CAACC,KAAa,EAAEC,MAAc;IAClD,IAAIA,MAAM,CAACC,MAAM,IAAI,IAAI,CAACX,mBAAmB,EAAE;MAC3C,MAAM,IAAIJ,YAAY,CAClB,iDAAiD,CACpD;IACL;IACA,OACIc,MAAM,GACNhB,eAAe,CAACkB,IAAI,CAACH,KAAK,CAAC,CAACI,SAAS,CACjC,CAAC,EACD,IAAI,CAACb,mBAAmB,GAAGU,MAAM,CAACC,MAAM,CAC3C;EAET;EAEUJ,kBAAkBA,CAACE,KAAa;IACtC,IAAIA,KAAK,CAACE,MAAM,GAAG,IAAI,CAACX,mBAAmB,EAAE;MACzC,OAAOS,KAAK,CAACI,SAAS,CAAC,CAAC,EAAE,IAAI,CAACb,mBAAmB,CAAC;IACvD,CAAC,MAAM;MACH,OAAOS,KAAK;IAChB;EACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}