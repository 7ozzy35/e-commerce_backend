{"ast":null,"code":"import { PostgresDriver } from \"../postgres/PostgresDriver\";\nimport { PlatformTools } from \"../../platform/PlatformTools\";\nimport { AuroraPostgresQueryRunner } from \"./AuroraPostgresQueryRunner\";\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\";\nimport { DriverUtils } from \"../DriverUtils\";\nclass PostgresWrapper extends PostgresDriver {}\nexport class AuroraPostgresDriver extends PostgresWrapper {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connection) {\n    super();\n    /**\n     * Represent transaction support by this driver\n     */\n    this.transactionSupport = \"nested\";\n    this.connection = connection;\n    this.options = connection.options;\n    this.isReplicated = false;\n    // load data-api package\n    this.loadDependencies();\n    this.client = new this.DataApiDriver(this.options.region, this.options.secretArn, this.options.resourceArn, this.options.database, (query, parameters) => this.connection.logger.logQuery(query, parameters), this.options.serviceConfigOptions, this.options.formatOptions);\n    this.database = DriverUtils.buildDriverOptions(this.options).database;\n  }\n  // -------------------------------------------------------------------------\n  // Public Implemented Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Performs connection to the database.\n   * Based on pooling options, it can either create connection immediately,\n   * either create a pool and create connection when needed.\n   */\n  async connect() {}\n  /**\n   * Closes connection with database.\n   */\n  async disconnect() {}\n  /**\n   * Creates a query runner used to execute database queries.\n   */\n  createQueryRunner(mode) {\n    return new AuroraPostgresQueryRunner(this, new this.DataApiDriver(this.options.region, this.options.secretArn, this.options.resourceArn, this.options.database, (query, parameters) => this.connection.logger.logQuery(query, parameters), this.options.serviceConfigOptions, this.options.formatOptions), mode);\n  }\n  /**\n   * Prepares given value to a value to be persisted, based on its column type and metadata.\n   */\n  preparePersistentValue(value, columnMetadata) {\n    if (this.options.formatOptions && this.options.formatOptions.castParameters === false) {\n      return super.preparePersistentValue(value, columnMetadata);\n    }\n    if (columnMetadata.transformer) value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n    return this.client.preparePersistentValue(value, columnMetadata);\n  }\n  /**\n   * Prepares given value to a value to be persisted, based on its column type and metadata.\n   */\n  prepareHydratedValue(value, columnMetadata) {\n    if (this.options.formatOptions && this.options.formatOptions.castParameters === false) {\n      return super.prepareHydratedValue(value, columnMetadata);\n    }\n    if (columnMetadata.transformer) value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n    return this.client.prepareHydratedValue(value, columnMetadata);\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * If driver dependency is not given explicitly, then try to load it via \"require\".\n   */\n  loadDependencies() {\n    const driver = this.options.driver || PlatformTools.load(\"typeorm-aurora-data-api-driver\");\n    const {\n      pg\n    } = driver;\n    this.DataApiDriver = pg;\n  }\n  /**\n   * Executes given query.\n   */\n  executeQuery(connection, query) {\n    return this.connection.query(query);\n  }\n  /**\n   * Makes any action after connection (e.g. create extensions in Postgres driver).\n   */\n  async afterConnect() {\n    const extensionsMetadata = await this.checkMetadataForExtensions();\n    if (extensionsMetadata.hasExtensions) {\n      await this.enableExtensions(extensionsMetadata, this.connection);\n    }\n    return Promise.resolve();\n  }\n}","map":{"version":3,"names":["PostgresDriver","PlatformTools","AuroraPostgresQueryRunner","ApplyValueTransformers","DriverUtils","PostgresWrapper","AuroraPostgresDriver","constructor","connection","transactionSupport","options","isReplicated","loadDependencies","client","DataApiDriver","region","secretArn","resourceArn","database","query","parameters","logger","logQuery","serviceConfigOptions","formatOptions","buildDriverOptions","connect","disconnect","createQueryRunner","mode","preparePersistentValue","value","columnMetadata","castParameters","transformer","transformTo","prepareHydratedValue","transformFrom","driver","load","pg","executeQuery","afterConnect","extensionsMetadata","checkMetadataForExtensions","hasExtensions","enableExtensions","Promise","resolve"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\driver\\aurora-postgres\\AuroraPostgresDriver.ts"],"sourcesContent":["import { Driver } from \"../Driver\"\nimport { PostgresDriver } from \"../postgres/PostgresDriver\"\nimport { PlatformTools } from \"../../platform/PlatformTools\"\nimport { DataSource } from \"../../data-source/DataSource\"\nimport { AuroraPostgresConnectionOptions } from \"./AuroraPostgresConnectionOptions\"\nimport { AuroraPostgresQueryRunner } from \"./AuroraPostgresQueryRunner\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { ColumnMetadata } from \"../../metadata/ColumnMetadata\"\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\"\nimport { DriverUtils } from \"../DriverUtils\"\n\nabstract class PostgresWrapper extends PostgresDriver {\n    options: any\n\n    abstract createQueryRunner(mode: ReplicationMode): any\n}\n\nexport class AuroraPostgresDriver extends PostgresWrapper implements Driver {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: DataSource\n\n    /**\n     * Aurora Data API underlying library.\n     */\n    DataApiDriver: any\n\n    client: any\n\n    /**\n     * Represent transaction support by this driver\n     */\n    transactionSupport = \"nested\" as const\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: AuroraPostgresConnectionOptions\n\n    /**\n     * Master database used to perform all write queries.\n     */\n    database?: string\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        super()\n        this.connection = connection\n        this.options = connection.options as AuroraPostgresConnectionOptions\n        this.isReplicated = false\n\n        // load data-api package\n        this.loadDependencies()\n\n        this.client = new this.DataApiDriver(\n            this.options.region,\n            this.options.secretArn,\n            this.options.resourceArn,\n            this.options.database,\n            (query: string, parameters?: any[]) =>\n                this.connection.logger.logQuery(query, parameters),\n            this.options.serviceConfigOptions,\n            this.options.formatOptions,\n        )\n\n        this.database = DriverUtils.buildDriverOptions(this.options).database\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    async connect(): Promise<void> {}\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {}\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode) {\n        return new AuroraPostgresQueryRunner(\n            this,\n            new this.DataApiDriver(\n                this.options.region,\n                this.options.secretArn,\n                this.options.resourceArn,\n                this.options.database,\n                (query: string, parameters?: any[]) =>\n                    this.connection.logger.logQuery(query, parameters),\n                this.options.serviceConfigOptions,\n                this.options.formatOptions,\n            ),\n            mode,\n        )\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (\n            this.options.formatOptions &&\n            this.options.formatOptions.castParameters === false\n        ) {\n            return super.preparePersistentValue(value, columnMetadata)\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(\n                columnMetadata.transformer,\n                value,\n            )\n\n        return this.client.preparePersistentValue(value, columnMetadata)\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (\n            this.options.formatOptions &&\n            this.options.formatOptions.castParameters === false\n        ) {\n            return super.prepareHydratedValue(value, columnMetadata)\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(\n                columnMetadata.transformer,\n                value,\n            )\n\n        return this.client.prepareHydratedValue(value, columnMetadata)\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        const driver =\n            this.options.driver ||\n            PlatformTools.load(\"typeorm-aurora-data-api-driver\")\n        const { pg } = driver\n\n        this.DataApiDriver = pg\n    }\n\n    /**\n     * Executes given query.\n     */\n    protected executeQuery(connection: any, query: string) {\n        return this.connection.query(query)\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    async afterConnect(): Promise<void> {\n        const extensionsMetadata = await this.checkMetadataForExtensions()\n\n        if (extensionsMetadata.hasExtensions) {\n            await this.enableExtensions(extensionsMetadata, this.connection)\n        }\n\n        return Promise.resolve()\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}