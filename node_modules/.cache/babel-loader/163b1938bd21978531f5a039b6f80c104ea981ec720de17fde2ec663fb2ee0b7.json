{"ast":null,"code":"import express from 'express';\nimport { AppDataSource } from './data_source';\nimport { Product } from './entity/Product';\nimport cors from 'cors';\nconst app = express();\napp.use(express.json());\napp.use(cors());\n\n// Veritabanını başlat\nAppDataSource.initialize().then(() => {\n  console.log('Veritabanına başarıyla bağlanıldı.');\n}).catch(error => console.log('Veritabanı bağlantı hatası:', error));\n\n// Ürün ekleme (CREATE)\napp.post('/product', async (req, res) => {\n  try {\n    const productRepository = AppDataSource.getRepository(Product);\n    const newProduct = productRepository.create(req.body);\n    await productRepository.save(newProduct);\n    res.status(201).json(newProduct);\n  } catch (error) {\n    res.status(500).json({\n      message: 'Ürün eklenirken hata oluştu',\n      error\n    });\n  }\n});\n\n// Tüm ürünleri listeleme (READ)\napp.get('/product', async (req, res) => {\n  try {\n    const productRepository = AppDataSource.getRepository(Product);\n    const products = await productRepository.find();\n    res.json(products);\n  } catch (error) {\n    res.status(500).json({\n      message: 'Ürünler listelenirken hata oluştu',\n      error\n    });\n  }\n});\n\n// Belirli bir ürünü listeleme (READ)\napp.get('/product/:id', async (req, res) => {\n  try {\n    const productRepository = AppDataSource.getRepository(Product);\n    const product = await productRepository.findOneBy({\n      id: parseInt(req.params.id)\n    });\n    if (product) {\n      res.json(product);\n    } else {\n      res.status(404).json({\n        message: 'Ürün bulunamadı'\n      });\n    }\n  } catch (error) {\n    res.status(500).json({\n      message: 'Ürün bulunurken hata oluştu',\n      error\n    });\n  }\n});\n\n// Ürün güncelleme (UPDATE)\napp.put('/product/:id', async (req, res) => {\n  try {\n    const productRepository = AppDataSource.getRepository(Product);\n    await productRepository.update(req.params.id, req.body);\n    const updatedProduct = await productRepository.findOneBy({\n      id: parseInt(req.params.id)\n    });\n    if (updatedProduct) {\n      res.json(updatedProduct);\n    } else {\n      res.status(404).json({\n        message: 'Ürün güncellenemedi'\n      });\n    }\n  } catch (error) {\n    res.status(500).json({\n      message: 'Ürün güncellenirken hata oluştu',\n      error\n    });\n  }\n});\n\n// Ürün silme (DELETE)\napp.delete('/product/:id', async (req, res) => {\n  try {\n    const productRepository = AppDataSource.getRepository(Product);\n    const deleteResult = await productRepository.delete(req.params.id);\n    if (deleteResult.affected) {\n      res.json({\n        message: 'Ürün silindi'\n      });\n    } else {\n      res.status(404).json({\n        message: 'Ürün bulunamadı'\n      });\n    }\n  } catch (error) {\n    res.status(500).json({\n      message: 'Ürün silinirken hata oluştu',\n      error\n    });\n  }\n});\n\n// Sunucuyu başlat\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Sunucu ${PORT} portunda çalışıyor.`);\n});","map":{"version":3,"names":["express","AppDataSource","Product","cors","app","use","json","initialize","then","console","log","catch","error","post","req","res","productRepository","getRepository","newProduct","create","body","save","status","message","get","products","find","product","findOneBy","id","parseInt","params","put","update","updatedProduct","delete","deleteResult","affected","PORT","listen"],"sources":["D:/Ronwell Task 1/src/index.ts"],"sourcesContent":["import express, { Request, Response } from 'express';\r\nimport { AppDataSource } from './data_source';\r\nimport { Product } from './entity/Product';\r\nimport cors from 'cors';\r\n\r\nconst app = express();\r\napp.use(express.json());\r\napp.use(cors());\r\n\r\n// Veritabanını başlat\r\nAppDataSource.initialize()\r\n  .then(() => {\r\n    console.log('Veritabanına başarıyla bağlanıldı.');\r\n  })\r\n  .catch((error) => console.log('Veritabanı bağlantı hatası:', error));\r\n\r\n// Ürün ekleme (CREATE)\r\napp.post('/product', async (req: Request, res: Response) => {\r\n  try {\r\n    const productRepository = AppDataSource.getRepository(Product);\r\n    const newProduct = productRepository.create(req.body);\r\n    await productRepository.save(newProduct);\r\n    res.status(201).json(newProduct);\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Ürün eklenirken hata oluştu', error });\r\n  }\r\n});\r\n\r\n// Tüm ürünleri listeleme (READ)\r\napp.get('/product', async (req: Request, res: Response) => {\r\n  try {\r\n    const productRepository = AppDataSource.getRepository(Product);\r\n    const products = await productRepository.find();\r\n    res.json(products);\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Ürünler listelenirken hata oluştu', error });\r\n  }\r\n});\r\n\r\n// Belirli bir ürünü listeleme (READ)\r\napp.get('/product/:id', async (req: Request, res: Response) => {\r\n  try {\r\n    const productRepository = AppDataSource.getRepository(Product);\r\n    const product = await productRepository.findOneBy({ id: parseInt(req.params.id) });\r\n    if (product) {\r\n      res.json(product);\r\n    } else {\r\n      res.status(404).json({ message: 'Ürün bulunamadı' });\r\n    }\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Ürün bulunurken hata oluştu', error });\r\n  }\r\n});\r\n\r\n// Ürün güncelleme (UPDATE)\r\napp.put('/product/:id', async (req: Request, res: Response) => {\r\n  try {\r\n    const productRepository = AppDataSource.getRepository(Product);\r\n    await productRepository.update(req.params.id, req.body);\r\n    const updatedProduct = await productRepository.findOneBy({ id: parseInt(req.params.id) });\r\n    if (updatedProduct) {\r\n      res.json(updatedProduct);\r\n    } else {\r\n      res.status(404).json({ message: 'Ürün güncellenemedi' });\r\n    }\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Ürün güncellenirken hata oluştu', error });\r\n  }\r\n});\r\n\r\n// Ürün silme (DELETE)\r\napp.delete('/product/:id', async (req: Request, res: Response) => {\r\n  try {\r\n    const productRepository = AppDataSource.getRepository(Product);\r\n    const deleteResult = await productRepository.delete(req.params.id);\r\n    if (deleteResult.affected) {\r\n      res.json({ message: 'Ürün silindi' });\r\n    } else {\r\n      res.status(404).json({ message: 'Ürün bulunamadı' });\r\n    }\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Ürün silinirken hata oluştu', error });\r\n  }\r\n});\r\n\r\n// Sunucuyu başlat\r\nconst PORT = 3000;\r\napp.listen(PORT, () => {\r\n  console.log(`Sunucu ${PORT} portunda çalışıyor.`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}