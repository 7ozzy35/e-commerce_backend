{"ast":null,"code":"import { getMetadataArgsStorage } from \"../../globals\";\nimport { ColumnTypeUndefinedError } from \"../../error/ColumnTypeUndefinedError\";\nimport { PrimaryColumnCannotBeNullableError } from \"../../error/PrimaryColumnCannotBeNullableError\";\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * Primary columns also creates a PRIMARY KEY for this column in a db.\n */\nexport function PrimaryColumn(typeOrOptions, options) {\n  return function (object, propertyName) {\n    // normalize parameters\n    let type;\n    if (typeof typeOrOptions === \"string\" || typeOrOptions === String || typeOrOptions === Boolean || typeOrOptions === Number) {\n      type = typeOrOptions;\n    } else {\n      options = Object.assign({}, typeOrOptions);\n    }\n    if (!options) options = {};\n    // if type is not given explicitly then try to guess it\n    const reflectMetadataType = Reflect && Reflect.getMetadata ? Reflect.getMetadata(\"design:type\", object, propertyName) : undefined;\n    if (!type && reflectMetadataType) type = reflectMetadataType;\n    // check if there is no type in column options then set type from first function argument, or guessed one\n    if (!options.type && type) options.type = type;\n    // if we still don't have a type then we need to give error to user that type is required\n    if (!options.type) throw new ColumnTypeUndefinedError(object, propertyName);\n    // check if column is not nullable, because we cannot allow a primary key to be nullable\n    if (options.nullable) throw new PrimaryColumnCannotBeNullableError(object, propertyName);\n    // explicitly set a primary to column options\n    options.primary = true;\n    // create and register a new column metadata\n    getMetadataArgsStorage().columns.push({\n      target: object.constructor,\n      propertyName: propertyName,\n      mode: \"regular\",\n      options: options\n    });\n    if (options.generated) {\n      getMetadataArgsStorage().generations.push({\n        target: object.constructor,\n        propertyName: propertyName,\n        strategy: typeof options.generated === \"string\" ? options.generated : \"increment\"\n      });\n    }\n  };\n}","map":{"version":3,"names":["getMetadataArgsStorage","ColumnTypeUndefinedError","PrimaryColumnCannotBeNullableError","PrimaryColumn","typeOrOptions","options","object","propertyName","type","String","Boolean","Number","Object","assign","reflectMetadataType","Reflect","getMetadata","undefined","nullable","primary","columns","push","target","constructor","mode","generated","generations","strategy"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\decorator\\columns\\PrimaryColumn.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { ColumnTypeUndefinedError } from \"../../error/ColumnTypeUndefinedError\"\nimport { PrimaryColumnCannotBeNullableError } from \"../../error/PrimaryColumnCannotBeNullableError\"\nimport { ColumnMetadataArgs } from \"../../metadata-args/ColumnMetadataArgs\"\nimport { GeneratedMetadataArgs } from \"../../metadata-args/GeneratedMetadataArgs\"\nimport { ColumnOptions } from \"../options/ColumnOptions\"\nimport { ColumnType } from \"../../driver/types/ColumnTypes\"\n\n/**\n * Describes all primary key column's options.\n * If specified, the nullable field must be set to false.\n */\nexport type PrimaryColumnOptions = ColumnOptions & { nullable?: false }\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * Primary columns also creates a PRIMARY KEY for this column in a db.\n */\nexport function PrimaryColumn(options?: PrimaryColumnOptions): PropertyDecorator\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * Primary columns also creates a PRIMARY KEY for this column in a db.\n */\nexport function PrimaryColumn(\n    type?: ColumnType,\n    options?: PrimaryColumnOptions,\n): PropertyDecorator\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * Primary columns also creates a PRIMARY KEY for this column in a db.\n */\nexport function PrimaryColumn(\n    typeOrOptions?: ColumnType | PrimaryColumnOptions,\n    options?: PrimaryColumnOptions,\n): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        // normalize parameters\n        let type: ColumnType | undefined\n        if (\n            typeof typeOrOptions === \"string\" ||\n            typeOrOptions === String ||\n            typeOrOptions === Boolean ||\n            typeOrOptions === Number\n        ) {\n            type = typeOrOptions as ColumnType\n        } else {\n            options = Object.assign({}, <PrimaryColumnOptions>typeOrOptions)\n        }\n        if (!options) options = {} as PrimaryColumnOptions\n\n        // if type is not given explicitly then try to guess it\n        const reflectMetadataType =\n            Reflect && (Reflect as any).getMetadata\n                ? (Reflect as any).getMetadata(\n                      \"design:type\",\n                      object,\n                      propertyName,\n                  )\n                : undefined\n        if (!type && reflectMetadataType) type = reflectMetadataType\n\n        // check if there is no type in column options then set type from first function argument, or guessed one\n        if (!options.type && type) options.type = type\n\n        // if we still don't have a type then we need to give error to user that type is required\n        if (!options.type)\n            throw new ColumnTypeUndefinedError(object, propertyName)\n\n        // check if column is not nullable, because we cannot allow a primary key to be nullable\n        if (options.nullable)\n            throw new PrimaryColumnCannotBeNullableError(object, propertyName)\n\n        // explicitly set a primary to column options\n        options.primary = true\n\n        // create and register a new column metadata\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"regular\",\n            options: options,\n        } as ColumnMetadataArgs)\n\n        if (options.generated) {\n            getMetadataArgsStorage().generations.push({\n                target: object.constructor,\n                propertyName: propertyName,\n                strategy:\n                    typeof options.generated === \"string\"\n                        ? options.generated\n                        : \"increment\",\n            } as GeneratedMetadataArgs)\n        }\n    }\n}\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,eAAe;AACtD,SAASC,wBAAwB,QAAQ,sCAAsC;AAC/E,SAASC,kCAAkC,QAAQ,gDAAgD;AA6BnG;;;;;AAKA,OAAM,SAAUC,aAAaA,CACzBC,aAAiD,EACjDC,OAA8B;EAE9B,OAAO,UAAUC,MAAc,EAAEC,YAAoB;IACjD;IACA,IAAIC,IAA4B;IAChC,IACI,OAAOJ,aAAa,KAAK,QAAQ,IACjCA,aAAa,KAAKK,MAAM,IACxBL,aAAa,KAAKM,OAAO,IACzBN,aAAa,KAAKO,MAAM,EAC1B;MACEH,IAAI,GAAGJ,aAA2B;IACtC,CAAC,MAAM;MACHC,OAAO,GAAGO,MAAM,CAACC,MAAM,CAAC,EAAE,EAAwBT,aAAa,CAAC;IACpE;IACA,IAAI,CAACC,OAAO,EAAEA,OAAO,GAAG,EAA0B;IAElD;IACA,MAAMS,mBAAmB,GACrBC,OAAO,IAAKA,OAAe,CAACC,WAAW,GAChCD,OAAe,CAACC,WAAW,CACxB,aAAa,EACbV,MAAM,EACNC,YAAY,CACf,GACDU,SAAS;IACnB,IAAI,CAACT,IAAI,IAAIM,mBAAmB,EAAEN,IAAI,GAAGM,mBAAmB;IAE5D;IACA,IAAI,CAACT,OAAO,CAACG,IAAI,IAAIA,IAAI,EAAEH,OAAO,CAACG,IAAI,GAAGA,IAAI;IAE9C;IACA,IAAI,CAACH,OAAO,CAACG,IAAI,EACb,MAAM,IAAIP,wBAAwB,CAACK,MAAM,EAAEC,YAAY,CAAC;IAE5D;IACA,IAAIF,OAAO,CAACa,QAAQ,EAChB,MAAM,IAAIhB,kCAAkC,CAACI,MAAM,EAAEC,YAAY,CAAC;IAEtE;IACAF,OAAO,CAACc,OAAO,GAAG,IAAI;IAEtB;IACAnB,sBAAsB,EAAE,CAACoB,OAAO,CAACC,IAAI,CAAC;MAClCC,MAAM,EAAEhB,MAAM,CAACiB,WAAW;MAC1BhB,YAAY,EAAEA,YAAY;MAC1BiB,IAAI,EAAE,SAAS;MACfnB,OAAO,EAAEA;KACU,CAAC;IAExB,IAAIA,OAAO,CAACoB,SAAS,EAAE;MACnBzB,sBAAsB,EAAE,CAAC0B,WAAW,CAACL,IAAI,CAAC;QACtCC,MAAM,EAAEhB,MAAM,CAACiB,WAAW;QAC1BhB,YAAY,EAAEA,YAAY;QAC1BoB,QAAQ,EACJ,OAAOtB,OAAO,CAACoB,SAAS,KAAK,QAAQ,GAC/BpB,OAAO,CAACoB,SAAS,GACjB;OACY,CAAC;IAC/B;EACJ,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}