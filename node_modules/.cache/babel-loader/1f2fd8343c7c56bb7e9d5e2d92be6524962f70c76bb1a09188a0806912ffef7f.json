{"ast":null,"code":"import express from 'express';\nimport bodyParser from 'body-parser';\nimport { AppDataSource } from './data_source'; // Veritabanı bağlantısını buradan alıyoruz\n\nconst app = express();\nconst port = 3000;\n\n// Body parser middleware\napp.use(bodyParser.json());\n\n// CRUD işlemleri\n\n// Create (Yeni ürün ekle)\napp.post('/product', async (req, res) => {\n  const {\n    name,\n    price,\n    description\n  } = req.body;\n  const query = 'INSERT INTO product (name, price, description) VALUES ($1, $2, $3) RETURNING *';\n  const values = [name, price, description];\n  try {\n    const result = await AppDataSource.query(query, values);\n    res.status(201).json(result.rows[0]);\n  } catch (err) {\n    res.status(400).json({\n      message: 'Error creating product',\n      error: err\n    });\n  }\n});\n\n// Read (Ürünleri listele)\napp.get('/product', async (req, res) => {\n  const query = 'SELECT * FROM product';\n  try {\n    const result = await AppDataSource.query(query);\n    res.status(200).json(result.rows);\n  } catch (err) {\n    res.status(400).json({\n      message: 'Error fetching products',\n      error: err\n    });\n  }\n});\n\n// Read (Tek bir ürünü göster)\napp.get('/products/:id', async (req, res) => {\n  const {\n    id\n  } = req.params;\n  const query = 'SELECT * FROM products WHERE id = $1';\n  const values = [id];\n  try {\n    const result = await AppDataSource.query(query, values);\n    if (result.rows.length > 0) {\n      res.status(200).json(result.rows[0]);\n    } else {\n      res.status(404).json({\n        message: 'Product not found'\n      });\n    }\n  } catch (err) {\n    res.status(400).json({\n      message: 'Error fetching product',\n      error: err\n    });\n  }\n});\n\n// Update (Ürün güncelle)\napp.put('/products/:id', async (req, res) => {\n  const {\n    id\n  } = req.params;\n  const {\n    name,\n    price,\n    description\n  } = req.body;\n  const query = 'UPDATE products SET name = $1, price = $2, description = $3 WHERE id = $4 RETURNING *';\n  const values = [name, price, description, id];\n  try {\n    const result = await AppDataSource.query(query, values);\n    if (result.rows.length > 0) {\n      res.status(200).json(result.rows[0]);\n    } else {\n      res.status(404).json({\n        message: 'Product not found'\n      });\n    }\n  } catch (err) {\n    res.status(400).json({\n      message: 'Error updating product',\n      error: err\n    });\n  }\n});\n\n// Delete (Ürün sil)\napp.delete('/products/:id', async (req, res) => {\n  const {\n    id\n  } = req.params;\n  const query = 'DELETE FROM products WHERE id = $1 RETURNING *';\n  const values = [id];\n  try {\n    const result = await AppDataSource.query(query, values);\n    if (result.rows.length > 0) {\n      res.status(200).json({\n        message: 'Product deleted'\n      });\n    } else {\n      res.status(404).json({\n        message: 'Product not found'\n      });\n    }\n  } catch (err) {\n    res.status(400).json({\n      message: 'Error deleting product',\n      error: err\n    });\n  }\n});\n\n// Sunucuyu başlat\napp.listen(port, () => {\n  console.log(`Server is running at http://localhost:${port}`);\n});","map":{"version":3,"names":["express","bodyParser","AppDataSource","app","port","use","json","post","req","res","name","price","description","body","query","values","result","status","rows","err","message","error","get","id","params","length","put","delete","listen","console","log"],"sources":["D:/Ronwell Task 1/src/index.ts"],"sourcesContent":["import express, { Request, Response } from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport {AppDataSource} from './data_source'; // Veritabanı bağlantısını buradan alıyoruz\r\n\r\nconst app = express();\r\nconst port = 3000;\r\n\r\n// Body parser middleware\r\napp.use(bodyParser.json());\r\n\r\n// CRUD işlemleri\r\n\r\n// Create (Yeni ürün ekle)\r\napp.post('/product', async (req: Request, res: Response) => {\r\n  const { name, price, description } = req.body;\r\n\r\n  const query = 'INSERT INTO product (name, price, description) VALUES ($1, $2, $3) RETURNING *';\r\n  const values = [name, price, description];\r\n\r\n  try {\r\n    const result = await AppDataSource.query(query, values);\r\n    res.status(201).json(result.rows[0]);\r\n  } catch (err) {\r\n    res.status(400).json({ message: 'Error creating product', error: err });\r\n  }\r\n});\r\n\r\n// Read (Ürünleri listele)\r\napp.get('/product', async (req: Request, res: Response) => {\r\n  const query = 'SELECT * FROM product';\r\n\r\n  try {\r\n    const result = await AppDataSource.query(query);\r\n    res.status(200).json(result.rows);\r\n  } catch (err) {\r\n    res.status(400).json({ message: 'Error fetching products', error: err });\r\n  }\r\n});\r\n\r\n// Read (Tek bir ürünü göster)\r\napp.get('/products/:id', async (req: Request, res: Response) => {\r\n  const { id } = req.params;\r\n\r\n  const query = 'SELECT * FROM products WHERE id = $1';\r\n  const values = [id];\r\n\r\n  try {\r\n    const result = await AppDataSource.query(query, values);\r\n    if (result.rows.length > 0) {\r\n      res.status(200).json(result.rows[0]);\r\n    } else {\r\n      res.status(404).json({ message: 'Product not found' });\r\n    }\r\n  } catch (err) {\r\n    res.status(400).json({ message: 'Error fetching product', error: err });\r\n  }\r\n});\r\n\r\n// Update (Ürün güncelle)\r\napp.put('/products/:id', async (req: Request, res: Response) => {\r\n  const { id } = req.params;\r\n  const { name, price, description } = req.body;\r\n\r\n  const query = 'UPDATE products SET name = $1, price = $2, description = $3 WHERE id = $4 RETURNING *';\r\n  const values = [name, price, description, id];\r\n\r\n  try {\r\n    const result = await AppDataSource.query(query, values);\r\n    if (result.rows.length > 0) {\r\n      res.status(200).json(result.rows[0]);\r\n    } else {\r\n      res.status(404).json({ message: 'Product not found' });\r\n    }\r\n  } catch (err) {\r\n    res.status(400).json({ message: 'Error updating product', error: err });\r\n  }\r\n});\r\n\r\n// Delete (Ürün sil)\r\napp.delete('/products/:id', async (req: Request, res: Response) => {\r\n  const { id } = req.params;\r\n\r\n  const query = 'DELETE FROM products WHERE id = $1 RETURNING *';\r\n  const values = [id];\r\n\r\n  try {\r\n    const result = await AppDataSource.query(query, values);\r\n    if (result.rows.length > 0) {\r\n      res.status(200).json({ message: 'Product deleted' });\r\n    } else {\r\n      res.status(404).json({ message: 'Product not found' });\r\n    }\r\n  } catch (err) {\r\n    res.status(400).json({ message: 'Error deleting product', error: err });\r\n  }\r\n});\r\n\r\n// Sunucuyu başlat\r\napp.listen(port, () => {\r\n  console.log(`Server is running at http://localhost:${port}`);\r\n});\r\n"],"mappings":"AAAA,OAAOA,OAAO,MAA6B,SAAS;AACpD,OAAOC,UAAU,MAAM,aAAa;AACpC,SAAQC,aAAa,QAAO,eAAe,CAAC,CAAC;;AAE7C,MAAMC,GAAG,GAAGH,OAAO,CAAC,CAAC;AACrB,MAAMI,IAAI,GAAG,IAAI;;AAEjB;AACAD,GAAG,CAACE,GAAG,CAACJ,UAAU,CAACK,IAAI,CAAC,CAAC,CAAC;;AAE1B;;AAEA;AACAH,GAAG,CAACI,IAAI,CAAC,UAAU,EAAE,OAAOC,GAAY,EAAEC,GAAa,KAAK;EAC1D,MAAM;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAY,CAAC,GAAGJ,GAAG,CAACK,IAAI;EAE7C,MAAMC,KAAK,GAAG,gFAAgF;EAC9F,MAAMC,MAAM,GAAG,CAACL,IAAI,EAAEC,KAAK,EAAEC,WAAW,CAAC;EAEzC,IAAI;IACF,MAAMI,MAAM,GAAG,MAAMd,aAAa,CAACY,KAAK,CAACA,KAAK,EAAEC,MAAM,CAAC;IACvDN,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAACU,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;EACtC,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZV,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;MAAEc,OAAO,EAAE,wBAAwB;MAAEC,KAAK,EAAEF;IAAI,CAAC,CAAC;EACzE;AACF,CAAC,CAAC;;AAEF;AACAhB,GAAG,CAACmB,GAAG,CAAC,UAAU,EAAE,OAAOd,GAAY,EAAEC,GAAa,KAAK;EACzD,MAAMK,KAAK,GAAG,uBAAuB;EAErC,IAAI;IACF,MAAME,MAAM,GAAG,MAAMd,aAAa,CAACY,KAAK,CAACA,KAAK,CAAC;IAC/CL,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAACU,MAAM,CAACE,IAAI,CAAC;EACnC,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZV,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;MAAEc,OAAO,EAAE,yBAAyB;MAAEC,KAAK,EAAEF;IAAI,CAAC,CAAC;EAC1E;AACF,CAAC,CAAC;;AAEF;AACAhB,GAAG,CAACmB,GAAG,CAAC,eAAe,EAAE,OAAOd,GAAY,EAAEC,GAAa,KAAK;EAC9D,MAAM;IAAEc;EAAG,CAAC,GAAGf,GAAG,CAACgB,MAAM;EAEzB,MAAMV,KAAK,GAAG,sCAAsC;EACpD,MAAMC,MAAM,GAAG,CAACQ,EAAE,CAAC;EAEnB,IAAI;IACF,MAAMP,MAAM,GAAG,MAAMd,aAAa,CAACY,KAAK,CAACA,KAAK,EAAEC,MAAM,CAAC;IACvD,IAAIC,MAAM,CAACE,IAAI,CAACO,MAAM,GAAG,CAAC,EAAE;MAC1BhB,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAACU,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;IACtC,CAAC,MAAM;MACLT,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;QAAEc,OAAO,EAAE;MAAoB,CAAC,CAAC;IACxD;EACF,CAAC,CAAC,OAAOD,GAAG,EAAE;IACZV,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;MAAEc,OAAO,EAAE,wBAAwB;MAAEC,KAAK,EAAEF;IAAI,CAAC,CAAC;EACzE;AACF,CAAC,CAAC;;AAEF;AACAhB,GAAG,CAACuB,GAAG,CAAC,eAAe,EAAE,OAAOlB,GAAY,EAAEC,GAAa,KAAK;EAC9D,MAAM;IAAEc;EAAG,CAAC,GAAGf,GAAG,CAACgB,MAAM;EACzB,MAAM;IAAEd,IAAI;IAAEC,KAAK;IAAEC;EAAY,CAAC,GAAGJ,GAAG,CAACK,IAAI;EAE7C,MAAMC,KAAK,GAAG,uFAAuF;EACrG,MAAMC,MAAM,GAAG,CAACL,IAAI,EAAEC,KAAK,EAAEC,WAAW,EAAEW,EAAE,CAAC;EAE7C,IAAI;IACF,MAAMP,MAAM,GAAG,MAAMd,aAAa,CAACY,KAAK,CAACA,KAAK,EAAEC,MAAM,CAAC;IACvD,IAAIC,MAAM,CAACE,IAAI,CAACO,MAAM,GAAG,CAAC,EAAE;MAC1BhB,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAACU,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;IACtC,CAAC,MAAM;MACLT,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;QAAEc,OAAO,EAAE;MAAoB,CAAC,CAAC;IACxD;EACF,CAAC,CAAC,OAAOD,GAAG,EAAE;IACZV,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;MAAEc,OAAO,EAAE,wBAAwB;MAAEC,KAAK,EAAEF;IAAI,CAAC,CAAC;EACzE;AACF,CAAC,CAAC;;AAEF;AACAhB,GAAG,CAACwB,MAAM,CAAC,eAAe,EAAE,OAAOnB,GAAY,EAAEC,GAAa,KAAK;EACjE,MAAM;IAAEc;EAAG,CAAC,GAAGf,GAAG,CAACgB,MAAM;EAEzB,MAAMV,KAAK,GAAG,gDAAgD;EAC9D,MAAMC,MAAM,GAAG,CAACQ,EAAE,CAAC;EAEnB,IAAI;IACF,MAAMP,MAAM,GAAG,MAAMd,aAAa,CAACY,KAAK,CAACA,KAAK,EAAEC,MAAM,CAAC;IACvD,IAAIC,MAAM,CAACE,IAAI,CAACO,MAAM,GAAG,CAAC,EAAE;MAC1BhB,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;QAAEc,OAAO,EAAE;MAAkB,CAAC,CAAC;IACtD,CAAC,MAAM;MACLX,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;QAAEc,OAAO,EAAE;MAAoB,CAAC,CAAC;IACxD;EACF,CAAC,CAAC,OAAOD,GAAG,EAAE;IACZV,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;MAAEc,OAAO,EAAE,wBAAwB;MAAEC,KAAK,EAAEF;IAAI,CAAC,CAAC;EACzE;AACF,CAAC,CAAC;;AAEF;AACAhB,GAAG,CAACyB,MAAM,CAACxB,IAAI,EAAE,MAAM;EACrByB,OAAO,CAACC,GAAG,CAAC,yCAAyC1B,IAAI,EAAE,CAAC;AAC9D,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}