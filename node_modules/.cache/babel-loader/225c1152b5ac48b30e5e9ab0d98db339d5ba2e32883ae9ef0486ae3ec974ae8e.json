{"ast":null,"code":"import { getMetadataArgsStorage } from \"../../globals\";\nimport { ObjectUtils } from \"../../util/ObjectUtils\";\n/**\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function Entity(nameOrOptions, maybeOptions) {\n  const options = (ObjectUtils.isObject(nameOrOptions) ? nameOrOptions : maybeOptions) || {};\n  const name = typeof nameOrOptions === \"string\" ? nameOrOptions : options.name;\n  return function (target) {\n    getMetadataArgsStorage().tables.push({\n      target: target,\n      name: name,\n      type: \"regular\",\n      orderBy: options.orderBy ? options.orderBy : undefined,\n      engine: options.engine ? options.engine : undefined,\n      database: options.database ? options.database : undefined,\n      schema: options.schema ? options.schema : undefined,\n      synchronize: options.synchronize,\n      withoutRowid: options.withoutRowid,\n      comment: options.comment ? options.comment : undefined\n    });\n  };\n}","map":{"version":3,"names":["getMetadataArgsStorage","ObjectUtils","Entity","nameOrOptions","maybeOptions","options","isObject","name","target","tables","push","type","orderBy","undefined","engine","database","schema","synchronize","withoutRowid","comment"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\decorator\\entity\\Entity.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { TableMetadataArgs } from \"../../metadata-args/TableMetadataArgs\"\nimport { EntityOptions } from \"../options/EntityOptions\"\nimport { ObjectUtils } from \"../../util/ObjectUtils\"\n\n/**\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function Entity(options?: EntityOptions): ClassDecorator\n\n/**\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function Entity(name?: string, options?: EntityOptions): ClassDecorator\n\n/**\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function Entity(\n    nameOrOptions?: string | EntityOptions,\n    maybeOptions?: EntityOptions,\n): ClassDecorator {\n    const options =\n        (ObjectUtils.isObject(nameOrOptions)\n            ? (nameOrOptions as EntityOptions)\n            : maybeOptions) || {}\n    const name =\n        typeof nameOrOptions === \"string\" ? nameOrOptions : options.name\n\n    return function (target) {\n        getMetadataArgsStorage().tables.push({\n            target: target,\n            name: name,\n            type: \"regular\",\n            orderBy: options.orderBy ? options.orderBy : undefined,\n            engine: options.engine ? options.engine : undefined,\n            database: options.database ? options.database : undefined,\n            schema: options.schema ? options.schema : undefined,\n            synchronize: options.synchronize,\n            withoutRowid: options.withoutRowid,\n            comment: options.comment ? options.comment : undefined,\n        } as TableMetadataArgs)\n    }\n}\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,eAAe;AAGtD,SAASC,WAAW,QAAQ,wBAAwB;AAcpD;;;;AAIA,OAAM,SAAUC,MAAMA,CAClBC,aAAsC,EACtCC,YAA4B;EAE5B,MAAMC,OAAO,GACT,CAACJ,WAAW,CAACK,QAAQ,CAACH,aAAa,CAAC,GAC7BA,aAA+B,GAChCC,YAAY,KAAK,EAAE;EAC7B,MAAMG,IAAI,GACN,OAAOJ,aAAa,KAAK,QAAQ,GAAGA,aAAa,GAAGE,OAAO,CAACE,IAAI;EAEpE,OAAO,UAAUC,MAAM;IACnBR,sBAAsB,EAAE,CAACS,MAAM,CAACC,IAAI,CAAC;MACjCF,MAAM,EAAEA,MAAM;MACdD,IAAI,EAAEA,IAAI;MACVI,IAAI,EAAE,SAAS;MACfC,OAAO,EAAEP,OAAO,CAACO,OAAO,GAAGP,OAAO,CAACO,OAAO,GAAGC,SAAS;MACtDC,MAAM,EAAET,OAAO,CAACS,MAAM,GAAGT,OAAO,CAACS,MAAM,GAAGD,SAAS;MACnDE,QAAQ,EAAEV,OAAO,CAACU,QAAQ,GAAGV,OAAO,CAACU,QAAQ,GAAGF,SAAS;MACzDG,MAAM,EAAEX,OAAO,CAACW,MAAM,GAAGX,OAAO,CAACW,MAAM,GAAGH,SAAS;MACnDI,WAAW,EAAEZ,OAAO,CAACY,WAAW;MAChCC,YAAY,EAAEb,OAAO,CAACa,YAAY;MAClCC,OAAO,EAAEd,OAAO,CAACc,OAAO,GAAGd,OAAO,CAACc,OAAO,GAAGN;KAC3B,CAAC;EAC3B,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}