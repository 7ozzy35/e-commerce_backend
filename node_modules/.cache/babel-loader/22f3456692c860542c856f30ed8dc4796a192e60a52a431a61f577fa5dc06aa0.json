{"ast":null,"code":"import { Subject } from \"../Subject\";\nimport { ObjectUtils } from \"../../util/ObjectUtils\";\n/**\n * Finds all cascade operations of the given subject and cascade operations of the found cascaded subjects,\n * e.g. builds a cascade tree and creates a subjects for them.\n */\nexport class CascadesSubjectBuilder {\n  // ---------------------------------------------------------------------\n  // Constructor\n  // ---------------------------------------------------------------------\n  constructor(allSubjects) {\n    this.allSubjects = allSubjects;\n  }\n  // ---------------------------------------------------------------------\n  // Public Methods\n  // ---------------------------------------------------------------------\n  /**\n   * Builds a cascade subjects tree and pushes them in into the given array of subjects.\n   */\n  build(subject, operationType) {\n    subject.metadata.extractRelationValuesFromEntity(subject.entity, subject.metadata.relations) // todo: we can create EntityMetadata.cascadeRelations\n    .forEach(([relation, relationEntity, relationEntityMetadata]) => {\n      // we need only defined values and insert, update, soft-remove or recover cascades of the relation should be set\n      if (relationEntity === undefined || relationEntity === null || !relation.isCascadeInsert && !relation.isCascadeUpdate && !relation.isCascadeSoftRemove && !relation.isCascadeRecover) return;\n      // if relation entity is just a relation id set (for example post.tag = 1)\n      // then we don't really need to check cascades since there is no object to insert or update\n      if (!ObjectUtils.isObject(relationEntity)) return;\n      // if we already has this entity in list of operated subjects then skip it to avoid recursion\n      const alreadyExistRelationEntitySubject = this.findByPersistEntityLike(relationEntityMetadata.target, relationEntity);\n      if (alreadyExistRelationEntitySubject) {\n        if (alreadyExistRelationEntitySubject.canBeInserted === false)\n          // if its not marked for insertion yet\n          alreadyExistRelationEntitySubject.canBeInserted = relation.isCascadeInsert === true && operationType === \"save\";\n        if (alreadyExistRelationEntitySubject.canBeUpdated === false)\n          // if its not marked for update yet\n          alreadyExistRelationEntitySubject.canBeUpdated = relation.isCascadeUpdate === true && operationType === \"save\";\n        if (alreadyExistRelationEntitySubject.canBeSoftRemoved === false)\n          // if its not marked for removal yet\n          alreadyExistRelationEntitySubject.canBeSoftRemoved = relation.isCascadeSoftRemove === true && operationType === \"soft-remove\";\n        if (alreadyExistRelationEntitySubject.canBeRecovered === false)\n          // if its not marked for recovery yet\n          alreadyExistRelationEntitySubject.canBeRecovered = relation.isCascadeRecover === true && operationType === \"recover\";\n        return;\n      }\n      // mark subject with what we can do with it\n      // and add to the array of subjects to load only if there is no same entity there already\n      const relationEntitySubject = new Subject({\n        metadata: relationEntityMetadata,\n        parentSubject: subject,\n        entity: relationEntity,\n        canBeInserted: relation.isCascadeInsert === true && operationType === \"save\",\n        canBeUpdated: relation.isCascadeUpdate === true && operationType === \"save\",\n        canBeSoftRemoved: relation.isCascadeSoftRemove === true && operationType === \"soft-remove\",\n        canBeRecovered: relation.isCascadeRecover === true && operationType === \"recover\"\n      });\n      this.allSubjects.push(relationEntitySubject);\n      // go recursively and find other entities we need to insert/update\n      this.build(relationEntitySubject, operationType);\n    });\n  }\n  // ---------------------------------------------------------------------\n  // Protected Methods\n  // ---------------------------------------------------------------------\n  /**\n   * Finds subject where entity like given subject's entity.\n   * Comparison made by entity id.\n   */\n  findByPersistEntityLike(entityTarget, entity) {\n    return this.allSubjects.find(subject => {\n      if (!subject.entity) return false;\n      if (subject.entity === entity) return true;\n      return subject.metadata.target === entityTarget && subject.metadata.compareEntities(subject.entityWithFulfilledIds, entity);\n    });\n  }\n}","map":{"version":3,"names":["Subject","ObjectUtils","CascadesSubjectBuilder","constructor","allSubjects","build","subject","operationType","metadata","extractRelationValuesFromEntity","entity","relations","forEach","relation","relationEntity","relationEntityMetadata","undefined","isCascadeInsert","isCascadeUpdate","isCascadeSoftRemove","isCascadeRecover","isObject","alreadyExistRelationEntitySubject","findByPersistEntityLike","target","canBeInserted","canBeUpdated","canBeSoftRemoved","canBeRecovered","relationEntitySubject","parentSubject","push","entityTarget","find","compareEntities","entityWithFulfilledIds"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\persistence\\subject-builder\\CascadesSubjectBuilder.ts"],"sourcesContent":["import { Subject } from \"../Subject\"\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { ObjectUtils } from \"../../util/ObjectUtils\"\n\n/**\n * Finds all cascade operations of the given subject and cascade operations of the found cascaded subjects,\n * e.g. builds a cascade tree and creates a subjects for them.\n */\nexport class CascadesSubjectBuilder {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(protected allSubjects: Subject[]) {}\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds a cascade subjects tree and pushes them in into the given array of subjects.\n     */\n    build(\n        subject: Subject,\n        operationType: \"save\" | \"remove\" | \"soft-remove\" | \"recover\",\n    ) {\n        subject.metadata\n            .extractRelationValuesFromEntity(\n                subject.entity!,\n                subject.metadata.relations,\n            ) // todo: we can create EntityMetadata.cascadeRelations\n            .forEach(([relation, relationEntity, relationEntityMetadata]) => {\n                // we need only defined values and insert, update, soft-remove or recover cascades of the relation should be set\n                if (\n                    relationEntity === undefined ||\n                    relationEntity === null ||\n                    (!relation.isCascadeInsert &&\n                        !relation.isCascadeUpdate &&\n                        !relation.isCascadeSoftRemove &&\n                        !relation.isCascadeRecover)\n                )\n                    return\n\n                // if relation entity is just a relation id set (for example post.tag = 1)\n                // then we don't really need to check cascades since there is no object to insert or update\n                if (!ObjectUtils.isObject(relationEntity)) return\n\n                // if we already has this entity in list of operated subjects then skip it to avoid recursion\n                const alreadyExistRelationEntitySubject =\n                    this.findByPersistEntityLike(\n                        relationEntityMetadata.target,\n                        relationEntity,\n                    )\n                if (alreadyExistRelationEntitySubject) {\n                    if (\n                        alreadyExistRelationEntitySubject.canBeInserted ===\n                        false\n                    )\n                        // if its not marked for insertion yet\n                        alreadyExistRelationEntitySubject.canBeInserted =\n                            relation.isCascadeInsert === true &&\n                            operationType === \"save\"\n                    if (\n                        alreadyExistRelationEntitySubject.canBeUpdated === false\n                    )\n                        // if its not marked for update yet\n                        alreadyExistRelationEntitySubject.canBeUpdated =\n                            relation.isCascadeUpdate === true &&\n                            operationType === \"save\"\n                    if (\n                        alreadyExistRelationEntitySubject.canBeSoftRemoved ===\n                        false\n                    )\n                        // if its not marked for removal yet\n                        alreadyExistRelationEntitySubject.canBeSoftRemoved =\n                            relation.isCascadeSoftRemove === true &&\n                            operationType === \"soft-remove\"\n                    if (\n                        alreadyExistRelationEntitySubject.canBeRecovered ===\n                        false\n                    )\n                        // if its not marked for recovery yet\n                        alreadyExistRelationEntitySubject.canBeRecovered =\n                            relation.isCascadeRecover === true &&\n                            operationType === \"recover\"\n                    return\n                }\n\n                // mark subject with what we can do with it\n                // and add to the array of subjects to load only if there is no same entity there already\n                const relationEntitySubject = new Subject({\n                    metadata: relationEntityMetadata,\n                    parentSubject: subject,\n                    entity: relationEntity,\n                    canBeInserted:\n                        relation.isCascadeInsert === true &&\n                        operationType === \"save\",\n                    canBeUpdated:\n                        relation.isCascadeUpdate === true &&\n                        operationType === \"save\",\n                    canBeSoftRemoved:\n                        relation.isCascadeSoftRemove === true &&\n                        operationType === \"soft-remove\",\n                    canBeRecovered:\n                        relation.isCascadeRecover === true &&\n                        operationType === \"recover\",\n                })\n                this.allSubjects.push(relationEntitySubject)\n\n                // go recursively and find other entities we need to insert/update\n                this.build(relationEntitySubject, operationType)\n            })\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Finds subject where entity like given subject's entity.\n     * Comparison made by entity id.\n     */\n    protected findByPersistEntityLike(\n        entityTarget: Function | string,\n        entity: ObjectLiteral,\n    ): Subject | undefined {\n        return this.allSubjects.find((subject) => {\n            if (!subject.entity) return false\n\n            if (subject.entity === entity) return true\n\n            return (\n                subject.metadata.target === entityTarget &&\n                subject.metadata.compareEntities(\n                    subject.entityWithFulfilledIds!,\n                    entity,\n                )\n            )\n        })\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}