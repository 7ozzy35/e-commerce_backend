{"ast":null,"code":"/**\n * Dummy class for replacement via `package.json` in browser builds.\n *\n * If we don't include these functions typeorm will throw an error on runtime\n * as well as during webpack builds.\n */\nexport class ConnectionOptionsEnvReader {\n  async read() {\n    throw new Error(`Cannot read connection options in a browser context.`);\n  }\n}\n/**\n * Dummy class for replacement via `package.json` in browser builds.\n *\n * If we don't include these functions typeorm will throw an error on runtime\n * as well as during webpack builds.\n */\nexport class ConnectionOptionsXmlReader {\n  async read(path) {\n    throw new Error(`Cannot read connection options in a browser context.`);\n  }\n}\n/**\n * Dummy class for replacement via `package.json` in browser builds.\n *\n * If we don't include these functions typeorm will throw an error on runtime\n * as well as during webpack builds.\n */\nexport class ConnectionOptionsYmlReader {\n  async read(path) {\n    throw new Error(`Cannot read connection options in a browser context.`);\n  }\n}\n/**\n * Dummy class for replacement via `package.json` in browser builds.\n *\n * If we don't include these functions typeorm will throw an error on runtime\n * as well as during webpack builds.\n */\nexport class ConnectionOptionsReader {\n  async all() {\n    throw new Error(`Cannot read connection options in a browser context.`);\n  }\n  async get() {\n    throw new Error(`Cannot read connection options in a browser context.`);\n  }\n  async has() {\n    throw new Error(`Cannot read connection options in a browser context.`);\n  }\n}","map":{"version":3,"names":["ConnectionOptionsEnvReader","read","Error","ConnectionOptionsXmlReader","path","ConnectionOptionsYmlReader","ConnectionOptionsReader","all","get","has"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\platform\\BrowserConnectionOptionsReaderDummy.ts"],"sourcesContent":["/**\n * Dummy class for replacement via `package.json` in browser builds.\n *\n * If we don't include these functions typeorm will throw an error on runtime\n * as well as during webpack builds.\n */\nexport class ConnectionOptionsEnvReader {\n    async read() {\n        throw new Error(`Cannot read connection options in a browser context.`);\n    }\n}\n\n/**\n * Dummy class for replacement via `package.json` in browser builds.\n *\n * If we don't include these functions typeorm will throw an error on runtime\n * as well as during webpack builds.\n */\nexport class ConnectionOptionsXmlReader {\n    async read(path: string) {\n        throw new Error(`Cannot read connection options in a browser context.`);\n    }\n}\n\n/**\n * Dummy class for replacement via `package.json` in browser builds.\n *\n * If we don't include these functions typeorm will throw an error on runtime\n * as well as during webpack builds.\n */\nexport class ConnectionOptionsYmlReader {\n    async read(path: string) {\n        throw new Error(`Cannot read connection options in a browser context.`);\n    }\n}\n\n/**\n * Dummy class for replacement via `package.json` in browser builds.\n *\n * If we don't include these functions typeorm will throw an error on runtime\n * as well as during webpack builds.\n */\nexport class ConnectionOptionsReader {\n    async all() {\n        throw new Error(`Cannot read connection options in a browser context.`);\n    }\n\n    async get() {\n        throw new Error(`Cannot read connection options in a browser context.`);\n    }\n\n    async has() {\n        throw new Error(`Cannot read connection options in a browser context.`);\n    }\n}\n"],"mappings":"AAAA;;;;;;AAMA,OAAM,MAAOA,0BAA0B;EACnC,MAAMC,IAAIA,CAAA;IACN,MAAM,IAAIC,KAAK,CAAC,sDAAsD,CAAC;EAC3E;;AAGJ;;;;;;AAMA,OAAM,MAAOC,0BAA0B;EACnC,MAAMF,IAAIA,CAACG,IAAY;IACnB,MAAM,IAAIF,KAAK,CAAC,sDAAsD,CAAC;EAC3E;;AAGJ;;;;;;AAMA,OAAM,MAAOG,0BAA0B;EACnC,MAAMJ,IAAIA,CAACG,IAAY;IACnB,MAAM,IAAIF,KAAK,CAAC,sDAAsD,CAAC;EAC3E;;AAGJ;;;;;;AAMA,OAAM,MAAOI,uBAAuB;EAChC,MAAMC,GAAGA,CAAA;IACL,MAAM,IAAIL,KAAK,CAAC,sDAAsD,CAAC;EAC3E;EAEA,MAAMM,GAAGA,CAAA;IACL,MAAM,IAAIN,KAAK,CAAC,sDAAsD,CAAC;EAC3E;EAEA,MAAMO,GAAGA,CAAA;IACL,MAAM,IAAIP,KAAK,CAAC,sDAAsD,CAAC;EAC3E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}