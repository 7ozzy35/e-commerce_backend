{"ast":null,"code":"import { TypeORMError } from \"./TypeORMError\";\nexport class UsingJoinColumnOnlyOnOneSideAllowedError extends TypeORMError {\n  constructor(entityMetadata, relation) {\n    super(`Using JoinColumn is allowed only on one side of the one-to-one relationship. ` + `Both ${entityMetadata.name}#${relation.propertyName} and ${relation.inverseEntityMetadata.name}#${relation.inverseRelation.propertyName} ` + `has JoinTable decorators. Choose one of them and left JoinTable decorator only on it.`);\n  }\n}","map":{"version":3,"names":["TypeORMError","UsingJoinColumnOnlyOnOneSideAllowedError","constructor","entityMetadata","relation","name","propertyName","inverseEntityMetadata","inverseRelation"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\error\\UsingJoinColumnOnlyOnOneSideAllowedError.ts"],"sourcesContent":["import { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\nimport { TypeORMError } from \"./TypeORMError\"\n\nexport class UsingJoinColumnOnlyOnOneSideAllowedError extends TypeORMError {\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\n        super(\n            `Using JoinColumn is allowed only on one side of the one-to-one relationship. ` +\n                `Both ${entityMetadata.name}#${relation.propertyName} and ${\n                    relation.inverseEntityMetadata.name\n                }#${relation.inverseRelation!.propertyName} ` +\n                `has JoinTable decorators. Choose one of them and left JoinTable decorator only on it.`,\n        )\n    }\n}\n"],"mappings":"AAEA,SAASA,YAAY,QAAQ,gBAAgB;AAE7C,OAAM,MAAOC,wCAAyC,SAAQD,YAAY;EACtEE,YAAYC,cAA8B,EAAEC,QAA0B;IAClE,KAAK,CACD,+EAA+E,GAC3E,QAAQD,cAAc,CAACE,IAAI,IAAID,QAAQ,CAACE,YAAY,QAChDF,QAAQ,CAACG,qBAAqB,CAACF,IACnC,IAAID,QAAQ,CAACI,eAAgB,CAACF,YAAY,GAAG,GAC7C,uFAAuF,CAC9F;EACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}