{"ast":null,"code":"import { InstanceChecker } from \"../util/InstanceChecker\";\nimport { ApplyValueTransformers } from \"../util/ApplyValueTransformers\";\n/**\n * Find Operator used in Find Conditions.\n */\nexport class FindOperator {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(type, value, useParameter = true, multipleParameters = false, getSql, objectLiteralParameters) {\n    this[\"@instanceof\"] = Symbol.for(\"FindOperator\");\n    this._type = type;\n    this._value = value;\n    this._useParameter = useParameter;\n    this._multipleParameters = multipleParameters;\n    this._getSql = getSql;\n    this._objectLiteralParameters = objectLiteralParameters;\n  }\n  // -------------------------------------------------------------------------\n  // Accessors\n  // -------------------------------------------------------------------------\n  /**\n   * Indicates if parameter is used or not for this operator.\n   * Extracts final value if value is another find operator.\n   */\n  get useParameter() {\n    if (InstanceChecker.isFindOperator(this._value)) return this._value.useParameter;\n    return this._useParameter;\n  }\n  /**\n   * Indicates if multiple parameters must be used for this operator.\n   * Extracts final value if value is another find operator.\n   */\n  get multipleParameters() {\n    if (InstanceChecker.isFindOperator(this._value)) return this._value.multipleParameters;\n    return this._multipleParameters;\n  }\n  /**\n   * Gets the Type of this FindOperator\n   */\n  get type() {\n    return this._type;\n  }\n  /**\n   * Gets the final value needs to be used as parameter value.\n   */\n  get value() {\n    if (InstanceChecker.isFindOperator(this._value)) return this._value.value;\n    return this._value;\n  }\n  /**\n   * Gets ObjectLiteral parameters.\n   */\n  get objectLiteralParameters() {\n    if (InstanceChecker.isFindOperator(this._value)) return this._value.objectLiteralParameters;\n    return this._objectLiteralParameters;\n  }\n  /**\n   * Gets the child FindOperator if it exists\n   */\n  get child() {\n    if (InstanceChecker.isFindOperator(this._value)) return this._value;\n    return undefined;\n  }\n  /**\n   * Gets the SQL generator\n   */\n  get getSql() {\n    if (InstanceChecker.isFindOperator(this._value)) return this._value.getSql;\n    return this._getSql;\n  }\n  transformValue(transformer) {\n    if (this._value instanceof FindOperator) {\n      this._value.transformValue(transformer);\n    } else {\n      this._value = Array.isArray(this._value) && this._multipleParameters ? this._value.map(v => transformer && ApplyValueTransformers.transformTo(transformer, v)) : ApplyValueTransformers.transformTo(transformer, this._value);\n    }\n  }\n}","map":{"version":3,"names":["InstanceChecker","ApplyValueTransformers","FindOperator","constructor","type","value","useParameter","multipleParameters","getSql","objectLiteralParameters","Symbol","for","_type","_value","_useParameter","_multipleParameters","_getSql","_objectLiteralParameters","isFindOperator","child","undefined","transformValue","transformer","Array","isArray","map","v","transformTo"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\find-options\\FindOperator.ts"],"sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { FindOperatorType } from \"./FindOperatorType\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\nimport { ValueTransformer } from \"../decorator/options/ValueTransformer\"\nimport { ApplyValueTransformers } from \"../util/ApplyValueTransformers\"\n\ntype SqlGeneratorType = (aliasPath: string) => string\n\n/**\n * Find Operator used in Find Conditions.\n */\nexport class FindOperator<T> {\n    readonly \"@instanceof\" = Symbol.for(\"FindOperator\")\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Operator type.\n     */\n    private _type: FindOperatorType\n\n    /**\n     * Parameter value.\n     */\n    private _value: T | FindOperator<T>\n\n    /**\n     * ObjectLiteral parameters.\n     */\n    private _objectLiteralParameters: ObjectLiteral | undefined\n\n    /**\n     * Indicates if parameter is used or not for this operator.\n     */\n    private _useParameter: boolean\n\n    /**\n     * Indicates if multiple parameters must be used for this operator.\n     */\n    private _multipleParameters: boolean\n\n    /**\n     * SQL generator\n     */\n    private _getSql: SqlGeneratorType | undefined\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        type: FindOperatorType,\n        value: T | FindOperator<T>,\n        useParameter: boolean = true,\n        multipleParameters: boolean = false,\n        getSql?: SqlGeneratorType,\n        objectLiteralParameters?: ObjectLiteral,\n    ) {\n        this._type = type\n        this._value = value\n        this._useParameter = useParameter\n        this._multipleParameters = multipleParameters\n        this._getSql = getSql\n        this._objectLiteralParameters = objectLiteralParameters\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if parameter is used or not for this operator.\n     * Extracts final value if value is another find operator.\n     */\n    get useParameter(): boolean {\n        if (InstanceChecker.isFindOperator(this._value))\n            return this._value.useParameter\n\n        return this._useParameter\n    }\n\n    /**\n     * Indicates if multiple parameters must be used for this operator.\n     * Extracts final value if value is another find operator.\n     */\n    get multipleParameters(): boolean {\n        if (InstanceChecker.isFindOperator(this._value))\n            return this._value.multipleParameters\n\n        return this._multipleParameters\n    }\n\n    /**\n     * Gets the Type of this FindOperator\n     */\n    get type(): FindOperatorType {\n        return this._type\n    }\n\n    /**\n     * Gets the final value needs to be used as parameter value.\n     */\n    get value(): T {\n        if (InstanceChecker.isFindOperator(this._value))\n            return this._value.value\n\n        return this._value\n    }\n\n    /**\n     * Gets ObjectLiteral parameters.\n     */\n    get objectLiteralParameters(): ObjectLiteral | undefined {\n        if (InstanceChecker.isFindOperator(this._value))\n            return this._value.objectLiteralParameters\n\n        return this._objectLiteralParameters\n    }\n\n    /**\n     * Gets the child FindOperator if it exists\n     */\n    get child(): FindOperator<T> | undefined {\n        if (InstanceChecker.isFindOperator(this._value)) return this._value\n\n        return undefined\n    }\n\n    /**\n     * Gets the SQL generator\n     */\n    get getSql(): SqlGeneratorType | undefined {\n        if (InstanceChecker.isFindOperator(this._value))\n            return this._value.getSql\n\n        return this._getSql\n    }\n\n    transformValue(transformer: ValueTransformer | ValueTransformer[]) {\n        if (this._value instanceof FindOperator) {\n            this._value.transformValue(transformer)\n        } else {\n            this._value =\n                Array.isArray(this._value) && this._multipleParameters\n                    ? this._value.map(\n                          (v: any) =>\n                              transformer &&\n                              ApplyValueTransformers.transformTo(\n                                  transformer,\n                                  v,\n                              ),\n                      )\n                    : ApplyValueTransformers.transformTo(\n                          transformer,\n                          this._value,\n                      )\n        }\n    }\n}\n"],"mappings":"AAEA,SAASA,eAAe,QAAQ,yBAAyB;AAEzD,SAASC,sBAAsB,QAAQ,gCAAgC;AAIvE;;;AAGA,OAAM,MAAOC,YAAY;EAqCrB;EACA;EACA;EAEAC,YACIC,IAAsB,EACtBC,KAA0B,EAC1BC,YAAA,GAAwB,IAAI,EAC5BC,kBAAA,GAA8B,KAAK,EACnCC,MAAyB,EACzBC,uBAAuC;IA9ClC,mBAAa,GAAGC,MAAM,CAACC,GAAG,CAAC,cAAc,CAAC;IAgD/C,IAAI,CAACC,KAAK,GAAGR,IAAI;IACjB,IAAI,CAACS,MAAM,GAAGR,KAAK;IACnB,IAAI,CAACS,aAAa,GAAGR,YAAY;IACjC,IAAI,CAACS,mBAAmB,GAAGR,kBAAkB;IAC7C,IAAI,CAACS,OAAO,GAAGR,MAAM;IACrB,IAAI,CAACS,wBAAwB,GAAGR,uBAAuB;EAC3D;EAEA;EACA;EACA;EAEA;;;;EAIA,IAAIH,YAAYA,CAAA;IACZ,IAAIN,eAAe,CAACkB,cAAc,CAAC,IAAI,CAACL,MAAM,CAAC,EAC3C,OAAO,IAAI,CAACA,MAAM,CAACP,YAAY;IAEnC,OAAO,IAAI,CAACQ,aAAa;EAC7B;EAEA;;;;EAIA,IAAIP,kBAAkBA,CAAA;IAClB,IAAIP,eAAe,CAACkB,cAAc,CAAC,IAAI,CAACL,MAAM,CAAC,EAC3C,OAAO,IAAI,CAACA,MAAM,CAACN,kBAAkB;IAEzC,OAAO,IAAI,CAACQ,mBAAmB;EACnC;EAEA;;;EAGA,IAAIX,IAAIA,CAAA;IACJ,OAAO,IAAI,CAACQ,KAAK;EACrB;EAEA;;;EAGA,IAAIP,KAAKA,CAAA;IACL,IAAIL,eAAe,CAACkB,cAAc,CAAC,IAAI,CAACL,MAAM,CAAC,EAC3C,OAAO,IAAI,CAACA,MAAM,CAACR,KAAK;IAE5B,OAAO,IAAI,CAACQ,MAAM;EACtB;EAEA;;;EAGA,IAAIJ,uBAAuBA,CAAA;IACvB,IAAIT,eAAe,CAACkB,cAAc,CAAC,IAAI,CAACL,MAAM,CAAC,EAC3C,OAAO,IAAI,CAACA,MAAM,CAACJ,uBAAuB;IAE9C,OAAO,IAAI,CAACQ,wBAAwB;EACxC;EAEA;;;EAGA,IAAIE,KAAKA,CAAA;IACL,IAAInB,eAAe,CAACkB,cAAc,CAAC,IAAI,CAACL,MAAM,CAAC,EAAE,OAAO,IAAI,CAACA,MAAM;IAEnE,OAAOO,SAAS;EACpB;EAEA;;;EAGA,IAAIZ,MAAMA,CAAA;IACN,IAAIR,eAAe,CAACkB,cAAc,CAAC,IAAI,CAACL,MAAM,CAAC,EAC3C,OAAO,IAAI,CAACA,MAAM,CAACL,MAAM;IAE7B,OAAO,IAAI,CAACQ,OAAO;EACvB;EAEAK,cAAcA,CAACC,WAAkD;IAC7D,IAAI,IAAI,CAACT,MAAM,YAAYX,YAAY,EAAE;MACrC,IAAI,CAACW,MAAM,CAACQ,cAAc,CAACC,WAAW,CAAC;IAC3C,CAAC,MAAM;MACH,IAAI,CAACT,MAAM,GACPU,KAAK,CAACC,OAAO,CAAC,IAAI,CAACX,MAAM,CAAC,IAAI,IAAI,CAACE,mBAAmB,GAChD,IAAI,CAACF,MAAM,CAACY,GAAG,CACVC,CAAM,IACHJ,WAAW,IACXrB,sBAAsB,CAAC0B,WAAW,CAC9BL,WAAW,EACXI,CAAC,CACJ,CACR,GACDzB,sBAAsB,CAAC0B,WAAW,CAC9BL,WAAW,EACX,IAAI,CAACT,MAAM,CACd;IACf;EACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}