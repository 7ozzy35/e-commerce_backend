{"ast":null,"code":"export class ApplyValueTransformers {\n  static transformFrom(transformer, databaseValue) {\n    if (Array.isArray(transformer)) {\n      const reverseTransformers = transformer.slice().reverse();\n      return reverseTransformers.reduce((transformedValue, _transformer) => {\n        return _transformer.from(transformedValue);\n      }, databaseValue);\n    }\n    return transformer.from(databaseValue);\n  }\n  static transformTo(transformer, entityValue) {\n    if (Array.isArray(transformer)) {\n      return transformer.reduce((transformedValue, _transformer) => {\n        return _transformer.to(transformedValue);\n      }, entityValue);\n    }\n    return transformer.to(entityValue);\n  }\n}","map":{"version":3,"names":["ApplyValueTransformers","transformFrom","transformer","databaseValue","Array","isArray","reverseTransformers","slice","reverse","reduce","transformedValue","_transformer","from","transformTo","entityValue","to"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\util\\ApplyValueTransformers.ts"],"sourcesContent":["import { ValueTransformer } from \"../decorator/options/ValueTransformer\"\n\nexport class ApplyValueTransformers {\n    static transformFrom(\n        transformer: ValueTransformer | ValueTransformer[],\n        databaseValue: any,\n    ) {\n        if (Array.isArray(transformer)) {\n            const reverseTransformers = transformer.slice().reverse()\n            return reverseTransformers.reduce(\n                (transformedValue, _transformer) => {\n                    return _transformer.from(transformedValue)\n                },\n                databaseValue,\n            )\n        }\n        return transformer.from(databaseValue)\n    }\n    static transformTo(\n        transformer: ValueTransformer | ValueTransformer[],\n        entityValue: any,\n    ) {\n        if (Array.isArray(transformer)) {\n            return transformer.reduce((transformedValue, _transformer) => {\n                return _transformer.to(transformedValue)\n            }, entityValue)\n        }\n        return transformer.to(entityValue)\n    }\n}\n"],"mappings":"AAEA,OAAM,MAAOA,sBAAsB;EAC/B,OAAOC,aAAaA,CAChBC,WAAkD,EAClDC,aAAkB;IAElB,IAAIC,KAAK,CAACC,OAAO,CAACH,WAAW,CAAC,EAAE;MAC5B,MAAMI,mBAAmB,GAAGJ,WAAW,CAACK,KAAK,EAAE,CAACC,OAAO,EAAE;MACzD,OAAOF,mBAAmB,CAACG,MAAM,CAC7B,CAACC,gBAAgB,EAAEC,YAAY,KAAI;QAC/B,OAAOA,YAAY,CAACC,IAAI,CAACF,gBAAgB,CAAC;MAC9C,CAAC,EACDP,aAAa,CAChB;IACL;IACA,OAAOD,WAAW,CAACU,IAAI,CAACT,aAAa,CAAC;EAC1C;EACA,OAAOU,WAAWA,CACdX,WAAkD,EAClDY,WAAgB;IAEhB,IAAIV,KAAK,CAACC,OAAO,CAACH,WAAW,CAAC,EAAE;MAC5B,OAAOA,WAAW,CAACO,MAAM,CAAC,CAACC,gBAAgB,EAAEC,YAAY,KAAI;QACzD,OAAOA,YAAY,CAACI,EAAE,CAACL,gBAAgB,CAAC;MAC5C,CAAC,EAAEI,WAAW,CAAC;IACnB;IACA,OAAOZ,WAAW,CAACa,EAAE,CAACD,WAAW,CAAC;EACtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}