{"ast":null,"code":"import { QueryBuilderUtils } from \"../QueryBuilderUtils\";\nimport { ObjectUtils } from \"../../util/ObjectUtils\";\nimport { TypeORMError } from \"../../error/TypeORMError\";\nexport class RelationCountAttribute {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(expressionMap, relationCountAttribute) {\n    this.expressionMap = expressionMap;\n    ObjectUtils.assign(this, relationCountAttribute || {});\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  get joinInverseSideMetadata() {\n    return this.relation.inverseEntityMetadata;\n  }\n  /**\n   * Alias of the parent of this join.\n   * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\n   * This value is extracted from entityOrProperty value.\n   * This is available when join was made using \"post.category\" syntax.\n   */\n  get parentAlias() {\n    if (!QueryBuilderUtils.isAliasProperty(this.relationName)) throw new TypeORMError(`Given value must be a string representation of alias property`);\n    return this.relationName.split(\".\")[0];\n  }\n  /**\n   * Relation property name of the parent.\n   * This is used to understand what is joined.\n   * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\n   * This value is extracted from entityOrProperty value.\n   * This is available when join was made using \"post.category\" syntax.\n   */\n  get relationProperty() {\n    if (!QueryBuilderUtils.isAliasProperty(this.relationName)) throw new TypeORMError(`Given value is a string representation of alias property`);\n    return this.relationName.split(\".\")[1];\n  }\n  get junctionAlias() {\n    const [parentAlias, relationProperty] = this.relationName.split(\".\");\n    return parentAlias + \"_\" + relationProperty + \"_rc\";\n  }\n  /**\n   * Relation of the parent.\n   * This is used to understand what is joined.\n   * This is available when join was made using \"post.category\" syntax.\n   */\n  get relation() {\n    if (!QueryBuilderUtils.isAliasProperty(this.relationName)) throw new TypeORMError(`Given value is a string representation of alias property`);\n    const [parentAlias, propertyPath] = this.relationName.split(\".\");\n    const relationOwnerSelection = this.expressionMap.findAliasByName(parentAlias);\n    const relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(propertyPath);\n    if (!relation) throw new TypeORMError(`Relation with property path ${propertyPath} in entity was not found.`);\n    return relation;\n  }\n  /**\n   * Metadata of the joined entity.\n   * If table without entity was joined, then it will return undefined.\n   */\n  get metadata() {\n    if (!QueryBuilderUtils.isAliasProperty(this.relationName)) throw new TypeORMError(`Given value is a string representation of alias property`);\n    const parentAlias = this.relationName.split(\".\")[0];\n    const selection = this.expressionMap.findAliasByName(parentAlias);\n    return selection.metadata;\n  }\n  get mapToPropertyPropertyName() {\n    return this.mapToProperty.split(\".\")[1];\n  }\n}","map":{"version":3,"names":["QueryBuilderUtils","ObjectUtils","TypeORMError","RelationCountAttribute","constructor","expressionMap","relationCountAttribute","assign","joinInverseSideMetadata","relation","inverseEntityMetadata","parentAlias","isAliasProperty","relationName","split","relationProperty","junctionAlias","propertyPath","relationOwnerSelection","findAliasByName","metadata","findRelationWithPropertyPath","selection","mapToPropertyPropertyName","mapToProperty"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\query-builder\\relation-count\\RelationCountAttribute.ts"],"sourcesContent":["import { EntityMetadata } from \"../../metadata/EntityMetadata\"\nimport { QueryBuilderUtils } from \"../QueryBuilderUtils\"\nimport { RelationMetadata } from \"../../metadata/RelationMetadata\"\nimport { QueryExpressionMap } from \"../QueryExpressionMap\"\nimport { SelectQueryBuilder } from \"../SelectQueryBuilder\"\nimport { ObjectUtils } from \"../../util/ObjectUtils\"\nimport { TypeORMError } from \"../../error/TypeORMError\"\n\nexport class RelationCountAttribute {\n    /**\n     * Alias of the joined (destination) table.\n     */\n    alias?: string\n\n    /**\n     * Name of relation.\n     */\n    relationName: string\n\n    /**\n     * Property + alias of the object where to joined data should be mapped.\n     */\n    mapToProperty: string\n\n    /**\n     * Extra condition applied to \"ON\" section of join.\n     */\n    queryBuilderFactory?: (\n        qb: SelectQueryBuilder<any>,\n    ) => SelectQueryBuilder<any>\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        private expressionMap: QueryExpressionMap,\n        relationCountAttribute?: Partial<RelationCountAttribute>,\n    ) {\n        ObjectUtils.assign(this, relationCountAttribute || {})\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    get joinInverseSideMetadata(): EntityMetadata {\n        return this.relation.inverseEntityMetadata\n    }\n\n    /**\n     * Alias of the parent of this join.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get parentAlias(): string {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new TypeORMError(\n                `Given value must be a string representation of alias property`,\n            )\n\n        return this.relationName.split(\".\")[0]\n    }\n\n    /**\n     * Relation property name of the parent.\n     * This is used to understand what is joined.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get relationProperty(): string | undefined {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new TypeORMError(\n                `Given value is a string representation of alias property`,\n            )\n\n        return this.relationName.split(\".\")[1]\n    }\n\n    get junctionAlias(): string {\n        const [parentAlias, relationProperty] = this.relationName.split(\".\")\n        return parentAlias + \"_\" + relationProperty + \"_rc\"\n    }\n\n    /**\n     * Relation of the parent.\n     * This is used to understand what is joined.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get relation(): RelationMetadata {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new TypeORMError(\n                `Given value is a string representation of alias property`,\n            )\n\n        const [parentAlias, propertyPath] = this.relationName.split(\".\")\n        const relationOwnerSelection =\n            this.expressionMap.findAliasByName(parentAlias)\n        const relation =\n            relationOwnerSelection.metadata.findRelationWithPropertyPath(\n                propertyPath,\n            )\n        if (!relation)\n            throw new TypeORMError(\n                `Relation with property path ${propertyPath} in entity was not found.`,\n            )\n        return relation\n    }\n\n    /**\n     * Metadata of the joined entity.\n     * If table without entity was joined, then it will return undefined.\n     */\n    get metadata(): EntityMetadata {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new TypeORMError(\n                `Given value is a string representation of alias property`,\n            )\n\n        const parentAlias = this.relationName.split(\".\")[0]\n        const selection = this.expressionMap.findAliasByName(parentAlias)\n        return selection.metadata\n    }\n\n    get mapToPropertyPropertyName(): string {\n        return this.mapToProperty!.split(\".\")[1]\n    }\n}\n"],"mappings":"AACA,SAASA,iBAAiB,QAAQ,sBAAsB;AAIxD,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,YAAY,QAAQ,0BAA0B;AAEvD,OAAM,MAAOC,sBAAsB;EAuB/B;EACA;EACA;EAEAC,YACYC,aAAiC,EACzCC,sBAAwD;IADhD,KAAAD,aAAa,GAAbA,aAAa;IAGrBJ,WAAW,CAACM,MAAM,CAAC,IAAI,EAAED,sBAAsB,IAAI,EAAE,CAAC;EAC1D;EAEA;EACA;EACA;EAEA,IAAIE,uBAAuBA,CAAA;IACvB,OAAO,IAAI,CAACC,QAAQ,CAACC,qBAAqB;EAC9C;EAEA;;;;;;EAMA,IAAIC,WAAWA,CAAA;IACX,IAAI,CAACX,iBAAiB,CAACY,eAAe,CAAC,IAAI,CAACC,YAAY,CAAC,EACrD,MAAM,IAAIX,YAAY,CAClB,+DAA+D,CAClE;IAEL,OAAO,IAAI,CAACW,YAAY,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC1C;EAEA;;;;;;;EAOA,IAAIC,gBAAgBA,CAAA;IAChB,IAAI,CAACf,iBAAiB,CAACY,eAAe,CAAC,IAAI,CAACC,YAAY,CAAC,EACrD,MAAM,IAAIX,YAAY,CAClB,0DAA0D,CAC7D;IAEL,OAAO,IAAI,CAACW,YAAY,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC1C;EAEA,IAAIE,aAAaA,CAAA;IACb,MAAM,CAACL,WAAW,EAAEI,gBAAgB,CAAC,GAAG,IAAI,CAACF,YAAY,CAACC,KAAK,CAAC,GAAG,CAAC;IACpE,OAAOH,WAAW,GAAG,GAAG,GAAGI,gBAAgB,GAAG,KAAK;EACvD;EAEA;;;;;EAKA,IAAIN,QAAQA,CAAA;IACR,IAAI,CAACT,iBAAiB,CAACY,eAAe,CAAC,IAAI,CAACC,YAAY,CAAC,EACrD,MAAM,IAAIX,YAAY,CAClB,0DAA0D,CAC7D;IAEL,MAAM,CAACS,WAAW,EAAEM,YAAY,CAAC,GAAG,IAAI,CAACJ,YAAY,CAACC,KAAK,CAAC,GAAG,CAAC;IAChE,MAAMI,sBAAsB,GACxB,IAAI,CAACb,aAAa,CAACc,eAAe,CAACR,WAAW,CAAC;IACnD,MAAMF,QAAQ,GACVS,sBAAsB,CAACE,QAAQ,CAACC,4BAA4B,CACxDJ,YAAY,CACf;IACL,IAAI,CAACR,QAAQ,EACT,MAAM,IAAIP,YAAY,CAClB,+BAA+Be,YAAY,2BAA2B,CACzE;IACL,OAAOR,QAAQ;EACnB;EAEA;;;;EAIA,IAAIW,QAAQA,CAAA;IACR,IAAI,CAACpB,iBAAiB,CAACY,eAAe,CAAC,IAAI,CAACC,YAAY,CAAC,EACrD,MAAM,IAAIX,YAAY,CAClB,0DAA0D,CAC7D;IAEL,MAAMS,WAAW,GAAG,IAAI,CAACE,YAAY,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACnD,MAAMQ,SAAS,GAAG,IAAI,CAACjB,aAAa,CAACc,eAAe,CAACR,WAAW,CAAC;IACjE,OAAOW,SAAS,CAACF,QAAQ;EAC7B;EAEA,IAAIG,yBAAyBA,CAAA;IACzB,OAAO,IAAI,CAACC,aAAc,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC5C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}