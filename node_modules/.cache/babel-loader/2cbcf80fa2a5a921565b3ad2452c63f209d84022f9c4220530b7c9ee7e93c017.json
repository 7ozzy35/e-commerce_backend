{"ast":null,"code":"/**\n * Provides utilities for manipulating tree structures.\n *\n */\nexport class TreeRepositoryUtils {\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  static createRelationMaps(manager, metadata, alias, rawResults) {\n    return rawResults.map(rawResult => {\n      const joinColumn = metadata.treeParentRelation.joinColumns[0];\n      const referencedColumn = joinColumn.referencedColumn ?? metadata.primaryColumns[0];\n      // fixes issue #2518, default to databaseName property when givenDatabaseName is not set\n      const joinColumnName = joinColumn.givenDatabaseName || joinColumn.databaseName;\n      const referencedColumnName = referencedColumn.givenDatabaseName || referencedColumn.databaseName;\n      const id = rawResult[alias + \"_\" + referencedColumnName];\n      const parentId = rawResult[alias + \"_\" + joinColumnName];\n      return {\n        id: manager.connection.driver.prepareHydratedValue(id, referencedColumn),\n        parentId: manager.connection.driver.prepareHydratedValue(parentId, joinColumn)\n      };\n    });\n  }\n  static buildChildrenEntityTree(metadata, entity, entities, relationMaps, options) {\n    const childProperty = metadata.treeChildrenRelation.propertyName;\n    if (options.depth === 0) {\n      entity[childProperty] = [];\n      return;\n    }\n    const joinColumn = metadata.treeParentRelation.joinColumns[0];\n    const referencedColumn = joinColumn.referencedColumn ?? metadata.primaryColumns[0];\n    const parentEntityId = referencedColumn.getEntityValue(entity);\n    const childRelationMaps = relationMaps.filter(relationMap => relationMap.parentId === parentEntityId);\n    const childIds = new Set(childRelationMaps.map(relationMap => relationMap.id));\n    entity[childProperty] = entities.filter(entity => childIds.has(referencedColumn.getEntityValue(entity)));\n    entity[childProperty].forEach(childEntity => {\n      TreeRepositoryUtils.buildChildrenEntityTree(metadata, childEntity, entities, relationMaps, {\n        ...options,\n        depth: options.depth - 1\n      });\n    });\n  }\n  static buildParentEntityTree(metadata, entity, entities, relationMaps) {\n    const parentProperty = metadata.treeParentRelation.propertyName;\n    const joinColumn = metadata.treeParentRelation.joinColumns[0];\n    const referencedColumn = joinColumn.referencedColumn ?? metadata.primaryColumns[0];\n    const entityId = referencedColumn.getEntityValue(entity);\n    const parentRelationMap = relationMaps.find(relationMap => relationMap.id === entityId);\n    const parentEntity = entities.find(entity => {\n      if (!parentRelationMap) return false;\n      return referencedColumn.getEntityValue(entity) === parentRelationMap.parentId;\n    });\n    if (parentEntity) {\n      entity[parentProperty] = parentEntity;\n      TreeRepositoryUtils.buildParentEntityTree(metadata, entity[parentProperty], entities, relationMaps);\n    }\n  }\n}","map":{"version":3,"names":["TreeRepositoryUtils","createRelationMaps","manager","metadata","alias","rawResults","map","rawResult","joinColumn","treeParentRelation","joinColumns","referencedColumn","primaryColumns","joinColumnName","givenDatabaseName","databaseName","referencedColumnName","id","parentId","connection","driver","prepareHydratedValue","buildChildrenEntityTree","entity","entities","relationMaps","options","childProperty","treeChildrenRelation","propertyName","depth","parentEntityId","getEntityValue","childRelationMaps","filter","relationMap","childIds","Set","has","forEach","childEntity","buildParentEntityTree","parentProperty","entityId","parentRelationMap","find","parentEntity"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\util\\TreeRepositoryUtils.ts"],"sourcesContent":["import { EntityManager } from \"../entity-manager/EntityManager\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { FindTreesOptions } from \"../repository/FindTreesOptions\"\n\n/**\n * Provides utilities for manipulating tree structures.\n *\n */\nexport class TreeRepositoryUtils {\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    static createRelationMaps(\n        manager: EntityManager,\n        metadata: EntityMetadata,\n        alias: string,\n        rawResults: any[],\n    ): { id: any; parentId: any }[] {\n        return rawResults.map((rawResult) => {\n            const joinColumn = metadata.treeParentRelation!.joinColumns[0]\n            const referencedColumn =\n                joinColumn.referencedColumn ?? metadata.primaryColumns[0]\n            // fixes issue #2518, default to databaseName property when givenDatabaseName is not set\n            const joinColumnName =\n                joinColumn.givenDatabaseName || joinColumn.databaseName\n            const referencedColumnName =\n                referencedColumn.givenDatabaseName ||\n                referencedColumn.databaseName\n            const id = rawResult[alias + \"_\" + referencedColumnName]\n            const parentId = rawResult[alias + \"_\" + joinColumnName]\n            return {\n                id: manager.connection.driver.prepareHydratedValue(\n                    id,\n                    referencedColumn,\n                ),\n                parentId: manager.connection.driver.prepareHydratedValue(\n                    parentId,\n                    joinColumn,\n                ),\n            }\n        })\n    }\n\n    static buildChildrenEntityTree(\n        metadata: EntityMetadata,\n        entity: any,\n        entities: any[],\n        relationMaps: { id: any; parentId: any }[],\n        options: FindTreesOptions & { depth: number },\n    ): void {\n        const childProperty = metadata.treeChildrenRelation!.propertyName\n        if (options.depth === 0) {\n            entity[childProperty] = []\n            return\n        }\n        const joinColumn = metadata.treeParentRelation!.joinColumns[0]\n        const referencedColumn =\n            joinColumn.referencedColumn ?? metadata.primaryColumns[0]\n        const parentEntityId = referencedColumn.getEntityValue(entity)\n        const childRelationMaps = relationMaps.filter(\n            (relationMap) => relationMap.parentId === parentEntityId,\n        )\n        const childIds = new Set(\n            childRelationMaps.map((relationMap) => relationMap.id),\n        )\n        entity[childProperty] = entities.filter((entity) =>\n            childIds.has(referencedColumn.getEntityValue(entity)),\n        )\n        entity[childProperty].forEach((childEntity: any) => {\n            TreeRepositoryUtils.buildChildrenEntityTree(\n                metadata,\n                childEntity,\n                entities,\n                relationMaps,\n                {\n                    ...options,\n                    depth: options.depth - 1,\n                },\n            )\n        })\n    }\n\n    static buildParentEntityTree(\n        metadata: EntityMetadata,\n        entity: any,\n        entities: any[],\n        relationMaps: { id: any; parentId: any }[],\n    ): void {\n        const parentProperty = metadata.treeParentRelation!.propertyName\n        const joinColumn = metadata.treeParentRelation!.joinColumns[0]\n        const referencedColumn =\n            joinColumn.referencedColumn ?? metadata.primaryColumns[0]\n        const entityId = referencedColumn.getEntityValue(entity)\n        const parentRelationMap = relationMaps.find(\n            (relationMap) => relationMap.id === entityId,\n        )\n        const parentEntity = entities.find((entity) => {\n            if (!parentRelationMap) return false\n\n            return (\n                referencedColumn.getEntityValue(entity) ===\n                parentRelationMap.parentId\n            )\n        })\n        if (parentEntity) {\n            entity[parentProperty] = parentEntity\n            TreeRepositoryUtils.buildParentEntityTree(\n                metadata,\n                entity[parentProperty],\n                entities,\n                relationMaps,\n            )\n        }\n    }\n}\n"],"mappings":"AAIA;;;;AAIA,OAAM,MAAOA,mBAAmB;EAC5B;EACA;EACA;EAEA,OAAOC,kBAAkBA,CACrBC,OAAsB,EACtBC,QAAwB,EACxBC,KAAa,EACbC,UAAiB;IAEjB,OAAOA,UAAU,CAACC,GAAG,CAAEC,SAAS,IAAI;MAChC,MAAMC,UAAU,GAAGL,QAAQ,CAACM,kBAAmB,CAACC,WAAW,CAAC,CAAC,CAAC;MAC9D,MAAMC,gBAAgB,GAClBH,UAAU,CAACG,gBAAgB,IAAIR,QAAQ,CAACS,cAAc,CAAC,CAAC,CAAC;MAC7D;MACA,MAAMC,cAAc,GAChBL,UAAU,CAACM,iBAAiB,IAAIN,UAAU,CAACO,YAAY;MAC3D,MAAMC,oBAAoB,GACtBL,gBAAgB,CAACG,iBAAiB,IAClCH,gBAAgB,CAACI,YAAY;MACjC,MAAME,EAAE,GAAGV,SAAS,CAACH,KAAK,GAAG,GAAG,GAAGY,oBAAoB,CAAC;MACxD,MAAME,QAAQ,GAAGX,SAAS,CAACH,KAAK,GAAG,GAAG,GAAGS,cAAc,CAAC;MACxD,OAAO;QACHI,EAAE,EAAEf,OAAO,CAACiB,UAAU,CAACC,MAAM,CAACC,oBAAoB,CAC9CJ,EAAE,EACFN,gBAAgB,CACnB;QACDO,QAAQ,EAAEhB,OAAO,CAACiB,UAAU,CAACC,MAAM,CAACC,oBAAoB,CACpDH,QAAQ,EACRV,UAAU;OAEjB;IACL,CAAC,CAAC;EACN;EAEA,OAAOc,uBAAuBA,CAC1BnB,QAAwB,EACxBoB,MAAW,EACXC,QAAe,EACfC,YAA0C,EAC1CC,OAA6C;IAE7C,MAAMC,aAAa,GAAGxB,QAAQ,CAACyB,oBAAqB,CAACC,YAAY;IACjE,IAAIH,OAAO,CAACI,KAAK,KAAK,CAAC,EAAE;MACrBP,MAAM,CAACI,aAAa,CAAC,GAAG,EAAE;MAC1B;IACJ;IACA,MAAMnB,UAAU,GAAGL,QAAQ,CAACM,kBAAmB,CAACC,WAAW,CAAC,CAAC,CAAC;IAC9D,MAAMC,gBAAgB,GAClBH,UAAU,CAACG,gBAAgB,IAAIR,QAAQ,CAACS,cAAc,CAAC,CAAC,CAAC;IAC7D,MAAMmB,cAAc,GAAGpB,gBAAgB,CAACqB,cAAc,CAACT,MAAM,CAAC;IAC9D,MAAMU,iBAAiB,GAAGR,YAAY,CAACS,MAAM,CACxCC,WAAW,IAAKA,WAAW,CAACjB,QAAQ,KAAKa,cAAc,CAC3D;IACD,MAAMK,QAAQ,GAAG,IAAIC,GAAG,CACpBJ,iBAAiB,CAAC3B,GAAG,CAAE6B,WAAW,IAAKA,WAAW,CAAClB,EAAE,CAAC,CACzD;IACDM,MAAM,CAACI,aAAa,CAAC,GAAGH,QAAQ,CAACU,MAAM,CAAEX,MAAM,IAC3Ca,QAAQ,CAACE,GAAG,CAAC3B,gBAAgB,CAACqB,cAAc,CAACT,MAAM,CAAC,CAAC,CACxD;IACDA,MAAM,CAACI,aAAa,CAAC,CAACY,OAAO,CAAEC,WAAgB,IAAI;MAC/CxC,mBAAmB,CAACsB,uBAAuB,CACvCnB,QAAQ,EACRqC,WAAW,EACXhB,QAAQ,EACRC,YAAY,EACZ;QACI,GAAGC,OAAO;QACVI,KAAK,EAAEJ,OAAO,CAACI,KAAK,GAAG;OAC1B,CACJ;IACL,CAAC,CAAC;EACN;EAEA,OAAOW,qBAAqBA,CACxBtC,QAAwB,EACxBoB,MAAW,EACXC,QAAe,EACfC,YAA0C;IAE1C,MAAMiB,cAAc,GAAGvC,QAAQ,CAACM,kBAAmB,CAACoB,YAAY;IAChE,MAAMrB,UAAU,GAAGL,QAAQ,CAACM,kBAAmB,CAACC,WAAW,CAAC,CAAC,CAAC;IAC9D,MAAMC,gBAAgB,GAClBH,UAAU,CAACG,gBAAgB,IAAIR,QAAQ,CAACS,cAAc,CAAC,CAAC,CAAC;IAC7D,MAAM+B,QAAQ,GAAGhC,gBAAgB,CAACqB,cAAc,CAACT,MAAM,CAAC;IACxD,MAAMqB,iBAAiB,GAAGnB,YAAY,CAACoB,IAAI,CACtCV,WAAW,IAAKA,WAAW,CAAClB,EAAE,KAAK0B,QAAQ,CAC/C;IACD,MAAMG,YAAY,GAAGtB,QAAQ,CAACqB,IAAI,CAAEtB,MAAM,IAAI;MAC1C,IAAI,CAACqB,iBAAiB,EAAE,OAAO,KAAK;MAEpC,OACIjC,gBAAgB,CAACqB,cAAc,CAACT,MAAM,CAAC,KACvCqB,iBAAiB,CAAC1B,QAAQ;IAElC,CAAC,CAAC;IACF,IAAI4B,YAAY,EAAE;MACdvB,MAAM,CAACmB,cAAc,CAAC,GAAGI,YAAY;MACrC9C,mBAAmB,CAACyC,qBAAqB,CACrCtC,QAAQ,EACRoB,MAAM,CAACmB,cAAc,CAAC,EACtBlB,QAAQ,EACRC,YAAY,CACf;IACL;EACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}