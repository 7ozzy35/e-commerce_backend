{"ast":null,"code":"import { PlatformTools } from \"../platform/PlatformTools\";\nexport class AbstractLogger {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(options) {\n    this.options = options;\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Logs query and parameters used in it.\n   */\n  logQuery(query, parameters, queryRunner) {\n    if (!this.isLogEnabledFor(\"query\")) {\n      return;\n    }\n    this.writeLog(\"query\", {\n      type: \"query\",\n      prefix: \"query\",\n      message: query,\n      format: \"sql\",\n      parameters\n    }, queryRunner);\n  }\n  /**\n   * Logs query that is failed.\n   */\n  logQueryError(error, query, parameters, queryRunner) {\n    if (!this.isLogEnabledFor(\"query-error\")) {\n      return;\n    }\n    this.writeLog(\"warn\", [{\n      type: \"query-error\",\n      prefix: \"query failed\",\n      message: query,\n      format: \"sql\",\n      parameters\n    }, {\n      type: \"query-error\",\n      prefix: \"error\",\n      message: error\n    }], queryRunner);\n  }\n  /**\n   * Logs query that is slow.\n   */\n  logQuerySlow(time, query, parameters, queryRunner) {\n    if (!this.isLogEnabledFor(\"query-slow\")) {\n      return;\n    }\n    this.writeLog(\"warn\", [{\n      type: \"query-slow\",\n      prefix: \"query is slow\",\n      message: query,\n      format: \"sql\",\n      parameters,\n      additionalInfo: {\n        time\n      }\n    }, {\n      type: \"query-slow\",\n      prefix: \"execution time\",\n      message: time\n    }], queryRunner);\n  }\n  /**\n   * Logs events from the schema build process.\n   */\n  logSchemaBuild(message, queryRunner) {\n    if (!this.isLogEnabledFor(\"schema-build\")) {\n      return;\n    }\n    this.writeLog(\"schema\", {\n      type: \"schema-build\",\n      message\n    }, queryRunner);\n  }\n  /**\n   * Logs events from the migration run process.\n   */\n  logMigration(message, queryRunner) {\n    if (!this.isLogEnabledFor(\"migration\")) {\n      return;\n    }\n    this.writeLog(\"log\", {\n      type: \"migration\",\n      message\n    }, queryRunner);\n  }\n  /**\n   * Perform logging using given logger, or by default to the console.\n   * Log has its own level and message.\n   */\n  log(level, message, queryRunner) {\n    switch (level) {\n      case \"log\":\n        if (!this.isLogEnabledFor(\"log\")) {\n          return;\n        }\n        this.writeLog(\"log\", {\n          type: \"log\",\n          message\n        }, queryRunner);\n        break;\n      case \"info\":\n        if (!this.isLogEnabledFor(\"info\")) {\n          return;\n        }\n        this.writeLog(\"info\", {\n          type: \"info\",\n          prefix: \"info\",\n          message\n        }, queryRunner);\n        break;\n      case \"warn\":\n        if (!this.isLogEnabledFor(\"warn\")) {\n          return;\n        }\n        this.writeLog(\"warn\", {\n          type: \"warn\",\n          message\n        }, queryRunner);\n        break;\n    }\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Check is logging for level or message type is enabled.\n   */\n  isLogEnabledFor(type) {\n    switch (type) {\n      case \"query\":\n        return this.options === \"all\" || this.options === true || Array.isArray(this.options) && this.options.indexOf(\"query\") !== -1;\n      case \"error\":\n      case \"query-error\":\n        return this.options === \"all\" || this.options === true || Array.isArray(this.options) && this.options.indexOf(\"error\") !== -1;\n      case \"query-slow\":\n        return true;\n      case \"schema\":\n      case \"schema-build\":\n        return this.options === \"all\" || Array.isArray(this.options) && this.options.indexOf(\"schema\") !== -1;\n      case \"migration\":\n        return true;\n      case \"log\":\n        return this.options === \"all\" || Array.isArray(this.options) && this.options.indexOf(\"log\") !== -1;\n      case \"info\":\n        return this.options === \"all\" || Array.isArray(this.options) && this.options.indexOf(\"info\") !== -1;\n      case \"warn\":\n        return this.options === \"all\" || Array.isArray(this.options) && this.options.indexOf(\"warn\") !== -1;\n      default:\n        return false;\n    }\n  }\n  /**\n   * Prepare and format log messages\n   */\n  prepareLogMessages(logMessage, options) {\n    options = {\n      ...{\n        addColonToPrefix: true,\n        appendParameterAsComment: true,\n        highlightSql: true\n      },\n      ...options\n    };\n    const messages = Array.isArray(logMessage) ? logMessage : [logMessage];\n    for (let message of messages) {\n      if (typeof message !== \"object\") {\n        message = {\n          message\n        };\n      }\n      if (message.format === \"sql\") {\n        let sql = String(message.message);\n        if (options.appendParameterAsComment && message.parameters && message.parameters.length) {\n          sql += ` -- PARAMETERS: ${this.stringifyParams(message.parameters)}`;\n        }\n        if (options.highlightSql) {\n          sql = PlatformTools.highlightSql(sql);\n        }\n        message.message = sql;\n      }\n      if (options.addColonToPrefix && message.prefix) {\n        message.prefix += \":\";\n      }\n    }\n    return messages;\n  }\n  /**\n   * Converts parameters to a string.\n   * Sometimes parameters can have circular objects and therefor we are handle this case too.\n   */\n  stringifyParams(parameters) {\n    try {\n      return JSON.stringify(parameters);\n    } catch (error) {\n      // most probably circular objects in parameters\n      return parameters;\n    }\n  }\n}","map":{"version":3,"names":["PlatformTools","AbstractLogger","constructor","options","logQuery","query","parameters","queryRunner","isLogEnabledFor","writeLog","type","prefix","message","format","logQueryError","error","logQuerySlow","time","additionalInfo","logSchemaBuild","logMigration","log","level","Array","isArray","indexOf","prepareLogMessages","logMessage","addColonToPrefix","appendParameterAsComment","highlightSql","messages","sql","String","length","stringifyParams","JSON","stringify"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\logger\\AbstractLogger.ts"],"sourcesContent":["import {\n    Logger,\n    LogLevel,\n    LogMessage,\n    LogMessageType,\n    PrepareLogMessagesOptions,\n} from \"./Logger\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { LoggerOptions } from \"./LoggerOptions\"\nimport { PlatformTools } from \"../platform/PlatformTools\"\n\nexport abstract class AbstractLogger implements Logger {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected options?: LoggerOptions) {}\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Logs query and parameters used in it.\n     */\n    logQuery(query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        if (!this.isLogEnabledFor(\"query\")) {\n            return\n        }\n\n        this.writeLog(\n            \"query\",\n            {\n                type: \"query\",\n                prefix: \"query\",\n                message: query,\n                format: \"sql\",\n                parameters,\n            },\n            queryRunner,\n        )\n    }\n\n    /**\n     * Logs query that is failed.\n     */\n    logQueryError(\n        error: string,\n        query: string,\n        parameters?: any[],\n        queryRunner?: QueryRunner,\n    ) {\n        if (!this.isLogEnabledFor(\"query-error\")) {\n            return\n        }\n\n        this.writeLog(\n            \"warn\",\n            [\n                {\n                    type: \"query-error\",\n                    prefix: \"query failed\",\n                    message: query,\n                    format: \"sql\",\n                    parameters,\n                },\n                {\n                    type: \"query-error\",\n                    prefix: \"error\",\n                    message: error,\n                },\n            ],\n            queryRunner,\n        )\n    }\n\n    /**\n     * Logs query that is slow.\n     */\n    logQuerySlow(\n        time: number,\n        query: string,\n        parameters?: any[],\n        queryRunner?: QueryRunner,\n    ) {\n        if (!this.isLogEnabledFor(\"query-slow\")) {\n            return\n        }\n\n        this.writeLog(\n            \"warn\",\n            [\n                {\n                    type: \"query-slow\",\n                    prefix: \"query is slow\",\n                    message: query,\n                    format: \"sql\",\n                    parameters,\n                    additionalInfo: {\n                        time,\n                    },\n                },\n                {\n                    type: \"query-slow\",\n                    prefix: \"execution time\",\n                    message: time,\n                },\n            ],\n            queryRunner,\n        )\n    }\n\n    /**\n     * Logs events from the schema build process.\n     */\n    logSchemaBuild(message: string, queryRunner?: QueryRunner) {\n        if (!this.isLogEnabledFor(\"schema-build\")) {\n            return\n        }\n\n        this.writeLog(\n            \"schema\",\n            {\n                type: \"schema-build\",\n                message,\n            },\n            queryRunner,\n        )\n    }\n\n    /**\n     * Logs events from the migration run process.\n     */\n    logMigration(message: string, queryRunner?: QueryRunner) {\n        if (!this.isLogEnabledFor(\"migration\")) {\n            return\n        }\n\n        this.writeLog(\n            \"log\",\n            {\n                type: \"migration\",\n                message,\n            },\n            queryRunner,\n        )\n    }\n\n    /**\n     * Perform logging using given logger, or by default to the console.\n     * Log has its own level and message.\n     */\n    log(\n        level: \"log\" | \"info\" | \"warn\",\n        message: any,\n        queryRunner?: QueryRunner,\n    ) {\n        switch (level) {\n            case \"log\":\n                if (!this.isLogEnabledFor(\"log\")) {\n                    return\n                }\n\n                this.writeLog(\n                    \"log\",\n                    {\n                        type: \"log\",\n                        message,\n                    },\n                    queryRunner,\n                )\n                break\n\n            case \"info\":\n                if (!this.isLogEnabledFor(\"info\")) {\n                    return\n                }\n\n                this.writeLog(\n                    \"info\",\n                    {\n                        type: \"info\",\n                        prefix: \"info\",\n                        message,\n                    },\n                    queryRunner,\n                )\n                break\n\n            case \"warn\":\n                if (!this.isLogEnabledFor(\"warn\")) {\n                    return\n                }\n\n                this.writeLog(\n                    \"warn\",\n                    {\n                        type: \"warn\",\n                        message,\n                    },\n                    queryRunner,\n                )\n                break\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Check is logging for level or message type is enabled.\n     */\n    protected isLogEnabledFor(type?: LogLevel | LogMessageType) {\n        switch (type) {\n            case \"query\":\n                return (\n                    this.options === \"all\" ||\n                    this.options === true ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"query\") !== -1)\n                )\n\n            case \"error\":\n            case \"query-error\":\n                return (\n                    this.options === \"all\" ||\n                    this.options === true ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"error\") !== -1)\n                )\n\n            case \"query-slow\":\n                return true\n\n            case \"schema\":\n            case \"schema-build\":\n                return (\n                    this.options === \"all\" ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"schema\") !== -1)\n                )\n\n            case \"migration\":\n                return true\n\n            case \"log\":\n                return (\n                    this.options === \"all\" ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"log\") !== -1)\n                )\n\n            case \"info\":\n                return (\n                    this.options === \"all\" ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"info\") !== -1)\n                )\n\n            case \"warn\":\n                return (\n                    this.options === \"all\" ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"warn\") !== -1)\n                )\n\n            default:\n                return false\n        }\n    }\n\n    /**\n     * Write log to specific output.\n     */\n    protected abstract writeLog(\n        level: LogLevel,\n        message:\n            | LogMessage\n            | string\n            | number\n            | (LogMessage | string | number)[],\n        queryRunner?: QueryRunner,\n    ): void\n\n    /**\n     * Prepare and format log messages\n     */\n    protected prepareLogMessages(\n        logMessage:\n            | LogMessage\n            | string\n            | number\n            | (LogMessage | string | number)[],\n        options?: Partial<PrepareLogMessagesOptions>,\n    ): LogMessage[] {\n        options = {\n            ...{\n                addColonToPrefix: true,\n                appendParameterAsComment: true,\n                highlightSql: true,\n            },\n            ...options,\n        }\n        const messages = Array.isArray(logMessage) ? logMessage : [logMessage]\n\n        for (let message of messages) {\n            if (typeof message !== \"object\") {\n                message = {\n                    message,\n                }\n            }\n\n            if (message.format === \"sql\") {\n                let sql = String(message.message)\n\n                if (\n                    options.appendParameterAsComment &&\n                    message.parameters &&\n                    message.parameters.length\n                ) {\n                    sql += ` -- PARAMETERS: ${this.stringifyParams(\n                        message.parameters,\n                    )}`\n                }\n\n                if (options.highlightSql) {\n                    sql = PlatformTools.highlightSql(sql)\n                }\n\n                message.message = sql\n            }\n\n            if (options.addColonToPrefix && message.prefix) {\n                message.prefix += \":\"\n            }\n        }\n\n        return messages as LogMessage[]\n    }\n\n    /**\n     * Converts parameters to a string.\n     * Sometimes parameters can have circular objects and therefor we are handle this case too.\n     */\n    protected stringifyParams(parameters: any[]) {\n        try {\n            return JSON.stringify(parameters)\n        } catch (error) {\n            // most probably circular objects in parameters\n            return parameters\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}