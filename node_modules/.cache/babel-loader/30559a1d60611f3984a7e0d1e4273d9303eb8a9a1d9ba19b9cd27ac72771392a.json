{"ast":null,"code":"import { getMetadataArgsStorage } from \"../../globals\";\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(options) {\n  return function (object, propertyName) {\n    options = options || {};\n    getMetadataArgsStorage().joinTables.push({\n      target: object.constructor,\n      propertyName: propertyName,\n      name: options.name,\n      joinColumns: options && options.joinColumn ? [options.joinColumn] : options.joinColumns,\n      inverseJoinColumns: options && options.inverseJoinColumn ? [options.inverseJoinColumn] : options.inverseJoinColumns,\n      schema: options && options.schema ? options.schema : undefined,\n      database: options && options.database ? options.database : undefined,\n      synchronize: !(options && options.synchronize === false)\n    });\n  };\n}","map":{"version":3,"names":["getMetadataArgsStorage","JoinTable","options","object","propertyName","joinTables","push","target","constructor","name","joinColumns","joinColumn","inverseJoinColumns","inverseJoinColumn","schema","undefined","database","synchronize"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\decorator\\relations\\JoinTable.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { JoinTableMetadataArgs } from \"../../metadata-args/JoinTableMetadataArgs\"\nimport { JoinTableMultipleColumnsOptions } from \"../options/JoinTableMultipleColumnsOptions\"\nimport { JoinTableOptions } from \"../options/JoinTableOptions\"\n\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(): PropertyDecorator\n\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(options: JoinTableOptions): PropertyDecorator\n\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(\n    options: JoinTableMultipleColumnsOptions,\n): PropertyDecorator\n\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(\n    options?: JoinTableOptions | JoinTableMultipleColumnsOptions,\n): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        options =\n            options ||\n            ({} as JoinTableOptions | JoinTableMultipleColumnsOptions)\n        getMetadataArgsStorage().joinTables.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            name: options.name,\n            joinColumns: (options && (options as JoinTableOptions).joinColumn\n                ? [(options as JoinTableOptions).joinColumn!]\n                : (options as JoinTableMultipleColumnsOptions)\n                      .joinColumns) as any,\n            inverseJoinColumns: (options &&\n            (options as JoinTableOptions).inverseJoinColumn\n                ? [(options as JoinTableOptions).inverseJoinColumn!]\n                : (options as JoinTableMultipleColumnsOptions)\n                      .inverseJoinColumns) as any,\n            schema: options && options.schema ? options.schema : undefined,\n            database:\n                options && options.database ? options.database : undefined,\n            synchronize: !(options && options.synchronize === false),\n        } as JoinTableMetadataArgs)\n    }\n}\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,eAAe;AAyBtD;;;;AAIA,OAAM,SAAUC,SAASA,CACrBC,OAA4D;EAE5D,OAAO,UAAUC,MAAc,EAAEC,YAAoB;IACjDF,OAAO,GACHA,OAAO,IACN,EAAyD;IAC9DF,sBAAsB,EAAE,CAACK,UAAU,CAACC,IAAI,CAAC;MACrCC,MAAM,EAAEJ,MAAM,CAACK,WAAW;MAC1BJ,YAAY,EAAEA,YAAY;MAC1BK,IAAI,EAAEP,OAAO,CAACO,IAAI;MAClBC,WAAW,EAAGR,OAAO,IAAKA,OAA4B,CAACS,UAAU,GAC3D,CAAET,OAA4B,CAACS,UAAW,CAAC,GAC1CT,OAA2C,CACvCQ,WAAmB;MAC9BE,kBAAkB,EAAGV,OAAO,IAC3BA,OAA4B,CAACW,iBAAiB,GACzC,CAAEX,OAA4B,CAACW,iBAAkB,CAAC,GACjDX,OAA2C,CACvCU,kBAA0B;MACrCE,MAAM,EAAEZ,OAAO,IAAIA,OAAO,CAACY,MAAM,GAAGZ,OAAO,CAACY,MAAM,GAAGC,SAAS;MAC9DC,QAAQ,EACJd,OAAO,IAAIA,OAAO,CAACc,QAAQ,GAAGd,OAAO,CAACc,QAAQ,GAAGD,SAAS;MAC9DE,WAAW,EAAE,EAAEf,OAAO,IAAIA,OAAO,CAACe,WAAW,KAAK,KAAK;KACjC,CAAC;EAC/B,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}