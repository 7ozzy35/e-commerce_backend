{"ast":null,"code":"import { EntityMetadata } from \"../metadata/EntityMetadata\";\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\";\nimport { IndexMetadata } from \"../metadata/IndexMetadata\";\nimport { RelationMetadata } from \"../metadata/RelationMetadata\";\nimport { EmbeddedMetadata } from \"../metadata/EmbeddedMetadata\";\nimport { RelationIdMetadata } from \"../metadata/RelationIdMetadata\";\nimport { RelationCountMetadata } from \"../metadata/RelationCountMetadata\";\nimport { EventListenerTypes } from \"../metadata/types/EventListenerTypes\";\nimport { MetadataUtils } from \"./MetadataUtils\";\nimport { JunctionEntityMetadataBuilder } from \"./JunctionEntityMetadataBuilder\";\nimport { ClosureJunctionEntityMetadataBuilder } from \"./ClosureJunctionEntityMetadataBuilder\";\nimport { RelationJoinColumnBuilder } from \"./RelationJoinColumnBuilder\";\nimport { EntityListenerMetadata } from \"../metadata/EntityListenerMetadata\";\nimport { UniqueMetadata } from \"../metadata/UniqueMetadata\";\nimport { CheckMetadata } from \"../metadata/CheckMetadata\";\nimport { ExclusionMetadata } from \"../metadata/ExclusionMetadata\";\nimport { TypeORMError } from \"../error\";\nimport { DriverUtils } from \"../driver/DriverUtils\";\n/**\n * Builds EntityMetadata objects and all its sub-metadatas.\n */\nexport class EntityMetadataBuilder {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connection, metadataArgsStorage) {\n    this.connection = connection;\n    this.metadataArgsStorage = metadataArgsStorage;\n    this.junctionEntityMetadataBuilder = new JunctionEntityMetadataBuilder(connection);\n    this.closureJunctionEntityMetadataBuilder = new ClosureJunctionEntityMetadataBuilder(connection);\n    this.relationJoinColumnBuilder = new RelationJoinColumnBuilder(connection);\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Builds a complete entity metadatas for the given entity classes.\n   */\n  build(entityClasses) {\n    // if entity classes to filter entities by are given then do filtering, otherwise use all\n    const allTables = entityClasses ? this.metadataArgsStorage.filterTables(entityClasses) : this.metadataArgsStorage.tables;\n    // filter out table metadata args for those we really create entity metadatas and tables in the db\n    const realTables = allTables.filter(table => table.type === \"regular\" || table.type === \"closure\" || table.type === \"entity-child\" || table.type === \"view\");\n    // create entity metadatas for a user defined entities (marked with @Entity decorator or loaded from entity schemas)\n    const entityMetadatas = realTables.map(tableArgs => this.createEntityMetadata(tableArgs));\n    // compute parent entity metadatas for table inheritance\n    entityMetadatas.forEach(entityMetadata => this.computeParentEntityMetadata(entityMetadatas, entityMetadata));\n    // after all metadatas created we set child entity metadatas for table inheritance\n    entityMetadatas.forEach(metadata => {\n      metadata.childEntityMetadatas = entityMetadatas.filter(childMetadata => {\n        return typeof metadata.target === \"function\" && typeof childMetadata.target === \"function\" && MetadataUtils.isInherited(childMetadata.target, metadata.target);\n      });\n    });\n    // build entity metadata (step0), first for non-single-table-inherited entity metadatas (dependant)\n    entityMetadatas.filter(entityMetadata => entityMetadata.tableType !== \"entity-child\").forEach(entityMetadata => entityMetadata.build());\n    // build entity metadata (step0), now for single-table-inherited entity metadatas (dependant)\n    entityMetadatas.filter(entityMetadata => entityMetadata.tableType === \"entity-child\").forEach(entityMetadata => entityMetadata.build());\n    // compute entity metadata columns, relations, etc. first for the regular, non-single-table-inherited entity metadatas\n    entityMetadatas.filter(entityMetadata => entityMetadata.tableType !== \"entity-child\").forEach(entityMetadata => this.computeEntityMetadataStep1(entityMetadatas, entityMetadata));\n    // then do it for single table inheritance children (since they are depend on their parents to be built)\n    entityMetadatas.filter(entityMetadata => entityMetadata.tableType === \"entity-child\").forEach(entityMetadata => this.computeEntityMetadataStep1(entityMetadatas, entityMetadata));\n    // calculate entity metadata computed properties and all its sub-metadatas\n    entityMetadatas.forEach(entityMetadata => this.computeEntityMetadataStep2(entityMetadata));\n    // calculate entity metadata's inverse properties\n    entityMetadatas.forEach(entityMetadata => this.computeInverseProperties(entityMetadata, entityMetadatas));\n    // go through all entity metadatas and create foreign keys / junction entity metadatas for their relations\n    entityMetadatas.filter(entityMetadata => entityMetadata.tableType !== \"entity-child\").forEach(entityMetadata => {\n      // create entity's relations join columns (for many-to-one and one-to-one owner)\n      entityMetadata.relations.filter(relation => relation.isOneToOne || relation.isManyToOne).forEach(relation => {\n        const joinColumns = this.metadataArgsStorage.filterJoinColumns(relation.target, relation.propertyName);\n        const {\n          foreignKey,\n          columns,\n          uniqueConstraint\n        } = this.relationJoinColumnBuilder.build(joinColumns, relation); // create a foreign key based on its metadata args\n        if (foreignKey) {\n          relation.registerForeignKeys(foreignKey); // push it to the relation and thus register there a join column\n          entityMetadata.foreignKeys.push(foreignKey);\n        }\n        if (columns) {\n          relation.registerJoinColumns(columns);\n        }\n        if (uniqueConstraint) {\n          if (DriverUtils.isMySQLFamily(this.connection.driver) || this.connection.driver.options.type === \"aurora-mysql\" || this.connection.driver.options.type === \"mssql\" || this.connection.driver.options.type === \"sap\" || this.connection.driver.options.type === \"spanner\") {\n            const index = new IndexMetadata({\n              entityMetadata: uniqueConstraint.entityMetadata,\n              columns: uniqueConstraint.columns,\n              args: {\n                target: uniqueConstraint.target,\n                name: uniqueConstraint.name,\n                unique: true,\n                synchronize: true\n              }\n            });\n            if (this.connection.driver.options.type === \"mssql\") {\n              index.where = index.columns.map(column => {\n                return `${this.connection.driver.escape(column.databaseName)} IS NOT NULL`;\n              }).join(\" AND \");\n            }\n            if (this.connection.driver.options.type === \"spanner\") {\n              index.isNullFiltered = true;\n            }\n            if (relation.embeddedMetadata) {\n              relation.embeddedMetadata.indices.push(index);\n            } else {\n              relation.entityMetadata.ownIndices.push(index);\n            }\n            this.computeEntityMetadataStep2(entityMetadata);\n          } else {\n            if (relation.embeddedMetadata) {\n              relation.embeddedMetadata.uniques.push(uniqueConstraint);\n            } else {\n              relation.entityMetadata.ownUniques.push(uniqueConstraint);\n            }\n            this.computeEntityMetadataStep2(entityMetadata);\n          }\n        }\n        if (foreignKey && this.connection.driver.options.type === \"cockroachdb\") {\n          const index = new IndexMetadata({\n            entityMetadata: relation.entityMetadata,\n            columns: foreignKey.columns,\n            args: {\n              target: relation.entityMetadata.target,\n              synchronize: true\n            }\n          });\n          if (relation.embeddedMetadata) {\n            relation.embeddedMetadata.indices.push(index);\n          } else {\n            relation.entityMetadata.ownIndices.push(index);\n          }\n          this.computeEntityMetadataStep2(entityMetadata);\n        }\n      });\n      // create junction entity metadatas for entity many-to-many relations\n      entityMetadata.relations.filter(relation => relation.isManyToMany).forEach(relation => {\n        const joinTable = this.metadataArgsStorage.findJoinTable(relation.target, relation.propertyName);\n        if (!joinTable) return; // no join table set - no need to do anything (it means this is many-to-many inverse side)\n        // here we create a junction entity metadata for a new junction table of many-to-many relation\n        const junctionEntityMetadata = this.junctionEntityMetadataBuilder.build(relation, joinTable);\n        relation.registerForeignKeys(...junctionEntityMetadata.foreignKeys);\n        relation.registerJoinColumns(junctionEntityMetadata.ownIndices[0].columns, junctionEntityMetadata.ownIndices[1].columns);\n        relation.registerJunctionEntityMetadata(junctionEntityMetadata);\n        // compute new entity metadata properties and push it to entity metadatas pool\n        this.computeEntityMetadataStep2(junctionEntityMetadata);\n        this.computeInverseProperties(junctionEntityMetadata, entityMetadatas);\n        entityMetadatas.push(junctionEntityMetadata);\n      });\n    });\n    // update entity metadata depend properties\n    entityMetadatas.forEach(entityMetadata => {\n      entityMetadata.relationsWithJoinColumns = entityMetadata.relations.filter(relation => relation.isWithJoinColumn);\n      entityMetadata.hasNonNullableRelations = entityMetadata.relationsWithJoinColumns.some(relation => !relation.isNullable || relation.isPrimary);\n    });\n    // generate closure junction tables for all closure tables\n    entityMetadatas.filter(metadata => metadata.treeType === \"closure-table\").forEach(entityMetadata => {\n      const closureJunctionEntityMetadata = this.closureJunctionEntityMetadataBuilder.build(entityMetadata);\n      entityMetadata.closureJunctionTable = closureJunctionEntityMetadata;\n      this.computeEntityMetadataStep2(closureJunctionEntityMetadata);\n      this.computeInverseProperties(closureJunctionEntityMetadata, entityMetadatas);\n      entityMetadatas.push(closureJunctionEntityMetadata);\n    });\n    // generate keys for tables with single-table inheritance\n    entityMetadatas.filter(metadata => metadata.inheritancePattern === \"STI\" && metadata.discriminatorColumn).forEach(entityMetadata => this.createKeysForTableInheritance(entityMetadata));\n    // build all indices (need to do it after relations and their join columns are built)\n    entityMetadatas.forEach(entityMetadata => {\n      entityMetadata.indices.forEach(index => index.build(this.connection.namingStrategy));\n    });\n    // build all unique constraints (need to do it after relations and their join columns are built)\n    entityMetadatas.forEach(entityMetadata => {\n      entityMetadata.uniques.forEach(unique => unique.build(this.connection.namingStrategy));\n    });\n    // build all check constraints\n    entityMetadatas.forEach(entityMetadata => {\n      entityMetadata.checks.forEach(check => check.build(this.connection.namingStrategy));\n    });\n    // build all exclusion constraints\n    entityMetadatas.forEach(entityMetadata => {\n      entityMetadata.exclusions.forEach(exclusion => exclusion.build(this.connection.namingStrategy));\n    });\n    // add lazy initializer for entity relations\n    entityMetadatas.filter(metadata => typeof metadata.target === \"function\").forEach(entityMetadata => {\n      entityMetadata.relations.filter(relation => relation.isLazy).forEach(relation => {\n        this.connection.relationLoader.enableLazyLoad(relation, entityMetadata.target.prototype);\n      });\n    });\n    entityMetadatas.forEach(entityMetadata => {\n      entityMetadata.columns.forEach(column => {\n        // const target = column.embeddedMetadata ? column.embeddedMetadata.type : column.target;\n        const generated = this.metadataArgsStorage.findGenerated(column.target, column.propertyName);\n        if (generated) {\n          column.isGenerated = true;\n          column.generationStrategy = generated.strategy;\n          if (generated.strategy === \"uuid\") {\n            column.type = \"uuid\";\n          } else if (generated.strategy === \"rowid\") {\n            column.type = \"int\";\n          } else {\n            column.type = column.type || Number;\n          }\n          column.build(this.connection);\n          this.computeEntityMetadataStep2(entityMetadata);\n        }\n      });\n    });\n    return entityMetadatas;\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates entity metadata from the given table args.\n   * Creates column, relation, etc. metadatas for everything this entity metadata owns.\n   */\n  createEntityMetadata(tableArgs) {\n    // we take all \"inheritance tree\" from a target entity to collect all stored metadata args\n    // (by decorators or inside entity schemas). For example for target Post < ContentModel < Unit\n    // it will be an array of [Post, ContentModel, Unit] and we can then get all metadata args of those classes\n    const inheritanceTree = typeof tableArgs.target === \"function\" ? MetadataUtils.getInheritanceTree(tableArgs.target) : [tableArgs.target]; // todo: implement later here inheritance for string-targets\n    const tableInheritance = this.metadataArgsStorage.findInheritanceType(tableArgs.target);\n    const tableTree = this.metadataArgsStorage.findTree(tableArgs.target);\n    // if single table inheritance used, we need to copy all children columns in to parent table\n    let singleTableChildrenTargets;\n    if (tableInheritance && tableInheritance.pattern === \"STI\" || tableArgs.type === \"entity-child\") {\n      singleTableChildrenTargets = this.metadataArgsStorage.filterSingleTableChildren(tableArgs.target).map(args => args.target).filter(target => typeof target === \"function\");\n      inheritanceTree.push(...singleTableChildrenTargets);\n    }\n    return new EntityMetadata({\n      connection: this.connection,\n      args: tableArgs,\n      inheritanceTree: inheritanceTree,\n      tableTree: tableTree,\n      inheritancePattern: tableInheritance ? tableInheritance.pattern : undefined\n    });\n  }\n  computeParentEntityMetadata(allEntityMetadatas, entityMetadata) {\n    // after all metadatas created we set parent entity metadata for table inheritance\n    if (entityMetadata.tableType === \"entity-child\") {\n      entityMetadata.parentEntityMetadata = allEntityMetadatas.find(allEntityMetadata => {\n        return allEntityMetadata.inheritanceTree.indexOf(entityMetadata.target) !== -1 && allEntityMetadata.inheritancePattern === \"STI\";\n      });\n    }\n  }\n  computeEntityMetadataStep1(allEntityMetadatas, entityMetadata) {\n    const entityInheritance = this.metadataArgsStorage.findInheritanceType(entityMetadata.target);\n    const discriminatorValue = this.metadataArgsStorage.findDiscriminatorValue(entityMetadata.target);\n    if (typeof discriminatorValue !== \"undefined\") {\n      entityMetadata.discriminatorValue = discriminatorValue.value;\n    } else {\n      entityMetadata.discriminatorValue = entityMetadata.target.name;\n    }\n    // if single table inheritance is used, we need to mark all embedded columns as nullable\n    entityMetadata.embeddeds = this.createEmbeddedsRecursively(entityMetadata, this.metadataArgsStorage.filterEmbeddeds(entityMetadata.inheritanceTree)).map(embedded => {\n      if (entityMetadata.inheritancePattern === \"STI\") {\n        embedded.columns = embedded.columns.map(column => {\n          column.isNullable = true;\n          return column;\n        });\n      }\n      return embedded;\n    });\n    entityMetadata.ownColumns = this.metadataArgsStorage.filterColumns(entityMetadata.inheritanceTree).map(args => {\n      // for single table children we reuse columns created for their parents\n      if (entityMetadata.tableType === \"entity-child\") return entityMetadata.parentEntityMetadata.ownColumns.find(column => column.propertyName === args.propertyName);\n      // for multiple table inheritance we can override default column values\n      if (entityMetadata.tableType === \"regular\" && args.target !== entityMetadata.target) {\n        const childArgs = this.metadataArgsStorage.columns.find(c => c.propertyName === args.propertyName && c.target === entityMetadata.target);\n        if (childArgs && childArgs.options.default) {\n          args.options.default = childArgs.options.default;\n        }\n      }\n      const column = new ColumnMetadata({\n        connection: this.connection,\n        entityMetadata,\n        args\n      });\n      // if single table inheritance used, we need to mark all inherit table columns as nullable\n      const columnInSingleTableInheritedChild = allEntityMetadatas.find(otherEntityMetadata => otherEntityMetadata.tableType === \"entity-child\" && otherEntityMetadata.target === args.target);\n      if (columnInSingleTableInheritedChild) column.isNullable = true;\n      return column;\n    });\n    // for table inheritance we need to add a discriminator column\n    //\n    if (entityInheritance && entityInheritance.column) {\n      const discriminatorColumnName = entityInheritance.column && entityInheritance.column.name ? entityInheritance.column.name : \"type\";\n      let discriminatorColumn = entityMetadata.ownColumns.find(column => column.propertyName === discriminatorColumnName);\n      if (!discriminatorColumn) {\n        discriminatorColumn = new ColumnMetadata({\n          connection: this.connection,\n          entityMetadata: entityMetadata,\n          args: {\n            target: entityMetadata.target,\n            mode: \"virtual\",\n            propertyName: discriminatorColumnName,\n            options: entityInheritance.column || {\n              name: discriminatorColumnName,\n              type: \"varchar\",\n              nullable: false\n            }\n          }\n        });\n        discriminatorColumn.isVirtual = true;\n        discriminatorColumn.isDiscriminator = true;\n        entityMetadata.ownColumns.push(discriminatorColumn);\n      } else {\n        discriminatorColumn.isDiscriminator = true;\n      }\n    }\n    // add discriminator column to the child entity metadatas\n    // discriminator column will not be there automatically since we are creating it in the code above\n    if (entityMetadata.tableType === \"entity-child\") {\n      const discriminatorColumn = entityMetadata.parentEntityMetadata.ownColumns.find(column => column.isDiscriminator);\n      if (discriminatorColumn && !entityMetadata.ownColumns.find(column => column === discriminatorColumn)) {\n        entityMetadata.ownColumns.push(discriminatorColumn);\n      }\n      // also copy the inheritance pattern & tree metadata\n      // this comes in handy when inheritance and trees are used together\n      entityMetadata.inheritancePattern = entityMetadata.parentEntityMetadata.inheritancePattern;\n      if (!entityMetadata.treeType && !!entityMetadata.parentEntityMetadata.treeType) {\n        entityMetadata.treeType = entityMetadata.parentEntityMetadata.treeType;\n        entityMetadata.treeOptions = entityMetadata.parentEntityMetadata.treeOptions;\n        entityMetadata.treeParentRelation = entityMetadata.parentEntityMetadata.treeParentRelation;\n        entityMetadata.treeLevelColumn = entityMetadata.parentEntityMetadata.treeLevelColumn;\n      }\n    }\n    const {\n      namingStrategy\n    } = this.connection;\n    // check if tree is used then we need to add extra columns for specific tree types\n    if (entityMetadata.treeType === \"materialized-path\") {\n      entityMetadata.ownColumns.push(new ColumnMetadata({\n        connection: this.connection,\n        entityMetadata: entityMetadata,\n        materializedPath: true,\n        args: {\n          target: entityMetadata.target,\n          mode: \"virtual\",\n          propertyName: \"mpath\",\n          options: /*tree.column || */{\n            name: namingStrategy.materializedPathColumnName,\n            type: String,\n            nullable: true,\n            default: \"\"\n          }\n        }\n      }));\n    } else if (entityMetadata.treeType === \"nested-set\") {\n      const {\n        left,\n        right\n      } = namingStrategy.nestedSetColumnNames;\n      entityMetadata.ownColumns.push(new ColumnMetadata({\n        connection: this.connection,\n        entityMetadata: entityMetadata,\n        nestedSetLeft: true,\n        args: {\n          target: entityMetadata.target,\n          mode: \"virtual\",\n          propertyName: left,\n          options: /*tree.column || */{\n            name: left,\n            type: Number,\n            nullable: false,\n            default: 1\n          }\n        }\n      }));\n      entityMetadata.ownColumns.push(new ColumnMetadata({\n        connection: this.connection,\n        entityMetadata: entityMetadata,\n        nestedSetRight: true,\n        args: {\n          target: entityMetadata.target,\n          mode: \"virtual\",\n          propertyName: right,\n          options: /*tree.column || */{\n            name: right,\n            type: Number,\n            nullable: false,\n            default: 2\n          }\n        }\n      }));\n    }\n    entityMetadata.ownRelations = this.metadataArgsStorage.filterRelations(entityMetadata.inheritanceTree).map(args => {\n      // for single table children we reuse relations created for their parents\n      if (entityMetadata.tableType === \"entity-child\") {\n        const parentRelation = entityMetadata.parentEntityMetadata.ownRelations.find(relation => relation.propertyName === args.propertyName);\n        const type = typeof args.type === \"function\" ? args.type() : args.type;\n        if (parentRelation.type !== type) {\n          const clone = Object.create(parentRelation);\n          clone.type = type;\n          return clone;\n        }\n        return parentRelation;\n      }\n      return new RelationMetadata({\n        entityMetadata,\n        args\n      });\n    });\n    entityMetadata.relationIds = this.metadataArgsStorage.filterRelationIds(entityMetadata.inheritanceTree).map(args => {\n      // for single table children we reuse relation ids created for their parents\n      if (entityMetadata.tableType === \"entity-child\") return entityMetadata.parentEntityMetadata.relationIds.find(relationId => relationId.propertyName === args.propertyName);\n      return new RelationIdMetadata({\n        entityMetadata,\n        args\n      });\n    });\n    entityMetadata.relationCounts = this.metadataArgsStorage.filterRelationCounts(entityMetadata.inheritanceTree).map(args => {\n      // for single table children we reuse relation counts created for their parents\n      if (entityMetadata.tableType === \"entity-child\") return entityMetadata.parentEntityMetadata.relationCounts.find(relationCount => relationCount.propertyName === args.propertyName);\n      return new RelationCountMetadata({\n        entityMetadata,\n        args\n      });\n    });\n    entityMetadata.ownListeners = this.metadataArgsStorage.filterListeners(entityMetadata.inheritanceTree).map(args => {\n      return new EntityListenerMetadata({\n        entityMetadata: entityMetadata,\n        args: args\n      });\n    });\n    entityMetadata.checks = this.metadataArgsStorage.filterChecks(entityMetadata.inheritanceTree).map(args => {\n      return new CheckMetadata({\n        entityMetadata,\n        args\n      });\n    });\n    // Only PostgreSQL supports exclusion constraints.\n    if (this.connection.driver.options.type === \"postgres\") {\n      entityMetadata.exclusions = this.metadataArgsStorage.filterExclusions(entityMetadata.inheritanceTree).map(args => {\n        return new ExclusionMetadata({\n          entityMetadata,\n          args\n        });\n      });\n    }\n    if (this.connection.driver.options.type === \"cockroachdb\") {\n      entityMetadata.ownIndices = this.metadataArgsStorage.filterIndices(entityMetadata.inheritanceTree).filter(args => !args.unique).map(args => {\n        return new IndexMetadata({\n          entityMetadata,\n          args\n        });\n      });\n      const uniques = this.metadataArgsStorage.filterIndices(entityMetadata.inheritanceTree).filter(args => args.unique).map(args => {\n        return new UniqueMetadata({\n          entityMetadata: entityMetadata,\n          args: {\n            target: args.target,\n            name: args.name,\n            columns: args.columns\n          }\n        });\n      });\n      entityMetadata.ownUniques.push(...uniques);\n    } else {\n      entityMetadata.ownIndices = this.metadataArgsStorage.filterIndices(entityMetadata.inheritanceTree).map(args => {\n        return new IndexMetadata({\n          entityMetadata,\n          args\n        });\n      });\n    }\n    // This drivers stores unique constraints as unique indices.\n    if (DriverUtils.isMySQLFamily(this.connection.driver) || this.connection.driver.options.type === \"aurora-mysql\" || this.connection.driver.options.type === \"sap\" || this.connection.driver.options.type === \"spanner\") {\n      const indices = this.metadataArgsStorage.filterUniques(entityMetadata.inheritanceTree).map(args => {\n        return new IndexMetadata({\n          entityMetadata: entityMetadata,\n          args: {\n            target: args.target,\n            name: args.name,\n            columns: args.columns,\n            unique: true,\n            synchronize: true\n          }\n        });\n      });\n      entityMetadata.ownIndices.push(...indices);\n    } else {\n      const uniques = this.metadataArgsStorage.filterUniques(entityMetadata.inheritanceTree).map(args => {\n        return new UniqueMetadata({\n          entityMetadata,\n          args\n        });\n      });\n      entityMetadata.ownUniques.push(...uniques);\n    }\n  }\n  /**\n   * Creates from the given embedded metadata args real embedded metadatas with its columns and relations,\n   * and does the same for all its sub-embeddeds (goes recursively).\n   */\n  createEmbeddedsRecursively(entityMetadata, embeddedArgs) {\n    return embeddedArgs.map(embeddedArgs => {\n      const embeddedMetadata = new EmbeddedMetadata({\n        entityMetadata: entityMetadata,\n        args: embeddedArgs\n      });\n      const targets = typeof embeddedMetadata.type === \"function\" ? MetadataUtils.getInheritanceTree(embeddedMetadata.type) : [embeddedMetadata.type]; // todo: implement later here inheritance for string-targets\n      embeddedMetadata.columns = this.metadataArgsStorage.filterColumns(targets).map(args => {\n        return new ColumnMetadata({\n          connection: this.connection,\n          entityMetadata,\n          embeddedMetadata,\n          args\n        });\n      });\n      embeddedMetadata.relations = this.metadataArgsStorage.filterRelations(targets).map(args => {\n        return new RelationMetadata({\n          entityMetadata,\n          embeddedMetadata,\n          args\n        });\n      });\n      embeddedMetadata.listeners = this.metadataArgsStorage.filterListeners(targets).map(args => {\n        return new EntityListenerMetadata({\n          entityMetadata,\n          embeddedMetadata,\n          args\n        });\n      });\n      embeddedMetadata.indices = this.metadataArgsStorage.filterIndices(targets).map(args => {\n        return new IndexMetadata({\n          entityMetadata,\n          embeddedMetadata,\n          args\n        });\n      });\n      embeddedMetadata.uniques = this.metadataArgsStorage.filterUniques(targets).map(args => {\n        return new UniqueMetadata({\n          entityMetadata,\n          embeddedMetadata,\n          args\n        });\n      });\n      embeddedMetadata.relationIds = this.metadataArgsStorage.filterRelationIds(targets).map(args => {\n        return new RelationIdMetadata({\n          entityMetadata,\n          args\n        });\n      });\n      embeddedMetadata.relationCounts = this.metadataArgsStorage.filterRelationCounts(targets).map(args => {\n        return new RelationCountMetadata({\n          entityMetadata,\n          args\n        });\n      });\n      embeddedMetadata.embeddeds = this.createEmbeddedsRecursively(entityMetadata, this.metadataArgsStorage.filterEmbeddeds(targets));\n      embeddedMetadata.embeddeds.forEach(subEmbedded => subEmbedded.parentEmbeddedMetadata = embeddedMetadata);\n      entityMetadata.allEmbeddeds.push(embeddedMetadata);\n      return embeddedMetadata;\n    });\n  }\n  /**\n   * Computes all entity metadata's computed properties, and all its sub-metadatas (relations, columns, embeds, etc).\n   */\n  computeEntityMetadataStep2(entityMetadata) {\n    entityMetadata.embeddeds.forEach(embedded => embedded.build(this.connection));\n    entityMetadata.embeddeds.forEach(embedded => {\n      embedded.columnsFromTree.forEach(column => column.build(this.connection));\n      embedded.relationsFromTree.forEach(relation => relation.build());\n    });\n    entityMetadata.ownColumns.forEach(column => column.build(this.connection));\n    entityMetadata.ownRelations.forEach(relation => relation.build());\n    entityMetadata.relations = entityMetadata.embeddeds.reduce((relations, embedded) => relations.concat(embedded.relationsFromTree), entityMetadata.ownRelations);\n    entityMetadata.eagerRelations = entityMetadata.relations.filter(relation => relation.isEager);\n    entityMetadata.lazyRelations = entityMetadata.relations.filter(relation => relation.isLazy);\n    entityMetadata.oneToOneRelations = entityMetadata.relations.filter(relation => relation.isOneToOne);\n    entityMetadata.oneToManyRelations = entityMetadata.relations.filter(relation => relation.isOneToMany);\n    entityMetadata.manyToOneRelations = entityMetadata.relations.filter(relation => relation.isManyToOne);\n    entityMetadata.manyToManyRelations = entityMetadata.relations.filter(relation => relation.isManyToMany);\n    entityMetadata.ownerOneToOneRelations = entityMetadata.relations.filter(relation => relation.isOneToOneOwner);\n    entityMetadata.ownerManyToManyRelations = entityMetadata.relations.filter(relation => relation.isManyToManyOwner);\n    entityMetadata.treeParentRelation = entityMetadata.relations.find(relation => relation.isTreeParent);\n    entityMetadata.treeChildrenRelation = entityMetadata.relations.find(relation => relation.isTreeChildren);\n    entityMetadata.columns = entityMetadata.embeddeds.reduce((columns, embedded) => columns.concat(embedded.columnsFromTree), entityMetadata.ownColumns);\n    entityMetadata.listeners = entityMetadata.embeddeds.reduce((listeners, embedded) => listeners.concat(embedded.listenersFromTree), entityMetadata.ownListeners);\n    entityMetadata.afterLoadListeners = entityMetadata.listeners.filter(listener => listener.type === EventListenerTypes.AFTER_LOAD);\n    entityMetadata.afterInsertListeners = entityMetadata.listeners.filter(listener => listener.type === EventListenerTypes.AFTER_INSERT);\n    entityMetadata.afterUpdateListeners = entityMetadata.listeners.filter(listener => listener.type === EventListenerTypes.AFTER_UPDATE);\n    entityMetadata.afterRemoveListeners = entityMetadata.listeners.filter(listener => listener.type === EventListenerTypes.AFTER_REMOVE);\n    entityMetadata.afterSoftRemoveListeners = entityMetadata.listeners.filter(listener => listener.type === EventListenerTypes.AFTER_SOFT_REMOVE);\n    entityMetadata.afterRecoverListeners = entityMetadata.listeners.filter(listener => listener.type === EventListenerTypes.AFTER_RECOVER);\n    entityMetadata.beforeInsertListeners = entityMetadata.listeners.filter(listener => listener.type === EventListenerTypes.BEFORE_INSERT);\n    entityMetadata.beforeUpdateListeners = entityMetadata.listeners.filter(listener => listener.type === EventListenerTypes.BEFORE_UPDATE);\n    entityMetadata.beforeRemoveListeners = entityMetadata.listeners.filter(listener => listener.type === EventListenerTypes.BEFORE_REMOVE);\n    entityMetadata.beforeSoftRemoveListeners = entityMetadata.listeners.filter(listener => listener.type === EventListenerTypes.BEFORE_SOFT_REMOVE);\n    entityMetadata.beforeRecoverListeners = entityMetadata.listeners.filter(listener => listener.type === EventListenerTypes.BEFORE_RECOVER);\n    entityMetadata.indices = entityMetadata.embeddeds.reduce((indices, embedded) => indices.concat(embedded.indicesFromTree), entityMetadata.ownIndices);\n    entityMetadata.uniques = entityMetadata.embeddeds.reduce((uniques, embedded) => uniques.concat(embedded.uniquesFromTree), entityMetadata.ownUniques);\n    entityMetadata.primaryColumns = entityMetadata.columns.filter(column => column.isPrimary);\n    entityMetadata.nonVirtualColumns = entityMetadata.columns.filter(column => !column.isVirtual);\n    entityMetadata.ancestorColumns = entityMetadata.columns.filter(column => column.closureType === \"ancestor\");\n    entityMetadata.descendantColumns = entityMetadata.columns.filter(column => column.closureType === \"descendant\");\n    entityMetadata.hasMultiplePrimaryKeys = entityMetadata.primaryColumns.length > 1;\n    entityMetadata.generatedColumns = entityMetadata.columns.filter(column => column.isGenerated || column.isObjectId);\n    entityMetadata.hasUUIDGeneratedColumns = entityMetadata.columns.filter(column => column.isGenerated || column.generationStrategy === \"uuid\").length > 0;\n    entityMetadata.createDateColumn = entityMetadata.columns.find(column => column.isCreateDate);\n    entityMetadata.updateDateColumn = entityMetadata.columns.find(column => column.isUpdateDate);\n    entityMetadata.deleteDateColumn = entityMetadata.columns.find(column => column.isDeleteDate);\n    entityMetadata.versionColumn = entityMetadata.columns.find(column => column.isVersion);\n    entityMetadata.discriminatorColumn = entityMetadata.columns.find(column => column.isDiscriminator);\n    entityMetadata.treeLevelColumn = entityMetadata.columns.find(column => column.isTreeLevel);\n    entityMetadata.nestedSetLeftColumn = entityMetadata.columns.find(column => column.isNestedSetLeft);\n    entityMetadata.nestedSetRightColumn = entityMetadata.columns.find(column => column.isNestedSetRight);\n    entityMetadata.materializedPathColumn = entityMetadata.columns.find(column => column.isMaterializedPath);\n    entityMetadata.objectIdColumn = entityMetadata.columns.find(column => column.isObjectId);\n    entityMetadata.foreignKeys.forEach(foreignKey => foreignKey.build(this.connection.namingStrategy));\n    entityMetadata.propertiesMap = entityMetadata.createPropertiesMap();\n    entityMetadata.relationIds.forEach(relationId => relationId.build());\n    entityMetadata.relationCounts.forEach(relationCount => relationCount.build());\n    entityMetadata.embeddeds.forEach(embedded => {\n      embedded.relationIdsFromTree.forEach(relationId => relationId.build());\n      embedded.relationCountsFromTree.forEach(relationCount => relationCount.build());\n    });\n  }\n  /**\n   * Computes entity metadata's relations inverse side properties.\n   */\n  computeInverseProperties(entityMetadata, entityMetadatas) {\n    entityMetadata.relations.forEach(relation => {\n      // compute inverse side (related) entity metadatas for all relation metadatas\n      const inverseEntityMetadata = entityMetadatas.find(m => m.target === relation.type || typeof relation.type === \"string\" && (m.targetName === relation.type || m.givenTableName === relation.type));\n      if (!inverseEntityMetadata) throw new TypeORMError(\"Entity metadata for \" + entityMetadata.name + \"#\" + relation.propertyPath + \" was not found. Check if you specified a correct entity object and if it's connected in the connection options.\");\n      relation.inverseEntityMetadata = inverseEntityMetadata;\n      relation.inverseSidePropertyPath = relation.buildInverseSidePropertyPath();\n      // and compute inverse relation and mark if it has such\n      relation.inverseRelation = inverseEntityMetadata.relations.find(foundRelation => foundRelation.propertyPath === relation.inverseSidePropertyPath);\n    });\n  }\n  /**\n   * Creates indices for the table of single table inheritance.\n   */\n  createKeysForTableInheritance(entityMetadata) {\n    const isDiscriminatorColumnAlreadyIndexed = entityMetadata.indices.some(({\n      givenColumnNames\n    }) => !!givenColumnNames && Array.isArray(givenColumnNames) && givenColumnNames.length === 1 && givenColumnNames[0] === entityMetadata.discriminatorColumn?.databaseName);\n    // If the discriminator column is already indexed, there is no need to\n    // add another index on top of it.\n    if (isDiscriminatorColumnAlreadyIndexed) {\n      return;\n    }\n    entityMetadata.indices.push(new IndexMetadata({\n      entityMetadata: entityMetadata,\n      columns: [entityMetadata.discriminatorColumn],\n      args: {\n        target: entityMetadata.target,\n        unique: false\n      }\n    }));\n  }\n}","map":{"version":3,"names":["EntityMetadata","ColumnMetadata","IndexMetadata","RelationMetadata","EmbeddedMetadata","RelationIdMetadata","RelationCountMetadata","EventListenerTypes","MetadataUtils","JunctionEntityMetadataBuilder","ClosureJunctionEntityMetadataBuilder","RelationJoinColumnBuilder","EntityListenerMetadata","UniqueMetadata","CheckMetadata","ExclusionMetadata","TypeORMError","DriverUtils","EntityMetadataBuilder","constructor","connection","metadataArgsStorage","junctionEntityMetadataBuilder","closureJunctionEntityMetadataBuilder","relationJoinColumnBuilder","build","entityClasses","allTables","filterTables","tables","realTables","filter","table","type","entityMetadatas","map","tableArgs","createEntityMetadata","forEach","entityMetadata","computeParentEntityMetadata","metadata","childEntityMetadatas","childMetadata","target","isInherited","tableType","computeEntityMetadataStep1","computeEntityMetadataStep2","computeInverseProperties","relations","relation","isOneToOne","isManyToOne","joinColumns","filterJoinColumns","propertyName","foreignKey","columns","uniqueConstraint","registerForeignKeys","foreignKeys","push","registerJoinColumns","isMySQLFamily","driver","options","index","args","name","unique","synchronize","where","column","escape","databaseName","join","isNullFiltered","embeddedMetadata","indices","ownIndices","uniques","ownUniques","isManyToMany","joinTable","findJoinTable","junctionEntityMetadata","registerJunctionEntityMetadata","relationsWithJoinColumns","isWithJoinColumn","hasNonNullableRelations","some","isNullable","isPrimary","treeType","closureJunctionEntityMetadata","closureJunctionTable","inheritancePattern","discriminatorColumn","createKeysForTableInheritance","namingStrategy","checks","check","exclusions","exclusion","isLazy","relationLoader","enableLazyLoad","prototype","generated","findGenerated","isGenerated","generationStrategy","strategy","Number","inheritanceTree","getInheritanceTree","tableInheritance","findInheritanceType","tableTree","findTree","singleTableChildrenTargets","pattern","filterSingleTableChildren","undefined","allEntityMetadatas","parentEntityMetadata","find","allEntityMetadata","indexOf","entityInheritance","discriminatorValue","findDiscriminatorValue","value","embeddeds","createEmbeddedsRecursively","filterEmbeddeds","embedded","ownColumns","filterColumns","childArgs","c","default","columnInSingleTableInheritedChild","otherEntityMetadata","discriminatorColumnName","mode","nullable","isVirtual","isDiscriminator","treeOptions","treeParentRelation","treeLevelColumn","materializedPath","materializedPathColumnName","String","left","right","nestedSetColumnNames","nestedSetLeft","nestedSetRight","ownRelations","filterRelations","parentRelation","clone","Object","create","relationIds","filterRelationIds","relationId","relationCounts","filterRelationCounts","relationCount","ownListeners","filterListeners","filterChecks","filterExclusions","filterIndices","filterUniques","embeddedArgs","targets","listeners","subEmbedded","parentEmbeddedMetadata","allEmbeddeds","columnsFromTree","relationsFromTree","reduce","concat","eagerRelations","isEager","lazyRelations","oneToOneRelations","oneToManyRelations","isOneToMany","manyToOneRelations","manyToManyRelations","ownerOneToOneRelations","isOneToOneOwner","ownerManyToManyRelations","isManyToManyOwner","isTreeParent","treeChildrenRelation","isTreeChildren","listenersFromTree","afterLoadListeners","listener","AFTER_LOAD","afterInsertListeners","AFTER_INSERT","afterUpdateListeners","AFTER_UPDATE","afterRemoveListeners","AFTER_REMOVE","afterSoftRemoveListeners","AFTER_SOFT_REMOVE","afterRecoverListeners","AFTER_RECOVER","beforeInsertListeners","BEFORE_INSERT","beforeUpdateListeners","BEFORE_UPDATE","beforeRemoveListeners","BEFORE_REMOVE","beforeSoftRemoveListeners","BEFORE_SOFT_REMOVE","beforeRecoverListeners","BEFORE_RECOVER","indicesFromTree","uniquesFromTree","primaryColumns","nonVirtualColumns","ancestorColumns","closureType","descendantColumns","hasMultiplePrimaryKeys","length","generatedColumns","isObjectId","hasUUIDGeneratedColumns","createDateColumn","isCreateDate","updateDateColumn","isUpdateDate","deleteDateColumn","isDeleteDate","versionColumn","isVersion","isTreeLevel","nestedSetLeftColumn","isNestedSetLeft","nestedSetRightColumn","isNestedSetRight","materializedPathColumn","isMaterializedPath","objectIdColumn","propertiesMap","createPropertiesMap","relationIdsFromTree","relationCountsFromTree","inverseEntityMetadata","m","targetName","givenTableName","propertyPath","inverseSidePropertyPath","buildInverseSidePropertyPath","inverseRelation","foundRelation","isDiscriminatorColumnAlreadyIndexed","givenColumnNames","Array","isArray"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\metadata-builder\\EntityMetadataBuilder.ts"],"sourcesContent":["import { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\nimport { IndexMetadata } from \"../metadata/IndexMetadata\"\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\nimport { EmbeddedMetadata } from \"../metadata/EmbeddedMetadata\"\nimport { MetadataArgsStorage } from \"../metadata-args/MetadataArgsStorage\"\nimport { EmbeddedMetadataArgs } from \"../metadata-args/EmbeddedMetadataArgs\"\nimport { RelationIdMetadata } from \"../metadata/RelationIdMetadata\"\nimport { RelationCountMetadata } from \"../metadata/RelationCountMetadata\"\nimport { EventListenerTypes } from \"../metadata/types/EventListenerTypes\"\nimport { MetadataUtils } from \"./MetadataUtils\"\nimport { TableMetadataArgs } from \"../metadata-args/TableMetadataArgs\"\nimport { JunctionEntityMetadataBuilder } from \"./JunctionEntityMetadataBuilder\"\nimport { ClosureJunctionEntityMetadataBuilder } from \"./ClosureJunctionEntityMetadataBuilder\"\nimport { RelationJoinColumnBuilder } from \"./RelationJoinColumnBuilder\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { EntityListenerMetadata } from \"../metadata/EntityListenerMetadata\"\nimport { UniqueMetadata } from \"../metadata/UniqueMetadata\"\nimport { CheckMetadata } from \"../metadata/CheckMetadata\"\nimport { ExclusionMetadata } from \"../metadata/ExclusionMetadata\"\nimport { TypeORMError } from \"../error\"\nimport { DriverUtils } from \"../driver/DriverUtils\"\n\n/**\n * Builds EntityMetadata objects and all its sub-metadatas.\n */\nexport class EntityMetadataBuilder {\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Used to build entity metadatas of the junction entities.\n     */\n    protected junctionEntityMetadataBuilder: JunctionEntityMetadataBuilder\n\n    /**\n     * Used to build entity metadatas of the closure junction entities.\n     */\n    protected closureJunctionEntityMetadataBuilder: ClosureJunctionEntityMetadataBuilder\n\n    /**\n     * Used to build join columns of the relations.\n     */\n    protected relationJoinColumnBuilder: RelationJoinColumnBuilder\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        private connection: DataSource,\n        private metadataArgsStorage: MetadataArgsStorage,\n    ) {\n        this.junctionEntityMetadataBuilder = new JunctionEntityMetadataBuilder(\n            connection,\n        )\n        this.closureJunctionEntityMetadataBuilder =\n            new ClosureJunctionEntityMetadataBuilder(connection)\n        this.relationJoinColumnBuilder = new RelationJoinColumnBuilder(\n            connection,\n        )\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds a complete entity metadatas for the given entity classes.\n     */\n    build(entityClasses?: Function[]): EntityMetadata[] {\n        // if entity classes to filter entities by are given then do filtering, otherwise use all\n        const allTables = entityClasses\n            ? this.metadataArgsStorage.filterTables(entityClasses)\n            : this.metadataArgsStorage.tables\n\n        // filter out table metadata args for those we really create entity metadatas and tables in the db\n        const realTables = allTables.filter(\n            (table) =>\n                table.type === \"regular\" ||\n                table.type === \"closure\" ||\n                table.type === \"entity-child\" ||\n                table.type === \"view\",\n        )\n\n        // create entity metadatas for a user defined entities (marked with @Entity decorator or loaded from entity schemas)\n        const entityMetadatas = realTables.map((tableArgs) =>\n            this.createEntityMetadata(tableArgs),\n        )\n\n        // compute parent entity metadatas for table inheritance\n        entityMetadatas.forEach((entityMetadata) =>\n            this.computeParentEntityMetadata(entityMetadatas, entityMetadata),\n        )\n\n        // after all metadatas created we set child entity metadatas for table inheritance\n        entityMetadatas.forEach((metadata) => {\n            metadata.childEntityMetadatas = entityMetadatas.filter(\n                (childMetadata) => {\n                    return (\n                        typeof metadata.target === \"function\" &&\n                        typeof childMetadata.target === \"function\" &&\n                        MetadataUtils.isInherited(\n                            childMetadata.target,\n                            metadata.target,\n                        )\n                    )\n                },\n            )\n        })\n\n        // build entity metadata (step0), first for non-single-table-inherited entity metadatas (dependant)\n        entityMetadatas\n            .filter(\n                (entityMetadata) => entityMetadata.tableType !== \"entity-child\",\n            )\n            .forEach((entityMetadata) => entityMetadata.build())\n\n        // build entity metadata (step0), now for single-table-inherited entity metadatas (dependant)\n        entityMetadatas\n            .filter(\n                (entityMetadata) => entityMetadata.tableType === \"entity-child\",\n            )\n            .forEach((entityMetadata) => entityMetadata.build())\n\n        // compute entity metadata columns, relations, etc. first for the regular, non-single-table-inherited entity metadatas\n        entityMetadatas\n            .filter(\n                (entityMetadata) => entityMetadata.tableType !== \"entity-child\",\n            )\n            .forEach((entityMetadata) =>\n                this.computeEntityMetadataStep1(\n                    entityMetadatas,\n                    entityMetadata,\n                ),\n            )\n\n        // then do it for single table inheritance children (since they are depend on their parents to be built)\n        entityMetadatas\n            .filter(\n                (entityMetadata) => entityMetadata.tableType === \"entity-child\",\n            )\n            .forEach((entityMetadata) =>\n                this.computeEntityMetadataStep1(\n                    entityMetadatas,\n                    entityMetadata,\n                ),\n            )\n\n        // calculate entity metadata computed properties and all its sub-metadatas\n        entityMetadatas.forEach((entityMetadata) =>\n            this.computeEntityMetadataStep2(entityMetadata),\n        )\n\n        // calculate entity metadata's inverse properties\n        entityMetadatas.forEach((entityMetadata) =>\n            this.computeInverseProperties(entityMetadata, entityMetadatas),\n        )\n\n        // go through all entity metadatas and create foreign keys / junction entity metadatas for their relations\n        entityMetadatas\n            .filter(\n                (entityMetadata) => entityMetadata.tableType !== \"entity-child\",\n            )\n            .forEach((entityMetadata) => {\n                // create entity's relations join columns (for many-to-one and one-to-one owner)\n                entityMetadata.relations\n                    .filter(\n                        (relation) =>\n                            relation.isOneToOne || relation.isManyToOne,\n                    )\n                    .forEach((relation) => {\n                        const joinColumns =\n                            this.metadataArgsStorage.filterJoinColumns(\n                                relation.target,\n                                relation.propertyName,\n                            )\n                        const { foreignKey, columns, uniqueConstraint } =\n                            this.relationJoinColumnBuilder.build(\n                                joinColumns,\n                                relation,\n                            ) // create a foreign key based on its metadata args\n                        if (foreignKey) {\n                            relation.registerForeignKeys(foreignKey) // push it to the relation and thus register there a join column\n                            entityMetadata.foreignKeys.push(foreignKey)\n                        }\n                        if (columns) {\n                            relation.registerJoinColumns(columns)\n                        }\n                        if (uniqueConstraint) {\n                            if (\n                                DriverUtils.isMySQLFamily(\n                                    this.connection.driver,\n                                ) ||\n                                this.connection.driver.options.type ===\n                                    \"aurora-mysql\" ||\n                                this.connection.driver.options.type ===\n                                    \"mssql\" ||\n                                this.connection.driver.options.type === \"sap\" ||\n                                this.connection.driver.options.type ===\n                                    \"spanner\"\n                            ) {\n                                const index = new IndexMetadata({\n                                    entityMetadata:\n                                        uniqueConstraint.entityMetadata,\n                                    columns: uniqueConstraint.columns,\n                                    args: {\n                                        target: uniqueConstraint.target!,\n                                        name: uniqueConstraint.name,\n                                        unique: true,\n                                        synchronize: true,\n                                    },\n                                })\n\n                                if (\n                                    this.connection.driver.options.type ===\n                                    \"mssql\"\n                                ) {\n                                    index.where = index.columns\n                                        .map((column) => {\n                                            return `${this.connection.driver.escape(\n                                                column.databaseName,\n                                            )} IS NOT NULL`\n                                        })\n                                        .join(\" AND \")\n                                }\n\n                                if (\n                                    this.connection.driver.options.type ===\n                                    \"spanner\"\n                                ) {\n                                    index.isNullFiltered = true\n                                }\n\n                                if (relation.embeddedMetadata) {\n                                    relation.embeddedMetadata.indices.push(\n                                        index,\n                                    )\n                                } else {\n                                    relation.entityMetadata.ownIndices.push(\n                                        index,\n                                    )\n                                }\n                                this.computeEntityMetadataStep2(entityMetadata)\n                            } else {\n                                if (relation.embeddedMetadata) {\n                                    relation.embeddedMetadata.uniques.push(\n                                        uniqueConstraint,\n                                    )\n                                } else {\n                                    relation.entityMetadata.ownUniques.push(\n                                        uniqueConstraint,\n                                    )\n                                }\n                                this.computeEntityMetadataStep2(entityMetadata)\n                            }\n                        }\n\n                        if (\n                            foreignKey &&\n                            this.connection.driver.options.type ===\n                                \"cockroachdb\"\n                        ) {\n                            const index = new IndexMetadata({\n                                entityMetadata: relation.entityMetadata,\n                                columns: foreignKey.columns,\n                                args: {\n                                    target: relation.entityMetadata.target!,\n                                    synchronize: true,\n                                },\n                            })\n                            if (relation.embeddedMetadata) {\n                                relation.embeddedMetadata.indices.push(index)\n                            } else {\n                                relation.entityMetadata.ownIndices.push(index)\n                            }\n                            this.computeEntityMetadataStep2(entityMetadata)\n                        }\n                    })\n\n                // create junction entity metadatas for entity many-to-many relations\n                entityMetadata.relations\n                    .filter((relation) => relation.isManyToMany)\n                    .forEach((relation) => {\n                        const joinTable =\n                            this.metadataArgsStorage.findJoinTable(\n                                relation.target,\n                                relation.propertyName,\n                            )!\n                        if (!joinTable) return // no join table set - no need to do anything (it means this is many-to-many inverse side)\n\n                        // here we create a junction entity metadata for a new junction table of many-to-many relation\n                        const junctionEntityMetadata =\n                            this.junctionEntityMetadataBuilder.build(\n                                relation,\n                                joinTable,\n                            )\n                        relation.registerForeignKeys(\n                            ...junctionEntityMetadata.foreignKeys,\n                        )\n                        relation.registerJoinColumns(\n                            junctionEntityMetadata.ownIndices[0].columns,\n                            junctionEntityMetadata.ownIndices[1].columns,\n                        )\n                        relation.registerJunctionEntityMetadata(\n                            junctionEntityMetadata,\n                        )\n\n                        // compute new entity metadata properties and push it to entity metadatas pool\n                        this.computeEntityMetadataStep2(junctionEntityMetadata)\n                        this.computeInverseProperties(\n                            junctionEntityMetadata,\n                            entityMetadatas,\n                        )\n                        entityMetadatas.push(junctionEntityMetadata)\n                    })\n            })\n\n        // update entity metadata depend properties\n        entityMetadatas.forEach((entityMetadata) => {\n            entityMetadata.relationsWithJoinColumns =\n                entityMetadata.relations.filter(\n                    (relation) => relation.isWithJoinColumn,\n                )\n            entityMetadata.hasNonNullableRelations =\n                entityMetadata.relationsWithJoinColumns.some(\n                    (relation) => !relation.isNullable || relation.isPrimary,\n                )\n        })\n\n        // generate closure junction tables for all closure tables\n        entityMetadatas\n            .filter((metadata) => metadata.treeType === \"closure-table\")\n            .forEach((entityMetadata) => {\n                const closureJunctionEntityMetadata =\n                    this.closureJunctionEntityMetadataBuilder.build(\n                        entityMetadata,\n                    )\n                entityMetadata.closureJunctionTable =\n                    closureJunctionEntityMetadata\n                this.computeEntityMetadataStep2(closureJunctionEntityMetadata)\n                this.computeInverseProperties(\n                    closureJunctionEntityMetadata,\n                    entityMetadatas,\n                )\n                entityMetadatas.push(closureJunctionEntityMetadata)\n            })\n\n        // generate keys for tables with single-table inheritance\n        entityMetadatas\n            .filter(\n                (metadata) =>\n                    metadata.inheritancePattern === \"STI\" &&\n                    metadata.discriminatorColumn,\n            )\n            .forEach((entityMetadata) =>\n                this.createKeysForTableInheritance(entityMetadata),\n            )\n\n        // build all indices (need to do it after relations and their join columns are built)\n        entityMetadatas.forEach((entityMetadata) => {\n            entityMetadata.indices.forEach((index) =>\n                index.build(this.connection.namingStrategy),\n            )\n        })\n\n        // build all unique constraints (need to do it after relations and their join columns are built)\n        entityMetadatas.forEach((entityMetadata) => {\n            entityMetadata.uniques.forEach((unique) =>\n                unique.build(this.connection.namingStrategy),\n            )\n        })\n\n        // build all check constraints\n        entityMetadatas.forEach((entityMetadata) => {\n            entityMetadata.checks.forEach((check) =>\n                check.build(this.connection.namingStrategy),\n            )\n        })\n\n        // build all exclusion constraints\n        entityMetadatas.forEach((entityMetadata) => {\n            entityMetadata.exclusions.forEach((exclusion) =>\n                exclusion.build(this.connection.namingStrategy),\n            )\n        })\n\n        // add lazy initializer for entity relations\n        entityMetadatas\n            .filter((metadata) => typeof metadata.target === \"function\")\n            .forEach((entityMetadata) => {\n                entityMetadata.relations\n                    .filter((relation) => relation.isLazy)\n                    .forEach((relation) => {\n                        this.connection.relationLoader.enableLazyLoad(\n                            relation,\n                            (entityMetadata.target as Function).prototype,\n                        )\n                    })\n            })\n\n        entityMetadatas.forEach((entityMetadata) => {\n            entityMetadata.columns.forEach((column) => {\n                // const target = column.embeddedMetadata ? column.embeddedMetadata.type : column.target;\n                const generated = this.metadataArgsStorage.findGenerated(\n                    column.target,\n                    column.propertyName,\n                )\n                if (generated) {\n                    column.isGenerated = true\n                    column.generationStrategy = generated.strategy\n                    if (generated.strategy === \"uuid\") {\n                        column.type = \"uuid\"\n                    } else if (generated.strategy === \"rowid\") {\n                        column.type = \"int\"\n                    } else {\n                        column.type = column.type || Number\n                    }\n                    column.build(this.connection)\n                    this.computeEntityMetadataStep2(entityMetadata)\n                }\n            })\n        })\n\n        return entityMetadatas\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates entity metadata from the given table args.\n     * Creates column, relation, etc. metadatas for everything this entity metadata owns.\n     */\n    protected createEntityMetadata(\n        tableArgs: TableMetadataArgs,\n    ): EntityMetadata {\n        // we take all \"inheritance tree\" from a target entity to collect all stored metadata args\n        // (by decorators or inside entity schemas). For example for target Post < ContentModel < Unit\n        // it will be an array of [Post, ContentModel, Unit] and we can then get all metadata args of those classes\n        const inheritanceTree: any[] =\n            typeof tableArgs.target === \"function\"\n                ? MetadataUtils.getInheritanceTree(tableArgs.target)\n                : [tableArgs.target] // todo: implement later here inheritance for string-targets\n\n        const tableInheritance = this.metadataArgsStorage.findInheritanceType(\n            tableArgs.target,\n        )\n        const tableTree = this.metadataArgsStorage.findTree(tableArgs.target)\n\n        // if single table inheritance used, we need to copy all children columns in to parent table\n        let singleTableChildrenTargets: any[]\n        if (\n            (tableInheritance && tableInheritance.pattern === \"STI\") ||\n            tableArgs.type === \"entity-child\"\n        ) {\n            singleTableChildrenTargets = this.metadataArgsStorage\n                .filterSingleTableChildren(tableArgs.target)\n                .map((args) => args.target)\n                .filter((target) => typeof target === \"function\")\n\n            inheritanceTree.push(...singleTableChildrenTargets)\n        }\n\n        return new EntityMetadata({\n            connection: this.connection,\n            args: tableArgs,\n            inheritanceTree: inheritanceTree,\n            tableTree: tableTree,\n            inheritancePattern: tableInheritance\n                ? tableInheritance.pattern\n                : undefined,\n        })\n    }\n\n    protected computeParentEntityMetadata(\n        allEntityMetadatas: EntityMetadata[],\n        entityMetadata: EntityMetadata,\n    ) {\n        // after all metadatas created we set parent entity metadata for table inheritance\n        if (entityMetadata.tableType === \"entity-child\") {\n            entityMetadata.parentEntityMetadata = allEntityMetadatas.find(\n                (allEntityMetadata) => {\n                    return (\n                        allEntityMetadata.inheritanceTree.indexOf(\n                            entityMetadata.target as Function,\n                        ) !== -1 &&\n                        allEntityMetadata.inheritancePattern === \"STI\"\n                    )\n                },\n            )!\n        }\n    }\n\n    protected computeEntityMetadataStep1(\n        allEntityMetadatas: EntityMetadata[],\n        entityMetadata: EntityMetadata,\n    ) {\n        const entityInheritance = this.metadataArgsStorage.findInheritanceType(\n            entityMetadata.target,\n        )\n\n        const discriminatorValue =\n            this.metadataArgsStorage.findDiscriminatorValue(\n                entityMetadata.target,\n            )\n\n        if (typeof discriminatorValue !== \"undefined\") {\n            entityMetadata.discriminatorValue = discriminatorValue.value\n        } else {\n            entityMetadata.discriminatorValue = (\n                entityMetadata.target as any\n            ).name\n        }\n\n        // if single table inheritance is used, we need to mark all embedded columns as nullable\n        entityMetadata.embeddeds = this.createEmbeddedsRecursively(\n            entityMetadata,\n            this.metadataArgsStorage.filterEmbeddeds(\n                entityMetadata.inheritanceTree,\n            ),\n        ).map((embedded: EmbeddedMetadata): EmbeddedMetadata => {\n            if (entityMetadata.inheritancePattern === \"STI\") {\n                embedded.columns = embedded.columns.map(\n                    (column: ColumnMetadata): ColumnMetadata => {\n                        column.isNullable = true\n                        return column\n                    },\n                )\n            }\n            return embedded\n        })\n\n        entityMetadata.ownColumns = this.metadataArgsStorage\n            .filterColumns(entityMetadata.inheritanceTree)\n            .map((args) => {\n                // for single table children we reuse columns created for their parents\n                if (entityMetadata.tableType === \"entity-child\")\n                    return entityMetadata.parentEntityMetadata.ownColumns.find(\n                        (column) => column.propertyName === args.propertyName,\n                    )!\n\n                // for multiple table inheritance we can override default column values\n                if (\n                    entityMetadata.tableType === \"regular\" &&\n                    args.target !== entityMetadata.target\n                ) {\n                    const childArgs = this.metadataArgsStorage.columns.find(\n                        (c) =>\n                            c.propertyName === args.propertyName &&\n                            c.target === entityMetadata.target,\n                    )\n                    if (childArgs && childArgs.options.default) {\n                        args.options.default = childArgs.options.default\n                    }\n                }\n\n                const column = new ColumnMetadata({\n                    connection: this.connection,\n                    entityMetadata,\n                    args,\n                })\n\n                // if single table inheritance used, we need to mark all inherit table columns as nullable\n                const columnInSingleTableInheritedChild =\n                    allEntityMetadatas.find(\n                        (otherEntityMetadata) =>\n                            otherEntityMetadata.tableType === \"entity-child\" &&\n                            otherEntityMetadata.target === args.target,\n                    )\n                if (columnInSingleTableInheritedChild) column.isNullable = true\n                return column\n            })\n\n        // for table inheritance we need to add a discriminator column\n        //\n        if (entityInheritance && entityInheritance.column) {\n            const discriminatorColumnName =\n                entityInheritance.column && entityInheritance.column.name\n                    ? entityInheritance.column.name\n                    : \"type\"\n            let discriminatorColumn = entityMetadata.ownColumns.find(\n                (column) => column.propertyName === discriminatorColumnName,\n            )\n            if (!discriminatorColumn) {\n                discriminatorColumn = new ColumnMetadata({\n                    connection: this.connection,\n                    entityMetadata: entityMetadata,\n                    args: {\n                        target: entityMetadata.target,\n                        mode: \"virtual\",\n                        propertyName: discriminatorColumnName,\n                        options: entityInheritance.column || {\n                            name: discriminatorColumnName,\n                            type: \"varchar\",\n                            nullable: false,\n                        },\n                    },\n                })\n                discriminatorColumn.isVirtual = true\n                discriminatorColumn.isDiscriminator = true\n                entityMetadata.ownColumns.push(discriminatorColumn)\n            } else {\n                discriminatorColumn.isDiscriminator = true\n            }\n        }\n\n        // add discriminator column to the child entity metadatas\n        // discriminator column will not be there automatically since we are creating it in the code above\n        if (entityMetadata.tableType === \"entity-child\") {\n            const discriminatorColumn =\n                entityMetadata.parentEntityMetadata.ownColumns.find(\n                    (column) => column.isDiscriminator,\n                )\n            if (\n                discriminatorColumn &&\n                !entityMetadata.ownColumns.find(\n                    (column) => column === discriminatorColumn,\n                )\n            ) {\n                entityMetadata.ownColumns.push(discriminatorColumn)\n            }\n            // also copy the inheritance pattern & tree metadata\n            // this comes in handy when inheritance and trees are used together\n            entityMetadata.inheritancePattern =\n                entityMetadata.parentEntityMetadata.inheritancePattern\n            if (\n                !entityMetadata.treeType &&\n                !!entityMetadata.parentEntityMetadata.treeType\n            ) {\n                entityMetadata.treeType =\n                    entityMetadata.parentEntityMetadata.treeType\n                entityMetadata.treeOptions =\n                    entityMetadata.parentEntityMetadata.treeOptions\n                entityMetadata.treeParentRelation =\n                    entityMetadata.parentEntityMetadata.treeParentRelation\n                entityMetadata.treeLevelColumn =\n                    entityMetadata.parentEntityMetadata.treeLevelColumn\n            }\n        }\n\n        const { namingStrategy } = this.connection\n\n        // check if tree is used then we need to add extra columns for specific tree types\n        if (entityMetadata.treeType === \"materialized-path\") {\n            entityMetadata.ownColumns.push(\n                new ColumnMetadata({\n                    connection: this.connection,\n                    entityMetadata: entityMetadata,\n                    materializedPath: true,\n                    args: {\n                        target: entityMetadata.target,\n                        mode: \"virtual\",\n                        propertyName: \"mpath\",\n                        options: /*tree.column || */ {\n                            name: namingStrategy.materializedPathColumnName,\n                            type: String,\n                            nullable: true,\n                            default: \"\",\n                        },\n                    },\n                }),\n            )\n        } else if (entityMetadata.treeType === \"nested-set\") {\n            const { left, right } = namingStrategy.nestedSetColumnNames\n            entityMetadata.ownColumns.push(\n                new ColumnMetadata({\n                    connection: this.connection,\n                    entityMetadata: entityMetadata,\n                    nestedSetLeft: true,\n                    args: {\n                        target: entityMetadata.target,\n                        mode: \"virtual\",\n                        propertyName: left,\n                        options: /*tree.column || */ {\n                            name: left,\n                            type: Number,\n                            nullable: false,\n                            default: 1,\n                        },\n                    },\n                }),\n            )\n            entityMetadata.ownColumns.push(\n                new ColumnMetadata({\n                    connection: this.connection,\n                    entityMetadata: entityMetadata,\n                    nestedSetRight: true,\n                    args: {\n                        target: entityMetadata.target,\n                        mode: \"virtual\",\n                        propertyName: right,\n                        options: /*tree.column || */ {\n                            name: right,\n                            type: Number,\n                            nullable: false,\n                            default: 2,\n                        },\n                    },\n                }),\n            )\n        }\n\n        entityMetadata.ownRelations = this.metadataArgsStorage\n            .filterRelations(entityMetadata.inheritanceTree)\n            .map((args) => {\n                // for single table children we reuse relations created for their parents\n                if (entityMetadata.tableType === \"entity-child\") {\n                    const parentRelation =\n                        entityMetadata.parentEntityMetadata.ownRelations.find(\n                            (relation) =>\n                                relation.propertyName === args.propertyName,\n                        )!\n                    const type =\n                        typeof args.type === \"function\"\n                            ? (args.type as () => any)()\n                            : args.type\n                    if (parentRelation.type !== type) {\n                        const clone = Object.create(parentRelation)\n                        clone.type = type\n                        return clone\n                    }\n\n                    return parentRelation\n                }\n\n                return new RelationMetadata({ entityMetadata, args })\n            })\n        entityMetadata.relationIds = this.metadataArgsStorage\n            .filterRelationIds(entityMetadata.inheritanceTree)\n            .map((args) => {\n                // for single table children we reuse relation ids created for their parents\n                if (entityMetadata.tableType === \"entity-child\")\n                    return entityMetadata.parentEntityMetadata.relationIds.find(\n                        (relationId) =>\n                            relationId.propertyName === args.propertyName,\n                    )!\n\n                return new RelationIdMetadata({ entityMetadata, args })\n            })\n        entityMetadata.relationCounts = this.metadataArgsStorage\n            .filterRelationCounts(entityMetadata.inheritanceTree)\n            .map((args) => {\n                // for single table children we reuse relation counts created for their parents\n                if (entityMetadata.tableType === \"entity-child\")\n                    return entityMetadata.parentEntityMetadata.relationCounts.find(\n                        (relationCount) =>\n                            relationCount.propertyName === args.propertyName,\n                    )!\n\n                return new RelationCountMetadata({ entityMetadata, args })\n            })\n        entityMetadata.ownListeners = this.metadataArgsStorage\n            .filterListeners(entityMetadata.inheritanceTree)\n            .map((args) => {\n                return new EntityListenerMetadata({\n                    entityMetadata: entityMetadata,\n                    args: args,\n                })\n            })\n        entityMetadata.checks = this.metadataArgsStorage\n            .filterChecks(entityMetadata.inheritanceTree)\n            .map((args) => {\n                return new CheckMetadata({ entityMetadata, args })\n            })\n\n        // Only PostgreSQL supports exclusion constraints.\n        if (this.connection.driver.options.type === \"postgres\") {\n            entityMetadata.exclusions = this.metadataArgsStorage\n                .filterExclusions(entityMetadata.inheritanceTree)\n                .map((args) => {\n                    return new ExclusionMetadata({ entityMetadata, args })\n                })\n        }\n\n        if (this.connection.driver.options.type === \"cockroachdb\") {\n            entityMetadata.ownIndices = this.metadataArgsStorage\n                .filterIndices(entityMetadata.inheritanceTree)\n                .filter((args) => !args.unique)\n                .map((args) => {\n                    return new IndexMetadata({ entityMetadata, args })\n                })\n\n            const uniques = this.metadataArgsStorage\n                .filterIndices(entityMetadata.inheritanceTree)\n                .filter((args) => args.unique)\n                .map((args) => {\n                    return new UniqueMetadata({\n                        entityMetadata: entityMetadata,\n                        args: {\n                            target: args.target,\n                            name: args.name,\n                            columns: args.columns,\n                        },\n                    })\n                })\n            entityMetadata.ownUniques.push(...uniques)\n        } else {\n            entityMetadata.ownIndices = this.metadataArgsStorage\n                .filterIndices(entityMetadata.inheritanceTree)\n                .map((args) => {\n                    return new IndexMetadata({ entityMetadata, args })\n                })\n        }\n\n        // This drivers stores unique constraints as unique indices.\n        if (\n            DriverUtils.isMySQLFamily(this.connection.driver) ||\n            this.connection.driver.options.type === \"aurora-mysql\" ||\n            this.connection.driver.options.type === \"sap\" ||\n            this.connection.driver.options.type === \"spanner\"\n        ) {\n            const indices = this.metadataArgsStorage\n                .filterUniques(entityMetadata.inheritanceTree)\n                .map((args) => {\n                    return new IndexMetadata({\n                        entityMetadata: entityMetadata,\n                        args: {\n                            target: args.target,\n                            name: args.name,\n                            columns: args.columns,\n                            unique: true,\n                            synchronize: true,\n                        },\n                    })\n                })\n            entityMetadata.ownIndices.push(...indices)\n        } else {\n            const uniques = this.metadataArgsStorage\n                .filterUniques(entityMetadata.inheritanceTree)\n                .map((args) => {\n                    return new UniqueMetadata({ entityMetadata, args })\n                })\n            entityMetadata.ownUniques.push(...uniques)\n        }\n    }\n\n    /**\n     * Creates from the given embedded metadata args real embedded metadatas with its columns and relations,\n     * and does the same for all its sub-embeddeds (goes recursively).\n     */\n    protected createEmbeddedsRecursively(\n        entityMetadata: EntityMetadata,\n        embeddedArgs: EmbeddedMetadataArgs[],\n    ): EmbeddedMetadata[] {\n        return embeddedArgs.map((embeddedArgs) => {\n            const embeddedMetadata = new EmbeddedMetadata({\n                entityMetadata: entityMetadata,\n                args: embeddedArgs,\n            })\n            const targets: any[] =\n                typeof embeddedMetadata.type === \"function\"\n                    ? MetadataUtils.getInheritanceTree(embeddedMetadata.type)\n                    : [embeddedMetadata.type] // todo: implement later here inheritance for string-targets\n\n            embeddedMetadata.columns = this.metadataArgsStorage\n                .filterColumns(targets)\n                .map((args) => {\n                    return new ColumnMetadata({\n                        connection: this.connection,\n                        entityMetadata,\n                        embeddedMetadata,\n                        args,\n                    })\n                })\n            embeddedMetadata.relations = this.metadataArgsStorage\n                .filterRelations(targets)\n                .map((args) => {\n                    return new RelationMetadata({\n                        entityMetadata,\n                        embeddedMetadata,\n                        args,\n                    })\n                })\n            embeddedMetadata.listeners = this.metadataArgsStorage\n                .filterListeners(targets)\n                .map((args) => {\n                    return new EntityListenerMetadata({\n                        entityMetadata,\n                        embeddedMetadata,\n                        args,\n                    })\n                })\n            embeddedMetadata.indices = this.metadataArgsStorage\n                .filterIndices(targets)\n                .map((args) => {\n                    return new IndexMetadata({\n                        entityMetadata,\n                        embeddedMetadata,\n                        args,\n                    })\n                })\n            embeddedMetadata.uniques = this.metadataArgsStorage\n                .filterUniques(targets)\n                .map((args) => {\n                    return new UniqueMetadata({\n                        entityMetadata,\n                        embeddedMetadata,\n                        args,\n                    })\n                })\n            embeddedMetadata.relationIds = this.metadataArgsStorage\n                .filterRelationIds(targets)\n                .map((args) => {\n                    return new RelationIdMetadata({ entityMetadata, args })\n                })\n            embeddedMetadata.relationCounts = this.metadataArgsStorage\n                .filterRelationCounts(targets)\n                .map((args) => {\n                    return new RelationCountMetadata({ entityMetadata, args })\n                })\n            embeddedMetadata.embeddeds = this.createEmbeddedsRecursively(\n                entityMetadata,\n                this.metadataArgsStorage.filterEmbeddeds(targets),\n            )\n            embeddedMetadata.embeddeds.forEach(\n                (subEmbedded) =>\n                    (subEmbedded.parentEmbeddedMetadata = embeddedMetadata),\n            )\n            entityMetadata.allEmbeddeds.push(embeddedMetadata)\n            return embeddedMetadata\n        })\n    }\n\n    /**\n     * Computes all entity metadata's computed properties, and all its sub-metadatas (relations, columns, embeds, etc).\n     */\n    protected computeEntityMetadataStep2(entityMetadata: EntityMetadata) {\n        entityMetadata.embeddeds.forEach((embedded) =>\n            embedded.build(this.connection),\n        )\n        entityMetadata.embeddeds.forEach((embedded) => {\n            embedded.columnsFromTree.forEach((column) =>\n                column.build(this.connection),\n            )\n            embedded.relationsFromTree.forEach((relation) => relation.build())\n        })\n        entityMetadata.ownColumns.forEach((column) =>\n            column.build(this.connection),\n        )\n        entityMetadata.ownRelations.forEach((relation) => relation.build())\n        entityMetadata.relations = entityMetadata.embeddeds.reduce(\n            (relations, embedded) =>\n                relations.concat(embedded.relationsFromTree),\n            entityMetadata.ownRelations,\n        )\n        entityMetadata.eagerRelations = entityMetadata.relations.filter(\n            (relation) => relation.isEager,\n        )\n        entityMetadata.lazyRelations = entityMetadata.relations.filter(\n            (relation) => relation.isLazy,\n        )\n        entityMetadata.oneToOneRelations = entityMetadata.relations.filter(\n            (relation) => relation.isOneToOne,\n        )\n        entityMetadata.oneToManyRelations = entityMetadata.relations.filter(\n            (relation) => relation.isOneToMany,\n        )\n        entityMetadata.manyToOneRelations = entityMetadata.relations.filter(\n            (relation) => relation.isManyToOne,\n        )\n        entityMetadata.manyToManyRelations = entityMetadata.relations.filter(\n            (relation) => relation.isManyToMany,\n        )\n        entityMetadata.ownerOneToOneRelations = entityMetadata.relations.filter(\n            (relation) => relation.isOneToOneOwner,\n        )\n        entityMetadata.ownerManyToManyRelations =\n            entityMetadata.relations.filter(\n                (relation) => relation.isManyToManyOwner,\n            )\n        entityMetadata.treeParentRelation = entityMetadata.relations.find(\n            (relation) => relation.isTreeParent,\n        )\n        entityMetadata.treeChildrenRelation = entityMetadata.relations.find(\n            (relation) => relation.isTreeChildren,\n        )\n        entityMetadata.columns = entityMetadata.embeddeds.reduce(\n            (columns, embedded) => columns.concat(embedded.columnsFromTree),\n            entityMetadata.ownColumns,\n        )\n        entityMetadata.listeners = entityMetadata.embeddeds.reduce(\n            (listeners, embedded) =>\n                listeners.concat(embedded.listenersFromTree),\n            entityMetadata.ownListeners,\n        )\n        entityMetadata.afterLoadListeners = entityMetadata.listeners.filter(\n            (listener) => listener.type === EventListenerTypes.AFTER_LOAD,\n        )\n        entityMetadata.afterInsertListeners = entityMetadata.listeners.filter(\n            (listener) => listener.type === EventListenerTypes.AFTER_INSERT,\n        )\n        entityMetadata.afterUpdateListeners = entityMetadata.listeners.filter(\n            (listener) => listener.type === EventListenerTypes.AFTER_UPDATE,\n        )\n        entityMetadata.afterRemoveListeners = entityMetadata.listeners.filter(\n            (listener) => listener.type === EventListenerTypes.AFTER_REMOVE,\n        )\n        entityMetadata.afterSoftRemoveListeners =\n            entityMetadata.listeners.filter(\n                (listener) =>\n                    listener.type === EventListenerTypes.AFTER_SOFT_REMOVE,\n            )\n        entityMetadata.afterRecoverListeners = entityMetadata.listeners.filter(\n            (listener) => listener.type === EventListenerTypes.AFTER_RECOVER,\n        )\n        entityMetadata.beforeInsertListeners = entityMetadata.listeners.filter(\n            (listener) => listener.type === EventListenerTypes.BEFORE_INSERT,\n        )\n        entityMetadata.beforeUpdateListeners = entityMetadata.listeners.filter(\n            (listener) => listener.type === EventListenerTypes.BEFORE_UPDATE,\n        )\n        entityMetadata.beforeRemoveListeners = entityMetadata.listeners.filter(\n            (listener) => listener.type === EventListenerTypes.BEFORE_REMOVE,\n        )\n        entityMetadata.beforeSoftRemoveListeners =\n            entityMetadata.listeners.filter(\n                (listener) =>\n                    listener.type === EventListenerTypes.BEFORE_SOFT_REMOVE,\n            )\n        entityMetadata.beforeRecoverListeners = entityMetadata.listeners.filter(\n            (listener) => listener.type === EventListenerTypes.BEFORE_RECOVER,\n        )\n        entityMetadata.indices = entityMetadata.embeddeds.reduce(\n            (indices, embedded) => indices.concat(embedded.indicesFromTree),\n            entityMetadata.ownIndices,\n        )\n        entityMetadata.uniques = entityMetadata.embeddeds.reduce(\n            (uniques, embedded) => uniques.concat(embedded.uniquesFromTree),\n            entityMetadata.ownUniques,\n        )\n        entityMetadata.primaryColumns = entityMetadata.columns.filter(\n            (column) => column.isPrimary,\n        )\n        entityMetadata.nonVirtualColumns = entityMetadata.columns.filter(\n            (column) => !column.isVirtual,\n        )\n        entityMetadata.ancestorColumns = entityMetadata.columns.filter(\n            (column) => column.closureType === \"ancestor\",\n        )\n        entityMetadata.descendantColumns = entityMetadata.columns.filter(\n            (column) => column.closureType === \"descendant\",\n        )\n        entityMetadata.hasMultiplePrimaryKeys =\n            entityMetadata.primaryColumns.length > 1\n        entityMetadata.generatedColumns = entityMetadata.columns.filter(\n            (column) => column.isGenerated || column.isObjectId,\n        )\n        entityMetadata.hasUUIDGeneratedColumns =\n            entityMetadata.columns.filter(\n                (column) =>\n                    column.isGenerated || column.generationStrategy === \"uuid\",\n            ).length > 0\n        entityMetadata.createDateColumn = entityMetadata.columns.find(\n            (column) => column.isCreateDate,\n        )\n        entityMetadata.updateDateColumn = entityMetadata.columns.find(\n            (column) => column.isUpdateDate,\n        )\n        entityMetadata.deleteDateColumn = entityMetadata.columns.find(\n            (column) => column.isDeleteDate,\n        )\n        entityMetadata.versionColumn = entityMetadata.columns.find(\n            (column) => column.isVersion,\n        )\n        entityMetadata.discriminatorColumn = entityMetadata.columns.find(\n            (column) => column.isDiscriminator,\n        )\n        entityMetadata.treeLevelColumn = entityMetadata.columns.find(\n            (column) => column.isTreeLevel,\n        )\n        entityMetadata.nestedSetLeftColumn = entityMetadata.columns.find(\n            (column) => column.isNestedSetLeft,\n        )\n        entityMetadata.nestedSetRightColumn = entityMetadata.columns.find(\n            (column) => column.isNestedSetRight,\n        )\n        entityMetadata.materializedPathColumn = entityMetadata.columns.find(\n            (column) => column.isMaterializedPath,\n        )\n        entityMetadata.objectIdColumn = entityMetadata.columns.find(\n            (column) => column.isObjectId,\n        )\n        entityMetadata.foreignKeys.forEach((foreignKey) =>\n            foreignKey.build(this.connection.namingStrategy),\n        )\n        entityMetadata.propertiesMap = entityMetadata.createPropertiesMap()\n        entityMetadata.relationIds.forEach((relationId) => relationId.build())\n        entityMetadata.relationCounts.forEach((relationCount) =>\n            relationCount.build(),\n        )\n        entityMetadata.embeddeds.forEach((embedded) => {\n            embedded.relationIdsFromTree.forEach((relationId) =>\n                relationId.build(),\n            )\n            embedded.relationCountsFromTree.forEach((relationCount) =>\n                relationCount.build(),\n            )\n        })\n    }\n\n    /**\n     * Computes entity metadata's relations inverse side properties.\n     */\n    protected computeInverseProperties(\n        entityMetadata: EntityMetadata,\n        entityMetadatas: EntityMetadata[],\n    ) {\n        entityMetadata.relations.forEach((relation) => {\n            // compute inverse side (related) entity metadatas for all relation metadatas\n            const inverseEntityMetadata = entityMetadatas.find(\n                (m) =>\n                    m.target === relation.type ||\n                    (typeof relation.type === \"string\" &&\n                        (m.targetName === relation.type ||\n                            m.givenTableName === relation.type)),\n            )\n            if (!inverseEntityMetadata)\n                throw new TypeORMError(\n                    \"Entity metadata for \" +\n                        entityMetadata.name +\n                        \"#\" +\n                        relation.propertyPath +\n                        \" was not found. Check if you specified a correct entity object and if it's connected in the connection options.\",\n                )\n\n            relation.inverseEntityMetadata = inverseEntityMetadata\n            relation.inverseSidePropertyPath =\n                relation.buildInverseSidePropertyPath()\n\n            // and compute inverse relation and mark if it has such\n            relation.inverseRelation = inverseEntityMetadata.relations.find(\n                (foundRelation) =>\n                    foundRelation.propertyPath ===\n                    relation.inverseSidePropertyPath,\n            )\n        })\n    }\n\n    /**\n     * Creates indices for the table of single table inheritance.\n     */\n    protected createKeysForTableInheritance(entityMetadata: EntityMetadata) {\n        const isDiscriminatorColumnAlreadyIndexed = entityMetadata.indices.some(\n            ({ givenColumnNames }) =>\n                !!givenColumnNames &&\n                Array.isArray(givenColumnNames) &&\n                givenColumnNames.length === 1 &&\n                givenColumnNames[0] ===\n                    entityMetadata.discriminatorColumn?.databaseName,\n        )\n\n        // If the discriminator column is already indexed, there is no need to\n        // add another index on top of it.\n        if (isDiscriminatorColumnAlreadyIndexed) {\n            return\n        }\n\n        entityMetadata.indices.push(\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: [entityMetadata.discriminatorColumn!],\n                args: {\n                    target: entityMetadata.target,\n                    unique: false,\n                },\n            }),\n        )\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}