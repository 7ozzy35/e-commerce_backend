{"ast":null,"code":"import { v4 as uuidv4 } from \"uuid\";\nimport { DriverUtils } from \"../driver/DriverUtils\";\nimport { TypeORMError } from \"../error\";\nimport { InsertValuesMissingError } from \"../error/InsertValuesMissingError\";\nimport { ReturningStatementNotSupportedError } from \"../error/ReturningStatementNotSupportedError\";\nimport { BroadcasterResult } from \"../subscriber/BroadcasterResult\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\nimport { QueryBuilder } from \"./QueryBuilder\";\nimport { InsertResult } from \"./result/InsertResult\";\nimport { ReturningResultsEntityUpdator } from \"./ReturningResultsEntityUpdator\";\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class InsertQueryBuilder extends QueryBuilder {\n  constructor() {\n    super(...arguments);\n    this[\"@instanceof\"] = Symbol.for(\"InsertQueryBuilder\");\n  }\n  // -------------------------------------------------------------------------\n  // Public Implemented Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Gets generated SQL query without parameters being replaced.\n   */\n  getQuery() {\n    let sql = this.createComment();\n    sql += this.createCteExpression();\n    sql += this.createInsertExpression();\n    return this.replacePropertyNamesForTheWholeQuery(sql.trim());\n  }\n  /**\n   * Executes sql generated by query builder and returns raw database results.\n   */\n  async execute() {\n    // console.time(\".value sets\");\n    const valueSets = this.getValueSets();\n    // console.timeEnd(\".value sets\");\n    // If user passed empty array of entities then we don't need to do\n    // anything.\n    //\n    // Fixes GitHub issues #3111 and #5734. If we were to let this through\n    // we would run into problems downstream, like subscribers getting\n    // invoked with the empty array where they expect an entity, and SQL\n    // queries with an empty VALUES clause.\n    if (valueSets.length === 0) return new InsertResult();\n    // console.time(\"QueryBuilder.execute\");\n    // console.time(\".database stuff\");\n    const queryRunner = this.obtainQueryRunner();\n    let transactionStartedByUs = false;\n    try {\n      // start transaction if it was enabled\n      if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {\n        await queryRunner.startTransaction();\n        transactionStartedByUs = true;\n      }\n      // console.timeEnd(\".database stuff\");\n      // call before insertion methods in listeners and subscribers\n      if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata) {\n        const broadcastResult = new BroadcasterResult();\n        valueSets.forEach(valueSet => {\n          queryRunner.broadcaster.broadcastBeforeInsertEvent(broadcastResult, this.expressionMap.mainAlias.metadata, valueSet);\n        });\n        await broadcastResult.wait();\n      }\n      let declareSql = null;\n      let selectOutputSql = null;\n      // if update entity mode is enabled we may need extra columns for the returning statement\n      // console.time(\".prepare returning statement\");\n      const returningResultsEntityUpdator = new ReturningResultsEntityUpdator(queryRunner, this.expressionMap);\n      const returningColumns = [];\n      if (Array.isArray(this.expressionMap.returning) && this.expressionMap.mainAlias.hasMetadata) {\n        for (const columnPath of this.expressionMap.returning) {\n          returningColumns.push(...this.expressionMap.mainAlias.metadata.findColumnsWithPropertyPath(columnPath));\n        }\n      }\n      if (this.expressionMap.updateEntity === true && this.expressionMap.mainAlias.hasMetadata) {\n        if (!(valueSets.length > 1 && this.connection.driver.options.type === \"oracle\")) {\n          this.expressionMap.extraReturningColumns = this.expressionMap.mainAlias.metadata.getInsertionReturningColumns();\n        }\n        returningColumns.push(...this.expressionMap.extraReturningColumns.filter(c => !returningColumns.includes(c)));\n      }\n      if (returningColumns.length > 0 && this.connection.driver.options.type === \"mssql\") {\n        declareSql = this.connection.driver.buildTableVariableDeclaration(\"@OutputTable\", returningColumns);\n        selectOutputSql = `SELECT * FROM @OutputTable`;\n      }\n      // console.timeEnd(\".prepare returning statement\");\n      // execute query\n      // console.time(\".getting query and parameters\");\n      const [insertSql, parameters] = this.getQueryAndParameters();\n      // console.timeEnd(\".getting query and parameters\");\n      // console.time(\".query execution by database\");\n      const statements = [declareSql, insertSql, selectOutputSql];\n      const sql = statements.filter(s => s != null).join(\";\\n\\n\");\n      const queryResult = await queryRunner.query(sql, parameters, true);\n      const insertResult = InsertResult.from(queryResult);\n      // console.timeEnd(\".query execution by database\");\n      // load returning results and set them to the entity if entity updation is enabled\n      if (this.expressionMap.updateEntity === true && this.expressionMap.mainAlias.hasMetadata) {\n        // console.time(\".updating entity\");\n        await returningResultsEntityUpdator.insert(insertResult, valueSets);\n        // console.timeEnd(\".updating entity\");\n      }\n      // call after insertion methods in listeners and subscribers\n      if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata) {\n        const broadcastResult = new BroadcasterResult();\n        valueSets.forEach(valueSet => {\n          queryRunner.broadcaster.broadcastAfterInsertEvent(broadcastResult, this.expressionMap.mainAlias.metadata, valueSet);\n        });\n        await broadcastResult.wait();\n      }\n      // close transaction if we started it\n      // console.time(\".commit\");\n      if (transactionStartedByUs) {\n        await queryRunner.commitTransaction();\n      }\n      // console.timeEnd(\".commit\");\n      return insertResult;\n    } catch (error) {\n      // rollback transaction if we started it\n      if (transactionStartedByUs) {\n        try {\n          await queryRunner.rollbackTransaction();\n        } catch (rollbackError) {}\n      }\n      throw error;\n    } finally {\n      // console.time(\".releasing connection\");\n      if (queryRunner !== this.queryRunner) {\n        // means we created our own query runner\n        await queryRunner.release();\n      }\n      // console.timeEnd(\".releasing connection\");\n      // console.timeEnd(\"QueryBuilder.execute\");\n    }\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Specifies INTO which entity's table insertion will be executed.\n   */\n  into(entityTarget, columns) {\n    entityTarget = InstanceChecker.isEntitySchema(entityTarget) ? entityTarget.options.name : entityTarget;\n    const mainAlias = this.createFromAlias(entityTarget);\n    this.expressionMap.setMainAlias(mainAlias);\n    this.expressionMap.insertColumns = columns || [];\n    return this;\n  }\n  /**\n   * Values needs to be inserted into table.\n   */\n  values(values) {\n    this.expressionMap.valuesSet = values;\n    return this;\n  }\n  /**\n   * Optional returning/output clause.\n   */\n  output(output) {\n    return this.returning(output);\n  }\n  /**\n   * Optional returning/output clause.\n   */\n  returning(returning) {\n    // not all databases support returning/output cause\n    if (!this.connection.driver.isReturningSqlSupported(\"insert\")) {\n      throw new ReturningStatementNotSupportedError();\n    }\n    this.expressionMap.returning = returning;\n    return this;\n  }\n  /**\n   * Indicates if entity must be updated after insertion operations.\n   * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n   * Enabled by default.\n   */\n  updateEntity(enabled) {\n    this.expressionMap.updateEntity = enabled;\n    return this;\n  }\n  /**\n   * Adds additional ON CONFLICT statement supported in postgres and cockroach.\n   *\n   * @deprecated Use `orIgnore` or `orUpdate`\n   */\n  onConflict(statement) {\n    this.expressionMap.onConflict = statement;\n    return this;\n  }\n  /**\n   * Adds additional ignore statement supported in databases.\n   */\n  orIgnore(statement = true) {\n    this.expressionMap.onIgnore = !!statement;\n    return this;\n  }\n  /**\n   * Adds additional update statement supported in databases.\n   */\n  orUpdate(statementOrOverwrite, conflictTarget, orUpdateOptions) {\n    if (!Array.isArray(statementOrOverwrite)) {\n      this.expressionMap.onUpdate = {\n        conflict: statementOrOverwrite?.conflict_target,\n        columns: statementOrOverwrite?.columns,\n        overwrite: statementOrOverwrite?.overwrite,\n        skipUpdateIfNoValuesChanged: orUpdateOptions?.skipUpdateIfNoValuesChanged,\n        upsertType: orUpdateOptions?.upsertType\n      };\n      return this;\n    }\n    this.expressionMap.onUpdate = {\n      overwrite: statementOrOverwrite,\n      conflict: conflictTarget,\n      skipUpdateIfNoValuesChanged: orUpdateOptions?.skipUpdateIfNoValuesChanged,\n      indexPredicate: orUpdateOptions?.indexPredicate,\n      upsertType: orUpdateOptions?.upsertType\n    };\n    return this;\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates INSERT express used to perform insert query.\n   */\n  createInsertExpression() {\n    const tableName = this.getTableName(this.getMainTableName());\n    const valuesExpression = this.createValuesExpression(); // its important to get values before returning expression because oracle rely on native parameters and ordering of them is important\n    const returningExpression = this.connection.driver.options.type === \"oracle\" && this.getValueSets().length > 1 ? null : this.createReturningExpression(\"insert\"); // oracle doesnt support returning with multi-row insert\n    const columnsExpression = this.createColumnNamesExpression();\n    let query = \"INSERT \";\n    if (this.expressionMap.onUpdate?.upsertType === \"primary-key\") {\n      query = \"UPSERT \";\n    }\n    if (DriverUtils.isMySQLFamily(this.connection.driver) || this.connection.driver.options.type === \"aurora-mysql\") {\n      query += `${this.expressionMap.onIgnore ? \" IGNORE \" : \"\"}`;\n    }\n    query += `INTO ${tableName}`;\n    if (this.alias !== this.getMainTableName() && DriverUtils.isPostgresFamily(this.connection.driver)) {\n      query += ` AS \"${this.alias}\"`;\n    }\n    // add columns expression\n    if (columnsExpression) {\n      query += `(${columnsExpression})`;\n    } else {\n      if (!valuesExpression && (DriverUtils.isMySQLFamily(this.connection.driver) || this.connection.driver.options.type === \"aurora-mysql\"))\n        // special syntax for mysql DEFAULT VALUES insertion\n        query += \"()\";\n    }\n    // add OUTPUT expression\n    if (returningExpression && this.connection.driver.options.type === \"mssql\") {\n      query += ` OUTPUT ${returningExpression}`;\n    }\n    // add VALUES expression\n    if (valuesExpression) {\n      if ((this.connection.driver.options.type === \"oracle\" || this.connection.driver.options.type === \"sap\") && this.getValueSets().length > 1) {\n        query += ` ${valuesExpression}`;\n      } else {\n        query += ` VALUES ${valuesExpression}`;\n      }\n    } else {\n      if (DriverUtils.isMySQLFamily(this.connection.driver) || this.connection.driver.options.type === \"aurora-mysql\") {\n        // special syntax for mysql DEFAULT VALUES insertion\n        query += \" VALUES ()\";\n      } else {\n        query += ` DEFAULT VALUES`;\n      }\n    }\n    if (this.expressionMap.onUpdate?.upsertType !== \"primary-key\") {\n      if (this.connection.driver.supportedUpsertTypes.includes(\"on-conflict-do-update\")) {\n        if (this.expressionMap.onIgnore) {\n          query += \" ON CONFLICT DO NOTHING \";\n        } else if (this.expressionMap.onConflict) {\n          query += ` ON CONFLICT ${this.expressionMap.onConflict} `;\n        } else if (this.expressionMap.onUpdate) {\n          const {\n            overwrite,\n            columns,\n            conflict,\n            skipUpdateIfNoValuesChanged,\n            indexPredicate\n          } = this.expressionMap.onUpdate;\n          let conflictTarget = \"ON CONFLICT\";\n          if (Array.isArray(conflict)) {\n            conflictTarget += ` ( ${conflict.map(column => this.escape(column)).join(\", \")} )`;\n            if (indexPredicate && !DriverUtils.isPostgresFamily(this.connection.driver)) {\n              throw new TypeORMError(`indexPredicate option is not supported by the current database driver`);\n            }\n            if (indexPredicate && DriverUtils.isPostgresFamily(this.connection.driver)) {\n              conflictTarget += ` WHERE ( ${indexPredicate} )`;\n            }\n          } else if (conflict) {\n            conflictTarget += ` ON CONSTRAINT ${this.escape(conflict)}`;\n          }\n          const updatePart = [];\n          if (Array.isArray(overwrite)) {\n            updatePart.push(...overwrite.map(column => `${this.escape(column)} = EXCLUDED.${this.escape(column)}`));\n          } else if (columns) {\n            updatePart.push(...columns.map(column => `${this.escape(column)} = :${column}`));\n          }\n          if (updatePart.length > 0) {\n            query += ` ${conflictTarget} DO UPDATE SET `;\n            updatePart.push(...this.expressionMap.mainAlias.metadata.columns.filter(column => column.isUpdateDate && !overwrite?.includes(column.databaseName) && !(this.connection.driver.options.type === \"oracle\" && this.getValueSets().length > 1 || DriverUtils.isSQLiteFamily(this.connection.driver) || this.connection.driver.options.type === \"sap\" || this.connection.driver.options.type === \"spanner\")).map(column => `${this.escape(column.databaseName)} = DEFAULT`));\n            query += updatePart.join(\", \");\n            query += \" \";\n          }\n          if (Array.isArray(overwrite) && skipUpdateIfNoValuesChanged && DriverUtils.isPostgresFamily(this.connection.driver)) {\n            query += ` WHERE (`;\n            query += overwrite.map(column => `${tableName}.${this.escape(column)} IS DISTINCT FROM EXCLUDED.${this.escape(column)}`).join(\" OR \");\n            query += \") \";\n          }\n        }\n      } else if (this.connection.driver.supportedUpsertTypes.includes(\"on-duplicate-key-update\")) {\n        if (this.expressionMap.onUpdate) {\n          const {\n            overwrite,\n            columns\n          } = this.expressionMap.onUpdate;\n          if (Array.isArray(overwrite)) {\n            query += \" ON DUPLICATE KEY UPDATE \";\n            query += overwrite.map(column => `${this.escape(column)} = VALUES(${this.escape(column)})`).join(\", \");\n            query += \" \";\n          } else if (Array.isArray(columns)) {\n            query += \" ON DUPLICATE KEY UPDATE \";\n            query += columns.map(column => `${this.escape(column)} = :${column}`).join(\", \");\n            query += \" \";\n          }\n        }\n      } else {\n        if (this.expressionMap.onUpdate) {\n          throw new TypeORMError(`onUpdate is not supported by the current database driver`);\n        }\n      }\n    }\n    // add RETURNING expression\n    if (returningExpression && (DriverUtils.isPostgresFamily(this.connection.driver) || this.connection.driver.options.type === \"oracle\" || this.connection.driver.options.type === \"cockroachdb\" || DriverUtils.isMySQLFamily(this.connection.driver))) {\n      query += ` RETURNING ${returningExpression}`;\n    }\n    // Inserting a specific value for an auto-increment primary key in mssql requires enabling IDENTITY_INSERT\n    // IDENTITY_INSERT can only be enabled for tables where there is an IDENTITY column and only if there is a value to be inserted (i.e. supplying DEFAULT is prohibited if IDENTITY_INSERT is enabled)\n    if (this.connection.driver.options.type === \"mssql\" && this.expressionMap.mainAlias.hasMetadata && this.expressionMap.mainAlias.metadata.columns.filter(column => this.expressionMap.insertColumns.length > 0 ? this.expressionMap.insertColumns.indexOf(column.propertyPath) !== -1 : column.isInsert).some(column => this.isOverridingAutoIncrementBehavior(column))) {\n      query = `SET IDENTITY_INSERT ${tableName} ON; ${query}; SET IDENTITY_INSERT ${tableName} OFF`;\n    }\n    return query;\n  }\n  /**\n   * Gets list of columns where values must be inserted to.\n   */\n  getInsertedColumns() {\n    if (!this.expressionMap.mainAlias.hasMetadata) return [];\n    return this.expressionMap.mainAlias.metadata.columns.filter(column => {\n      // if user specified list of columns he wants to insert to, then we filter only them\n      if (this.expressionMap.insertColumns.length) return this.expressionMap.insertColumns.indexOf(column.propertyPath) !== -1;\n      // skip columns the user doesn't want included by default\n      if (!column.isInsert) {\n        return false;\n      }\n      // if user did not specified such list then return all columns except auto-increment one\n      // for Oracle we return auto-increment column as well because Oracle does not support DEFAULT VALUES expression\n      if (column.isGenerated && column.generationStrategy === \"increment\" && !(this.connection.driver.options.type === \"spanner\") && !(this.connection.driver.options.type === \"oracle\") && !DriverUtils.isSQLiteFamily(this.connection.driver) && !DriverUtils.isMySQLFamily(this.connection.driver) && !(this.connection.driver.options.type === \"aurora-mysql\") && !(this.connection.driver.options.type === \"mssql\" && this.isOverridingAutoIncrementBehavior(column))) return false;\n      return true;\n    });\n  }\n  /**\n   * Creates a columns string where values must be inserted to for INSERT INTO expression.\n   */\n  createColumnNamesExpression() {\n    const columns = this.getInsertedColumns();\n    if (columns.length > 0) return columns.map(column => this.escape(column.databaseName)).join(\", \");\n    // in the case if there are no insert columns specified and table without metadata used\n    // we get columns from the inserted value map, in the case if only one inserted map is specified\n    if (!this.expressionMap.mainAlias.hasMetadata && !this.expressionMap.insertColumns.length) {\n      const valueSets = this.getValueSets();\n      if (valueSets.length === 1) return Object.keys(valueSets[0]).map(columnName => this.escape(columnName)).join(\", \");\n    }\n    // get a table name and all column database names\n    return this.expressionMap.insertColumns.map(columnName => this.escape(columnName)).join(\", \");\n  }\n  /**\n   * Creates list of values needs to be inserted in the VALUES expression.\n   */\n  createValuesExpression() {\n    const valueSets = this.getValueSets();\n    const columns = this.getInsertedColumns();\n    // if column metadatas are given then apply all necessary operations with values\n    if (columns.length > 0) {\n      let expression = \"\";\n      valueSets.forEach((valueSet, valueSetIndex) => {\n        columns.forEach((column, columnIndex) => {\n          if (columnIndex === 0) {\n            if (this.connection.driver.options.type === \"oracle\" && valueSets.length > 1) {\n              expression += \" SELECT \";\n            } else if (this.connection.driver.options.type === \"sap\" && valueSets.length > 1) {\n              expression += \" SELECT \";\n            } else {\n              expression += \"(\";\n            }\n          }\n          // extract real value from the entity\n          let value = column.getEntityValue(valueSet);\n          // if column is relational and value is an object then get real referenced column value from this object\n          // for example column value is { question: { id: 1 } }, value will be equal to { id: 1 }\n          // and we extract \"1\" from this object\n          /*if (column.referencedColumn && value instanceof Object && !(typeof value === \"function\")) { // todo: check if we still need it since getEntityValue already has similar code\n              value = column.referencedColumn.getEntityValue(value);\n          }*/\n          if (!(typeof value === \"function\")) {\n            // make sure our value is normalized by a driver\n            value = this.connection.driver.preparePersistentValue(value, column);\n          }\n          // newly inserted entities always have a version equal to 1 (first version)\n          // also, user-specified version must be empty\n          if (column.isVersion && value === undefined) {\n            expression += \"1\";\n            // } else if (column.isNestedSetLeft) {\n            //     const tableName = this.connection.driver.escape(column.entityMetadata.tablePath);\n            //     const rightColumnName = this.connection.driver.escape(column.entityMetadata.nestedSetRightColumn!.databaseName);\n            //     const subQuery = `(SELECT c.max + 1 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;\n            //     expression += subQuery;\n            //\n            // } else if (column.isNestedSetRight) {\n            //     const tableName = this.connection.driver.escape(column.entityMetadata.tablePath);\n            //     const rightColumnName = this.connection.driver.escape(column.entityMetadata.nestedSetRightColumn!.databaseName);\n            //     const subQuery = `(SELECT c.max + 2 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;\n            //     expression += subQuery;\n          } else if (column.isDiscriminator) {\n            expression += this.createParameter(this.expressionMap.mainAlias.metadata.discriminatorValue);\n            // return \"1\";\n            // for create and update dates we insert current date\n            // no, we don't do it because this constant is already in \"default\" value of the column\n            // with extended timestamp functionality, like CURRENT_TIMESTAMP(6) for example\n            // } else if (column.isCreateDate || column.isUpdateDate) {\n            //     return \"CURRENT_TIMESTAMP\";\n            // if column is generated uuid and database does not support its generation and custom generated value was not provided by a user - we generate a new uuid value for insertion\n          } else if (column.isGenerated && column.generationStrategy === \"uuid\" && !this.connection.driver.isUUIDGenerationSupported() && value === undefined) {\n            value = uuidv4();\n            expression += this.createParameter(value);\n            if (!(valueSetIndex in this.expressionMap.locallyGenerated)) {\n              this.expressionMap.locallyGenerated[valueSetIndex] = {};\n            }\n            column.setEntityValue(this.expressionMap.locallyGenerated[valueSetIndex], value);\n            // if value for this column was not provided then insert default value\n          } else if (value === undefined) {\n            if (this.connection.driver.options.type === \"oracle\" && valueSets.length > 1 || DriverUtils.isSQLiteFamily(this.connection.driver) || this.connection.driver.options.type === \"sap\" || this.connection.driver.options.type === \"spanner\") {\n              // unfortunately sqlite does not support DEFAULT expression in INSERT queries\n              if (column.default !== undefined && column.default !== null) {\n                // try to use default defined in the column\n                expression += this.connection.driver.normalizeDefault(column);\n              } else {\n                expression += \"NULL\"; // otherwise simply use NULL and pray if column is nullable\n              }\n            } else {\n              expression += \"DEFAULT\";\n            }\n          } else if (value === null && this.connection.driver.options.type === \"spanner\") {\n            expression += \"NULL\";\n            // support for SQL expressions in queries\n          } else if (typeof value === \"function\") {\n            expression += value();\n            // just any other regular value\n          } else {\n            if (this.connection.driver.options.type === \"mssql\") value = this.connection.driver.parametrizeValue(column, value);\n            // we need to store array values in a special class to make sure parameter replacement will work correctly\n            // if (value instanceof Array)\n            //     value = new ArrayParameter(value);\n            const paramName = this.createParameter(value);\n            if ((DriverUtils.isMySQLFamily(this.connection.driver) || this.connection.driver.options.type === \"aurora-mysql\") && this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n              const useLegacy = this.connection.driver.options.legacySpatialSupport;\n              const geomFromText = useLegacy ? \"GeomFromText\" : \"ST_GeomFromText\";\n              if (column.srid != null) {\n                expression += `${geomFromText}(${paramName}, ${column.srid})`;\n              } else {\n                expression += `${geomFromText}(${paramName})`;\n              }\n            } else if (DriverUtils.isPostgresFamily(this.connection.driver) && this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n              if (column.srid != null) {\n                expression += `ST_SetSRID(ST_GeomFromGeoJSON(${paramName}), ${column.srid})::${column.type}`;\n              } else {\n                expression += `ST_GeomFromGeoJSON(${paramName})::${column.type}`;\n              }\n            } else if (this.connection.driver.options.type === \"mssql\" && this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n              expression += column.type + \"::STGeomFromText(\" + paramName + \", \" + (column.srid || \"0\") + \")\";\n            } else {\n              expression += paramName;\n            }\n          }\n          if (columnIndex === columns.length - 1) {\n            if (valueSetIndex === valueSets.length - 1) {\n              if (this.connection.driver.options.type === \"oracle\" && valueSets.length > 1) {\n                expression += \" FROM DUAL \";\n              } else if (this.connection.driver.options.type === \"sap\" && valueSets.length > 1) {\n                expression += \" FROM dummy \";\n              } else {\n                expression += \")\";\n              }\n            } else {\n              if (this.connection.driver.options.type === \"oracle\" && valueSets.length > 1) {\n                expression += \" FROM DUAL UNION ALL \";\n              } else if (this.connection.driver.options.type === \"sap\" && valueSets.length > 1) {\n                expression += \" FROM dummy UNION ALL \";\n              } else {\n                expression += \"), \";\n              }\n            }\n          } else {\n            expression += \", \";\n          }\n        });\n      });\n      if (expression === \"()\") return \"\";\n      return expression;\n    } else {\n      // for tables without metadata\n      // get values needs to be inserted\n      let expression = \"\";\n      valueSets.forEach((valueSet, insertionIndex) => {\n        const columns = Object.keys(valueSet);\n        columns.forEach((columnName, columnIndex) => {\n          if (columnIndex === 0) {\n            expression += \"(\";\n          }\n          const value = valueSet[columnName];\n          // support for SQL expressions in queries\n          if (typeof value === \"function\") {\n            expression += value();\n            // if value for this column was not provided then insert default value\n          } else if (value === undefined) {\n            if (this.connection.driver.options.type === \"oracle\" && valueSets.length > 1 || DriverUtils.isSQLiteFamily(this.connection.driver) || this.connection.driver.options.type === \"sap\" || this.connection.driver.options.type === \"spanner\") {\n              expression += \"NULL\";\n            } else {\n              expression += \"DEFAULT\";\n            }\n          } else if (value === null && this.connection.driver.options.type === \"spanner\") {\n            // just any other regular value\n          } else {\n            expression += this.createParameter(value);\n          }\n          if (columnIndex === Object.keys(valueSet).length - 1) {\n            if (insertionIndex === valueSets.length - 1) {\n              expression += \")\";\n            } else {\n              expression += \"), \";\n            }\n          } else {\n            expression += \", \";\n          }\n        });\n      });\n      if (expression === \"()\") return \"\";\n      return expression;\n    }\n  }\n  /**\n   * Gets array of values need to be inserted into the target table.\n   */\n  getValueSets() {\n    if (Array.isArray(this.expressionMap.valuesSet)) return this.expressionMap.valuesSet;\n    if (ObjectUtils.isObject(this.expressionMap.valuesSet)) return [this.expressionMap.valuesSet];\n    throw new InsertValuesMissingError();\n  }\n  /**\n   * Checks if column is an auto-generated primary key, but the current insertion specifies a value for it.\n   *\n   * @param column\n   */\n  isOverridingAutoIncrementBehavior(column) {\n    return column.isPrimary && column.isGenerated && column.generationStrategy === \"increment\" && this.getValueSets().some(valueSet => column.getEntityValue(valueSet) !== undefined && column.getEntityValue(valueSet) !== null);\n  }\n}","map":{"version":3,"names":["v4","uuidv4","DriverUtils","TypeORMError","InsertValuesMissingError","ReturningStatementNotSupportedError","BroadcasterResult","InstanceChecker","ObjectUtils","QueryBuilder","InsertResult","ReturningResultsEntityUpdator","InsertQueryBuilder","constructor","Symbol","for","getQuery","sql","createComment","createCteExpression","createInsertExpression","replacePropertyNamesForTheWholeQuery","trim","execute","valueSets","getValueSets","length","queryRunner","obtainQueryRunner","transactionStartedByUs","expressionMap","useTransaction","isTransactionActive","startTransaction","callListeners","mainAlias","hasMetadata","broadcastResult","forEach","valueSet","broadcaster","broadcastBeforeInsertEvent","metadata","wait","declareSql","selectOutputSql","returningResultsEntityUpdator","returningColumns","Array","isArray","returning","columnPath","push","findColumnsWithPropertyPath","updateEntity","connection","driver","options","type","extraReturningColumns","getInsertionReturningColumns","filter","c","includes","buildTableVariableDeclaration","insertSql","parameters","getQueryAndParameters","statements","s","join","queryResult","query","insertResult","from","insert","broadcastAfterInsertEvent","commitTransaction","error","rollbackTransaction","rollbackError","release","into","entityTarget","columns","isEntitySchema","name","createFromAlias","setMainAlias","insertColumns","values","valuesSet","output","isReturningSqlSupported","enabled","onConflict","statement","orIgnore","onIgnore","orUpdate","statementOrOverwrite","conflictTarget","orUpdateOptions","onUpdate","conflict","conflict_target","overwrite","skipUpdateIfNoValuesChanged","upsertType","indexPredicate","tableName","getTableName","getMainTableName","valuesExpression","createValuesExpression","returningExpression","createReturningExpression","columnsExpression","createColumnNamesExpression","isMySQLFamily","alias","isPostgresFamily","supportedUpsertTypes","map","column","escape","updatePart","isUpdateDate","databaseName","isSQLiteFamily","indexOf","propertyPath","isInsert","some","isOverridingAutoIncrementBehavior","getInsertedColumns","isGenerated","generationStrategy","Object","keys","columnName","expression","valueSetIndex","columnIndex","value","getEntityValue","preparePersistentValue","isVersion","undefined","isDiscriminator","createParameter","discriminatorValue","isUUIDGenerationSupported","locallyGenerated","setEntityValue","default","normalizeDefault","parametrizeValue","paramName","spatialTypes","useLegacy","legacySpatialSupport","geomFromText","srid","insertionIndex","isObject","isPrimary"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\query-builder\\InsertQueryBuilder.ts"],"sourcesContent":["import { v4 as uuidv4 } from \"uuid\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { AuroraMysqlDriver } from \"../driver/aurora-mysql/AuroraMysqlDriver\"\nimport { DriverUtils } from \"../driver/DriverUtils\"\nimport { MysqlDriver } from \"../driver/mysql/MysqlDriver\"\nimport { SqlServerDriver } from \"../driver/sqlserver/SqlServerDriver\"\nimport { TypeORMError } from \"../error\"\nimport { InsertValuesMissingError } from \"../error/InsertValuesMissingError\"\nimport { ReturningStatementNotSupportedError } from \"../error/ReturningStatementNotSupportedError\"\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\nimport { BroadcasterResult } from \"../subscriber/BroadcasterResult\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { InsertOrUpdateOptions } from \"./InsertOrUpdateOptions\"\nimport { QueryBuilder } from \"./QueryBuilder\"\nimport { QueryDeepPartialEntity } from \"./QueryPartialEntity\"\nimport { InsertResult } from \"./result/InsertResult\"\nimport { ReturningResultsEntityUpdator } from \"./ReturningResultsEntityUpdator\"\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class InsertQueryBuilder<\n    Entity extends ObjectLiteral,\n> extends QueryBuilder<Entity> {\n    readonly \"@instanceof\" = Symbol.for(\"InsertQueryBuilder\")\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated SQL query without parameters being replaced.\n     */\n    getQuery(): string {\n        let sql = this.createComment()\n        sql += this.createCteExpression()\n        sql += this.createInsertExpression()\n        return this.replacePropertyNamesForTheWholeQuery(sql.trim())\n    }\n\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute(): Promise<InsertResult> {\n        // console.time(\".value sets\");\n        const valueSets: ObjectLiteral[] = this.getValueSets()\n        // console.timeEnd(\".value sets\");\n\n        // If user passed empty array of entities then we don't need to do\n        // anything.\n        //\n        // Fixes GitHub issues #3111 and #5734. If we were to let this through\n        // we would run into problems downstream, like subscribers getting\n        // invoked with the empty array where they expect an entity, and SQL\n        // queries with an empty VALUES clause.\n        if (valueSets.length === 0) return new InsertResult()\n\n        // console.time(\"QueryBuilder.execute\");\n        // console.time(\".database stuff\");\n        const queryRunner = this.obtainQueryRunner()\n        let transactionStartedByUs: boolean = false\n\n        try {\n            // start transaction if it was enabled\n            if (\n                this.expressionMap.useTransaction === true &&\n                queryRunner.isTransactionActive === false\n            ) {\n                await queryRunner.startTransaction()\n                transactionStartedByUs = true\n            }\n\n            // console.timeEnd(\".database stuff\");\n\n            // call before insertion methods in listeners and subscribers\n            if (\n                this.expressionMap.callListeners === true &&\n                this.expressionMap.mainAlias!.hasMetadata\n            ) {\n                const broadcastResult = new BroadcasterResult()\n                valueSets.forEach((valueSet) => {\n                    queryRunner.broadcaster.broadcastBeforeInsertEvent(\n                        broadcastResult,\n                        this.expressionMap.mainAlias!.metadata,\n                        valueSet,\n                    )\n                })\n                await broadcastResult.wait()\n            }\n\n            let declareSql: string | null = null\n            let selectOutputSql: string | null = null\n\n            // if update entity mode is enabled we may need extra columns for the returning statement\n            // console.time(\".prepare returning statement\");\n            const returningResultsEntityUpdator =\n                new ReturningResultsEntityUpdator(\n                    queryRunner,\n                    this.expressionMap,\n                )\n\n            const returningColumns: ColumnMetadata[] = []\n\n            if (\n                Array.isArray(this.expressionMap.returning) &&\n                this.expressionMap.mainAlias!.hasMetadata\n            ) {\n                for (const columnPath of this.expressionMap.returning) {\n                    returningColumns.push(\n                        ...this.expressionMap.mainAlias!.metadata.findColumnsWithPropertyPath(\n                            columnPath,\n                        ),\n                    )\n                }\n            }\n\n            if (\n                this.expressionMap.updateEntity === true &&\n                this.expressionMap.mainAlias!.hasMetadata\n            ) {\n                if (\n                    !(\n                        valueSets.length > 1 &&\n                        this.connection.driver.options.type === \"oracle\"\n                    )\n                ) {\n                    this.expressionMap.extraReturningColumns =\n                        this.expressionMap.mainAlias!.metadata.getInsertionReturningColumns()\n                }\n\n                returningColumns.push(\n                    ...this.expressionMap.extraReturningColumns.filter(\n                        (c) => !returningColumns.includes(c),\n                    ),\n                )\n            }\n\n            if (\n                returningColumns.length > 0 &&\n                this.connection.driver.options.type === \"mssql\"\n            ) {\n                declareSql = (\n                    this.connection.driver as SqlServerDriver\n                ).buildTableVariableDeclaration(\n                    \"@OutputTable\",\n                    returningColumns,\n                )\n                selectOutputSql = `SELECT * FROM @OutputTable`\n            }\n            // console.timeEnd(\".prepare returning statement\");\n\n            // execute query\n            // console.time(\".getting query and parameters\");\n            const [insertSql, parameters] = this.getQueryAndParameters()\n            // console.timeEnd(\".getting query and parameters\");\n\n            // console.time(\".query execution by database\");\n            const statements = [declareSql, insertSql, selectOutputSql]\n            const sql = statements.filter((s) => s != null).join(\";\\n\\n\")\n\n            const queryResult = await queryRunner.query(sql, parameters, true)\n\n            const insertResult = InsertResult.from(queryResult)\n\n            // console.timeEnd(\".query execution by database\");\n\n            // load returning results and set them to the entity if entity updation is enabled\n            if (\n                this.expressionMap.updateEntity === true &&\n                this.expressionMap.mainAlias!.hasMetadata\n            ) {\n                // console.time(\".updating entity\");\n                await returningResultsEntityUpdator.insert(\n                    insertResult,\n                    valueSets,\n                )\n                // console.timeEnd(\".updating entity\");\n            }\n\n            // call after insertion methods in listeners and subscribers\n            if (\n                this.expressionMap.callListeners === true &&\n                this.expressionMap.mainAlias!.hasMetadata\n            ) {\n                const broadcastResult = new BroadcasterResult()\n                valueSets.forEach((valueSet) => {\n                    queryRunner.broadcaster.broadcastAfterInsertEvent(\n                        broadcastResult,\n                        this.expressionMap.mainAlias!.metadata,\n                        valueSet,\n                    )\n                })\n                await broadcastResult.wait()\n            }\n\n            // close transaction if we started it\n            // console.time(\".commit\");\n            if (transactionStartedByUs) {\n                await queryRunner.commitTransaction()\n            }\n            // console.timeEnd(\".commit\");\n\n            return insertResult\n        } catch (error) {\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction()\n                } catch (rollbackError) {}\n            }\n            throw error\n        } finally {\n            // console.time(\".releasing connection\");\n            if (queryRunner !== this.queryRunner) {\n                // means we created our own query runner\n                await queryRunner.release()\n            }\n            // console.timeEnd(\".releasing connection\");\n            // console.timeEnd(\"QueryBuilder.execute\");\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Specifies INTO which entity's table insertion will be executed.\n     */\n    into<T extends ObjectLiteral>(\n        entityTarget: EntityTarget<T>,\n        columns?: string[],\n    ): InsertQueryBuilder<T> {\n        entityTarget = InstanceChecker.isEntitySchema(entityTarget)\n            ? entityTarget.options.name\n            : entityTarget\n        const mainAlias = this.createFromAlias(entityTarget)\n        this.expressionMap.setMainAlias(mainAlias)\n        this.expressionMap.insertColumns = columns || []\n        return this as any as InsertQueryBuilder<T>\n    }\n\n    /**\n     * Values needs to be inserted into table.\n     */\n    values(\n        values:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n    ): this {\n        this.expressionMap.valuesSet = values\n        return this\n    }\n\n    /**\n     * Optional returning/output clause.\n     * This will return given column values.\n     */\n    output(columns: string[]): this\n\n    /**\n     * Optional returning/output clause.\n     * Returning is a SQL string containing returning statement.\n     */\n    output(output: string): this\n\n    /**\n     * Optional returning/output clause.\n     */\n    output(output: string | string[]): this\n\n    /**\n     * Optional returning/output clause.\n     */\n    output(output: string | string[]): this {\n        return this.returning(output)\n    }\n\n    /**\n     * Optional returning/output clause.\n     * This will return given column values.\n     */\n    returning(columns: string[]): this\n\n    /**\n     * Optional returning/output clause.\n     * Returning is a SQL string containing returning statement.\n     */\n    returning(returning: string): this\n\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning: string | string[]): this\n\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning: string | string[]): this {\n        // not all databases support returning/output cause\n        if (!this.connection.driver.isReturningSqlSupported(\"insert\")) {\n            throw new ReturningStatementNotSupportedError()\n        }\n\n        this.expressionMap.returning = returning\n        return this\n    }\n\n    /**\n     * Indicates if entity must be updated after insertion operations.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     * Enabled by default.\n     */\n    updateEntity(enabled: boolean): this {\n        this.expressionMap.updateEntity = enabled\n        return this\n    }\n\n    /**\n     * Adds additional ON CONFLICT statement supported in postgres and cockroach.\n     *\n     * @deprecated Use `orIgnore` or `orUpdate`\n     */\n    onConflict(statement: string): this {\n        this.expressionMap.onConflict = statement\n        return this\n    }\n\n    /**\n     * Adds additional ignore statement supported in databases.\n     */\n    orIgnore(statement: string | boolean = true): this {\n        this.expressionMap.onIgnore = !!statement\n        return this\n    }\n\n    /**\n     * @deprecated\n     *\n     * `.orUpdate({ columns: [ \"is_updated\" ] }).setParameter(\"is_updated\", value)`\n     *\n     * is now `.orUpdate([\"is_updated\"])`\n     *\n     * `.orUpdate({ conflict_target: ['date'], overwrite: ['title'] })`\n     *\n     * is now `.orUpdate(['title'], ['date'])`\n     *\n     */\n    orUpdate(statement?: {\n        columns?: string[]\n        overwrite?: string[]\n        conflict_target?: string | string[]\n    }): this\n\n    orUpdate(\n        overwrite: string[],\n        conflictTarget?: string | string[],\n        orUpdateOptions?: InsertOrUpdateOptions,\n    ): this\n\n    /**\n     * Adds additional update statement supported in databases.\n     */\n    orUpdate(\n        statementOrOverwrite?:\n            | {\n                  columns?: string[]\n                  overwrite?: string[]\n                  conflict_target?: string | string[]\n              }\n            | string[],\n        conflictTarget?: string | string[],\n        orUpdateOptions?: InsertOrUpdateOptions,\n    ): this {\n        if (!Array.isArray(statementOrOverwrite)) {\n            this.expressionMap.onUpdate = {\n                conflict: statementOrOverwrite?.conflict_target,\n                columns: statementOrOverwrite?.columns,\n                overwrite: statementOrOverwrite?.overwrite,\n                skipUpdateIfNoValuesChanged:\n                    orUpdateOptions?.skipUpdateIfNoValuesChanged,\n                upsertType: orUpdateOptions?.upsertType,\n            }\n            return this\n        }\n\n        this.expressionMap.onUpdate = {\n            overwrite: statementOrOverwrite,\n            conflict: conflictTarget,\n            skipUpdateIfNoValuesChanged:\n                orUpdateOptions?.skipUpdateIfNoValuesChanged,\n            indexPredicate: orUpdateOptions?.indexPredicate,\n            upsertType: orUpdateOptions?.upsertType,\n        }\n        return this\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates INSERT express used to perform insert query.\n     */\n    protected createInsertExpression() {\n        const tableName = this.getTableName(this.getMainTableName())\n        const valuesExpression = this.createValuesExpression() // its important to get values before returning expression because oracle rely on native parameters and ordering of them is important\n        const returningExpression =\n            this.connection.driver.options.type === \"oracle\" &&\n            this.getValueSets().length > 1\n                ? null\n                : this.createReturningExpression(\"insert\") // oracle doesnt support returning with multi-row insert\n        const columnsExpression = this.createColumnNamesExpression()\n        let query = \"INSERT \"\n\n        if (this.expressionMap.onUpdate?.upsertType === \"primary-key\") {\n            query = \"UPSERT \"\n        }\n\n        if (\n            DriverUtils.isMySQLFamily(this.connection.driver) ||\n            this.connection.driver.options.type === \"aurora-mysql\"\n        ) {\n            query += `${this.expressionMap.onIgnore ? \" IGNORE \" : \"\"}`\n        }\n\n        query += `INTO ${tableName}`\n\n        if (\n            this.alias !== this.getMainTableName() &&\n            DriverUtils.isPostgresFamily(this.connection.driver)\n        ) {\n            query += ` AS \"${this.alias}\"`\n        }\n\n        // add columns expression\n        if (columnsExpression) {\n            query += `(${columnsExpression})`\n        } else {\n            if (\n                !valuesExpression &&\n                (DriverUtils.isMySQLFamily(this.connection.driver) ||\n                    this.connection.driver.options.type === \"aurora-mysql\")\n            )\n                // special syntax for mysql DEFAULT VALUES insertion\n                query += \"()\"\n        }\n\n        // add OUTPUT expression\n        if (\n            returningExpression &&\n            this.connection.driver.options.type === \"mssql\"\n        ) {\n            query += ` OUTPUT ${returningExpression}`\n        }\n\n        // add VALUES expression\n        if (valuesExpression) {\n            if (\n                (\n                    this.connection.driver.options.type === \"oracle\" ||\n                    this.connection.driver.options.type === \"sap\"\n                ) &&\n                this.getValueSets().length > 1\n            ) {\n                query += ` ${valuesExpression}`\n            } else {\n                query += ` VALUES ${valuesExpression}`\n            }\n        } else {\n            if (\n                DriverUtils.isMySQLFamily(this.connection.driver) ||\n                this.connection.driver.options.type === \"aurora-mysql\"\n            ) {\n                // special syntax for mysql DEFAULT VALUES insertion\n                query += \" VALUES ()\"\n            } else {\n                query += ` DEFAULT VALUES`\n            }\n        }\n        if (this.expressionMap.onUpdate?.upsertType !== \"primary-key\") {\n            if (\n                this.connection.driver.supportedUpsertTypes.includes(\n                    \"on-conflict-do-update\",\n                )\n            ) {\n                if (this.expressionMap.onIgnore) {\n                    query += \" ON CONFLICT DO NOTHING \"\n                } else if (this.expressionMap.onConflict) {\n                    query += ` ON CONFLICT ${this.expressionMap.onConflict} `\n                } else if (this.expressionMap.onUpdate) {\n                    const {\n                        overwrite,\n                        columns,\n                        conflict,\n                        skipUpdateIfNoValuesChanged,\n                        indexPredicate,\n                    } = this.expressionMap.onUpdate\n\n                    let conflictTarget = \"ON CONFLICT\"\n\n                    if (Array.isArray(conflict)) {\n                        conflictTarget += ` ( ${conflict\n                            .map((column) => this.escape(column))\n                            .join(\", \")} )`\n                        if (\n                            indexPredicate &&\n                            !DriverUtils.isPostgresFamily(\n                                this.connection.driver,\n                            )\n                        ) {\n                            throw new TypeORMError(\n                                `indexPredicate option is not supported by the current database driver`,\n                            )\n                        }\n                        if (\n                            indexPredicate &&\n                            DriverUtils.isPostgresFamily(this.connection.driver)\n                        ) {\n                            conflictTarget += ` WHERE ( ${indexPredicate} )`\n                        }\n                    } else if (conflict) {\n                        conflictTarget += ` ON CONSTRAINT ${this.escape(\n                            conflict,\n                        )}`\n                    }\n\n                    const updatePart: string[] = []\n\n                    if (Array.isArray(overwrite)) {\n                        updatePart.push(\n                            ...overwrite.map(\n                                (column) =>\n                                    `${this.escape(\n                                        column,\n                                    )} = EXCLUDED.${this.escape(column)}`,\n                            ),\n                        )\n                    } else if (columns) {\n                        updatePart.push(\n                            ...columns.map(\n                                (column) =>\n                                    `${this.escape(column)} = :${column}`,\n                            ),\n                        )\n                    }\n\n                    if (updatePart.length > 0) {\n                        query += ` ${conflictTarget} DO UPDATE SET `\n\n                        updatePart.push(\n                            ...this.expressionMap\n                                .mainAlias!.metadata.columns.filter(\n                                    (column) =>\n                                        column.isUpdateDate &&\n                                        !overwrite?.includes(\n                                            column.databaseName,\n                                        ) &&\n                                        !(\n                                            (this.connection.driver.options\n                                                .type === \"oracle\" &&\n                                                this.getValueSets().length >\n                                                    1) ||\n                                            DriverUtils.isSQLiteFamily(\n                                                this.connection.driver,\n                                            ) ||\n                                            this.connection.driver.options\n                                                .type === \"sap\" ||\n                                            this.connection.driver.options\n                                                .type === \"spanner\"\n                                        ),\n                                )\n                                .map(\n                                    (column) =>\n                                        `${this.escape(\n                                            column.databaseName,\n                                        )} = DEFAULT`,\n                                ),\n                        )\n\n                        query += updatePart.join(\", \")\n                        query += \" \"\n                    }\n\n                    if (\n                        Array.isArray(overwrite) &&\n                        skipUpdateIfNoValuesChanged &&\n                        DriverUtils.isPostgresFamily(this.connection.driver)\n                    ) {\n                        query += ` WHERE (`\n                        query += overwrite\n                            .map(\n                                (column) =>\n                                    `${tableName}.${this.escape(\n                                        column,\n                                    )} IS DISTINCT FROM EXCLUDED.${this.escape(\n                                        column,\n                                    )}`,\n                            )\n                            .join(\" OR \")\n                        query += \") \"\n                    }\n                }\n            } else if (\n                this.connection.driver.supportedUpsertTypes.includes(\n                    \"on-duplicate-key-update\",\n                )\n            ) {\n                if (this.expressionMap.onUpdate) {\n                    const { overwrite, columns } = this.expressionMap.onUpdate\n\n                    if (Array.isArray(overwrite)) {\n                        query += \" ON DUPLICATE KEY UPDATE \"\n                        query += overwrite\n                            .map(\n                                (column) =>\n                                    `${this.escape(\n                                        column,\n                                    )} = VALUES(${this.escape(column)})`,\n                            )\n                            .join(\", \")\n                        query += \" \"\n                    } else if (Array.isArray(columns)) {\n                        query += \" ON DUPLICATE KEY UPDATE \"\n                        query += columns\n                            .map(\n                                (column) =>\n                                    `${this.escape(column)} = :${column}`,\n                            )\n                            .join(\", \")\n                        query += \" \"\n                    }\n                }\n            } else {\n                if (this.expressionMap.onUpdate) {\n                    throw new TypeORMError(\n                        `onUpdate is not supported by the current database driver`,\n                    )\n                }\n            }\n        }\n\n        // add RETURNING expression\n        if (\n            returningExpression &&\n            (DriverUtils.isPostgresFamily(this.connection.driver) ||\n                this.connection.driver.options.type === \"oracle\" ||\n                this.connection.driver.options.type === \"cockroachdb\" ||\n                DriverUtils.isMySQLFamily(this.connection.driver))\n        ) {\n            query += ` RETURNING ${returningExpression}`\n        }\n\n        // Inserting a specific value for an auto-increment primary key in mssql requires enabling IDENTITY_INSERT\n        // IDENTITY_INSERT can only be enabled for tables where there is an IDENTITY column and only if there is a value to be inserted (i.e. supplying DEFAULT is prohibited if IDENTITY_INSERT is enabled)\n        if (\n            this.connection.driver.options.type === \"mssql\" &&\n            this.expressionMap.mainAlias!.hasMetadata &&\n            this.expressionMap\n                .mainAlias!.metadata.columns.filter((column) =>\n                    this.expressionMap.insertColumns.length > 0\n                        ? this.expressionMap.insertColumns.indexOf(\n                              column.propertyPath,\n                          ) !== -1\n                        : column.isInsert,\n                )\n                .some((column) =>\n                    this.isOverridingAutoIncrementBehavior(column),\n                )\n        ) {\n            query = `SET IDENTITY_INSERT ${tableName} ON; ${query}; SET IDENTITY_INSERT ${tableName} OFF`\n        }\n\n        return query\n    }\n\n    /**\n     * Gets list of columns where values must be inserted to.\n     */\n    protected getInsertedColumns(): ColumnMetadata[] {\n        if (!this.expressionMap.mainAlias!.hasMetadata) return []\n\n        return this.expressionMap.mainAlias!.metadata.columns.filter(\n            (column) => {\n                // if user specified list of columns he wants to insert to, then we filter only them\n                if (this.expressionMap.insertColumns.length)\n                    return (\n                        this.expressionMap.insertColumns.indexOf(\n                            column.propertyPath,\n                        ) !== -1\n                    )\n\n                // skip columns the user doesn't want included by default\n                if (!column.isInsert) {\n                    return false\n                }\n\n                // if user did not specified such list then return all columns except auto-increment one\n                // for Oracle we return auto-increment column as well because Oracle does not support DEFAULT VALUES expression\n                if (\n                    column.isGenerated &&\n                    column.generationStrategy === \"increment\" &&\n                    !(this.connection.driver.options.type === \"spanner\") &&\n                    !(this.connection.driver.options.type === \"oracle\") &&\n                    !DriverUtils.isSQLiteFamily(this.connection.driver) &&\n                    !DriverUtils.isMySQLFamily(this.connection.driver) &&\n                    !(this.connection.driver.options.type === \"aurora-mysql\") &&\n                    !(\n                        this.connection.driver.options.type === \"mssql\" &&\n                        this.isOverridingAutoIncrementBehavior(column)\n                    )\n                )\n                    return false\n\n                return true\n            },\n        )\n    }\n\n    /**\n     * Creates a columns string where values must be inserted to for INSERT INTO expression.\n     */\n    protected createColumnNamesExpression(): string {\n        const columns = this.getInsertedColumns()\n        if (columns.length > 0)\n            return columns\n                .map((column) => this.escape(column.databaseName))\n                .join(\", \")\n\n        // in the case if there are no insert columns specified and table without metadata used\n        // we get columns from the inserted value map, in the case if only one inserted map is specified\n        if (\n            !this.expressionMap.mainAlias!.hasMetadata &&\n            !this.expressionMap.insertColumns.length\n        ) {\n            const valueSets = this.getValueSets()\n            if (valueSets.length === 1)\n                return Object.keys(valueSets[0])\n                    .map((columnName) => this.escape(columnName))\n                    .join(\", \")\n        }\n\n        // get a table name and all column database names\n        return this.expressionMap.insertColumns\n            .map((columnName) => this.escape(columnName))\n            .join(\", \")\n    }\n\n    /**\n     * Creates list of values needs to be inserted in the VALUES expression.\n     */\n    protected createValuesExpression(): string {\n        const valueSets = this.getValueSets()\n        const columns = this.getInsertedColumns()\n\n        // if column metadatas are given then apply all necessary operations with values\n        if (columns.length > 0) {\n            let expression = \"\"\n            valueSets.forEach((valueSet, valueSetIndex) => {\n                columns.forEach((column, columnIndex) => {\n                    if (columnIndex === 0) {\n                        if (\n                            this.connection.driver.options.type === \"oracle\" &&\n                            valueSets.length > 1\n                        ) {\n                            expression += \" SELECT \"\n                        } else if (\n                            this.connection.driver.options.type === \"sap\" &&\n                            valueSets.length > 1\n                        ) {\n                            expression += \" SELECT \"\n                        } else {\n                            expression += \"(\"\n                        }\n                    }\n\n                    // extract real value from the entity\n                    let value = column.getEntityValue(valueSet)\n\n                    // if column is relational and value is an object then get real referenced column value from this object\n                    // for example column value is { question: { id: 1 } }, value will be equal to { id: 1 }\n                    // and we extract \"1\" from this object\n                    /*if (column.referencedColumn && value instanceof Object && !(typeof value === \"function\")) { // todo: check if we still need it since getEntityValue already has similar code\n                        value = column.referencedColumn.getEntityValue(value);\n                    }*/\n\n                    if (!(typeof value === \"function\")) {\n                        // make sure our value is normalized by a driver\n                        value = this.connection.driver.preparePersistentValue(\n                            value,\n                            column,\n                        )\n                    }\n\n                    // newly inserted entities always have a version equal to 1 (first version)\n                    // also, user-specified version must be empty\n                    if (column.isVersion && value === undefined) {\n                        expression += \"1\"\n\n                        // } else if (column.isNestedSetLeft) {\n                        //     const tableName = this.connection.driver.escape(column.entityMetadata.tablePath);\n                        //     const rightColumnName = this.connection.driver.escape(column.entityMetadata.nestedSetRightColumn!.databaseName);\n                        //     const subQuery = `(SELECT c.max + 1 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;\n                        //     expression += subQuery;\n                        //\n                        // } else if (column.isNestedSetRight) {\n                        //     const tableName = this.connection.driver.escape(column.entityMetadata.tablePath);\n                        //     const rightColumnName = this.connection.driver.escape(column.entityMetadata.nestedSetRightColumn!.databaseName);\n                        //     const subQuery = `(SELECT c.max + 2 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;\n                        //     expression += subQuery;\n                    } else if (column.isDiscriminator) {\n                        expression += this.createParameter(\n                            this.expressionMap.mainAlias!.metadata\n                                .discriminatorValue,\n                        )\n                        // return \"1\";\n\n                        // for create and update dates we insert current date\n                        // no, we don't do it because this constant is already in \"default\" value of the column\n                        // with extended timestamp functionality, like CURRENT_TIMESTAMP(6) for example\n                        // } else if (column.isCreateDate || column.isUpdateDate) {\n                        //     return \"CURRENT_TIMESTAMP\";\n\n                        // if column is generated uuid and database does not support its generation and custom generated value was not provided by a user - we generate a new uuid value for insertion\n                    } else if (\n                        column.isGenerated &&\n                        column.generationStrategy === \"uuid\" &&\n                        !this.connection.driver.isUUIDGenerationSupported() &&\n                        value === undefined\n                    ) {\n                        value = uuidv4()\n                        expression += this.createParameter(value)\n\n                        if (\n                            !(\n                                valueSetIndex in\n                                this.expressionMap.locallyGenerated\n                            )\n                        ) {\n                            this.expressionMap.locallyGenerated[valueSetIndex] =\n                                {}\n                        }\n                        column.setEntityValue(\n                            this.expressionMap.locallyGenerated[valueSetIndex],\n                            value,\n                        )\n\n                        // if value for this column was not provided then insert default value\n                    } else if (value === undefined) {\n                        if (\n                            (this.connection.driver.options.type === \"oracle\" &&\n                                valueSets.length > 1) ||\n                            DriverUtils.isSQLiteFamily(\n                                this.connection.driver,\n                            ) ||\n                            this.connection.driver.options.type === \"sap\" ||\n                            this.connection.driver.options.type === \"spanner\"\n                        ) {\n                            // unfortunately sqlite does not support DEFAULT expression in INSERT queries\n                            if (\n                                column.default !== undefined &&\n                                column.default !== null\n                            ) {\n                                // try to use default defined in the column\n                                expression +=\n                                    this.connection.driver.normalizeDefault(\n                                        column,\n                                    )\n                            } else {\n                                expression += \"NULL\" // otherwise simply use NULL and pray if column is nullable\n                            }\n                        } else {\n                            expression += \"DEFAULT\"\n                        }\n                    } else if (\n                        value === null &&\n                        this.connection.driver.options.type === \"spanner\"\n                    ) {\n                        expression += \"NULL\"\n\n                        // support for SQL expressions in queries\n                    } else if (typeof value === \"function\") {\n                        expression += value()\n\n                        // just any other regular value\n                    } else {\n                        if (this.connection.driver.options.type === \"mssql\")\n                            value = (\n                                this.connection.driver as SqlServerDriver\n                            ).parametrizeValue(column, value)\n\n                        // we need to store array values in a special class to make sure parameter replacement will work correctly\n                        // if (value instanceof Array)\n                        //     value = new ArrayParameter(value);\n\n                        const paramName = this.createParameter(value)\n\n                        if (\n                            (DriverUtils.isMySQLFamily(\n                                this.connection.driver,\n                            ) ||\n                                this.connection.driver.options.type ===\n                                    \"aurora-mysql\") &&\n                            this.connection.driver.spatialTypes.indexOf(\n                                column.type,\n                            ) !== -1\n                        ) {\n                            const useLegacy = (\n                                this.connection.driver as\n                                    | MysqlDriver\n                                    | AuroraMysqlDriver\n                            ).options.legacySpatialSupport\n                            const geomFromText = useLegacy\n                                ? \"GeomFromText\"\n                                : \"ST_GeomFromText\"\n                            if (column.srid != null) {\n                                expression += `${geomFromText}(${paramName}, ${column.srid})`\n                            } else {\n                                expression += `${geomFromText}(${paramName})`\n                            }\n                        } else if (\n                            DriverUtils.isPostgresFamily(\n                                this.connection.driver,\n                            ) &&\n                            this.connection.driver.spatialTypes.indexOf(\n                                column.type,\n                            ) !== -1\n                        ) {\n                            if (column.srid != null) {\n                                expression += `ST_SetSRID(ST_GeomFromGeoJSON(${paramName}), ${column.srid})::${column.type}`\n                            } else {\n                                expression += `ST_GeomFromGeoJSON(${paramName})::${column.type}`\n                            }\n                        } else if (\n                            this.connection.driver.options.type === \"mssql\" &&\n                            this.connection.driver.spatialTypes.indexOf(\n                                column.type,\n                            ) !== -1\n                        ) {\n                            expression +=\n                                column.type +\n                                \"::STGeomFromText(\" +\n                                paramName +\n                                \", \" +\n                                (column.srid || \"0\") +\n                                \")\"\n                        } else {\n                            expression += paramName\n                        }\n                    }\n\n                    if (columnIndex === columns.length - 1) {\n                        if (valueSetIndex === valueSets.length - 1) {\n                            if (\n                                this.connection.driver.options.type ===\n                                    \"oracle\" &&\n                                valueSets.length > 1\n                            ) {\n                                expression += \" FROM DUAL \"\n                            } else if (\n                                this.connection.driver.options.type === \"sap\" &&\n                                valueSets.length > 1\n                            ) {\n                                expression += \" FROM dummy \"\n                            } else {\n                                expression += \")\"\n                            }\n                        } else {\n                            if (\n                                this.connection.driver.options.type ===\n                                    \"oracle\" &&\n                                valueSets.length > 1\n                            ) {\n                                expression += \" FROM DUAL UNION ALL \"\n                            } else if (\n                                this.connection.driver.options.type === \"sap\" &&\n                                valueSets.length > 1\n                            ) {\n                                expression += \" FROM dummy UNION ALL \"\n                            } else {\n                                expression += \"), \"\n                            }\n                        }\n                    } else {\n                        expression += \", \"\n                    }\n                })\n            })\n            if (expression === \"()\") return \"\"\n\n            return expression\n        } else {\n            // for tables without metadata\n            // get values needs to be inserted\n            let expression = \"\"\n\n            valueSets.forEach((valueSet, insertionIndex) => {\n                const columns = Object.keys(valueSet)\n                columns.forEach((columnName, columnIndex) => {\n                    if (columnIndex === 0) {\n                        expression += \"(\"\n                    }\n\n                    const value = valueSet[columnName]\n\n                    // support for SQL expressions in queries\n                    if (typeof value === \"function\") {\n                        expression += value()\n\n                        // if value for this column was not provided then insert default value\n                    } else if (value === undefined) {\n                        if (\n                            (this.connection.driver.options.type === \"oracle\" &&\n                                valueSets.length > 1) ||\n                            DriverUtils.isSQLiteFamily(\n                                this.connection.driver,\n                            ) ||\n                            this.connection.driver.options.type === \"sap\" ||\n                            this.connection.driver.options.type === \"spanner\"\n                        ) {\n                            expression += \"NULL\"\n                        } else {\n                            expression += \"DEFAULT\"\n                        }\n                    } else if (\n                        value === null &&\n                        this.connection.driver.options.type === \"spanner\"\n                    ) {\n                        // just any other regular value\n                    } else {\n                        expression += this.createParameter(value)\n                    }\n\n                    if (columnIndex === Object.keys(valueSet).length - 1) {\n                        if (insertionIndex === valueSets.length - 1) {\n                            expression += \")\"\n                        } else {\n                            expression += \"), \"\n                        }\n                    } else {\n                        expression += \", \"\n                    }\n                })\n            })\n            if (expression === \"()\") return \"\"\n            return expression\n        }\n    }\n\n    /**\n     * Gets array of values need to be inserted into the target table.\n     */\n    protected getValueSets(): ObjectLiteral[] {\n        if (Array.isArray(this.expressionMap.valuesSet))\n            return this.expressionMap.valuesSet\n\n        if (ObjectUtils.isObject(this.expressionMap.valuesSet))\n            return [this.expressionMap.valuesSet]\n\n        throw new InsertValuesMissingError()\n    }\n\n    /**\n     * Checks if column is an auto-generated primary key, but the current insertion specifies a value for it.\n     *\n     * @param column\n     */\n    protected isOverridingAutoIncrementBehavior(\n        column: ColumnMetadata,\n    ): boolean {\n        return (\n            column.isPrimary &&\n            column.isGenerated &&\n            column.generationStrategy === \"increment\" &&\n            this.getValueSets().some(\n                (valueSet) =>\n                    column.getEntityValue(valueSet) !== undefined &&\n                    column.getEntityValue(valueSet) !== null,\n            )\n        )\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}