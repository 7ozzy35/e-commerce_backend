{"ast":null,"code":"/**\n * Browser's implementation of the platform-specific tools.\n *\n * This file gonna replace PlatformTools for browser environment.\n * For node.js environment this class is not getting packaged.\n * Don't use methods of this class in the code, use PlatformTools methods instead.\n */\nimport { Buffer } from \"buffer\";\nexport class PlatformTools {\n  /**\n   * Gets global variable where global stuff can be stored.\n   */\n  static getGlobalVariable() {\n    if (typeof window !== \"undefined\") {\n      return window;\n    } else {\n      // NativeScript uses global, not window\n      return global;\n    }\n  }\n  /**\n   * Loads (\"require\"-s) given file or package.\n   * This operation only supports on node platform\n   */\n  static load(name) {\n    if (this.type === \"browser\") throw new Error(`This option/function is not supported in the browser environment. Failed operation: require(\"${name}\").`);\n    return \"\";\n  }\n  /**\n   * Normalizes given path. Does \"path.normalize\".\n   */\n  static pathNormalize(pathStr) {\n    if (this.type === \"browser\") throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.normalize(\"${pathStr}\").`);\n    return \"\";\n  }\n  /**\n   * Gets file extension. Does \"path.extname\".\n   */\n  static pathExtname(pathStr) {\n    if (this.type === \"browser\") throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.extname(\"${pathStr}\").`);\n    return \"\";\n  }\n  /**\n   * Resolved given path. Does \"path.resolve\".\n   */\n  static pathResolve(pathStr) {\n    if (this.type === \"browser\") throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.resolve(\"${pathStr}\").`);\n    return \"\";\n  }\n  /**\n   * Synchronously checks if file exist. Does \"fs.existsSync\".\n   */\n  static fileExist(pathStr) {\n    if (this.type === \"browser\") throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.existsSync(\"${pathStr}\").`);\n    return false;\n  }\n  static dotenv(pathStr) {\n    if (this.type === \"browser\") throw new Error(`This option/function is not supported in the browser environment. Failed operation: dotenv.config({ path: \"${pathStr}\" }).`);\n  }\n  /**\n   * Gets environment variable.\n   */\n  static getEnvVariable(name) {\n    // if (this.type === \"browser\")\n    //     throw new Error(`This option/function is not supported in the browser environment. Failed operation: process.env[\"${name}\"].`);\n    return undefined;\n  }\n  static readFileSync(filename) {\n    if (this.type === \"browser\") throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.readFileSync(\"${filename}\").`);\n    return null;\n  }\n  static appendFileSync(filename, data) {\n    if (this.type === \"browser\") throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.appendFileSync(\"${filename}\").`);\n  }\n  static writeFile(path, data) {\n    if (this.type === \"browser\") throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.writeFile(\"${path}\").`);\n    return Promise.reject(null);\n  }\n  /**\n   * Highlights sql string to be print in the console.\n   */\n  static highlightSql(sql) {\n    return sql;\n  }\n  /**\n   * Highlights json string to be print in the console.\n   */\n  static highlightJson(json) {\n    return json;\n  }\n  /**\n   * Logging functions needed by AdvancedConsoleLogger (but here without chalk)\n   */\n  static logInfo(prefix, info) {\n    console.info(prefix + \" \", info);\n  }\n  static logError(prefix, error) {\n    console.error(prefix + \" \", error);\n  }\n  static logWarn(prefix, warning) {\n    console.warn(prefix + \" \", warning);\n  }\n  static log(message) {\n    console.log(message);\n  }\n  static warn(message) {\n    return message;\n  }\n}\n/**\n * Type of the currently running platform.\n */\nPlatformTools.type = \"browser\";\n/**\n * These classes are needed for stream operations or\n * in the mongodb driver. Both aren't supported in the browser.\n */\nexport class EventEmitter {}\nexport class Readable {}\nexport class Writable {}\nif (typeof window !== \"undefined\") {\n  window.Buffer = Buffer;\n}\n// NativeScript uses global, not window\nif (typeof global !== \"undefined\" && typeof require !== \"undefined\") {\n  global.Buffer = require(\"buffer/\").Buffer;\n}","map":{"version":3,"names":["Buffer","PlatformTools","getGlobalVariable","window","global","load","name","type","Error","pathNormalize","pathStr","pathExtname","pathResolve","fileExist","dotenv","getEnvVariable","undefined","readFileSync","filename","appendFileSync","data","writeFile","path","Promise","reject","highlightSql","sql","highlightJson","json","logInfo","prefix","info","console","logError","error","logWarn","warning","warn","log","message","EventEmitter","Readable","Writable","require"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\platform\\BrowserPlatformTools.ts"],"sourcesContent":["/**\n * Browser's implementation of the platform-specific tools.\n *\n * This file gonna replace PlatformTools for browser environment.\n * For node.js environment this class is not getting packaged.\n * Don't use methods of this class in the code, use PlatformTools methods instead.\n */\nimport { Buffer } from \"buffer\";\n\nexport class PlatformTools {\n\n    /**\n     * Type of the currently running platform.\n     */\n    static type: \"browser\"|\"node\" = \"browser\";\n\n    /**\n     * Gets global variable where global stuff can be stored.\n     */\n    static getGlobalVariable(): any {\n        if (typeof window !== \"undefined\") {\n            return window\n        } else {\n            // NativeScript uses global, not window\n            return global\n        }\n    }\n\n    /**\n     * Loads (\"require\"-s) given file or package.\n     * This operation only supports on node platform\n     */\n    static load(name: string): any {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: require(\"${name}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Normalizes given path. Does \"path.normalize\".\n     */\n    static pathNormalize(pathStr: string): string {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.normalize(\"${pathStr}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Gets file extension. Does \"path.extname\".\n     */\n    static pathExtname(pathStr: string): string {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.extname(\"${pathStr}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Resolved given path. Does \"path.resolve\".\n     */\n    static pathResolve(pathStr: string): string {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.resolve(\"${pathStr}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Synchronously checks if file exist. Does \"fs.existsSync\".\n     */\n    static fileExist(pathStr: string): boolean {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.existsSync(\"${pathStr}\").`);\n\n        return false;\n    }\n\n    static dotenv(pathStr: string): void {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: dotenv.config({ path: \"${pathStr}\" }).`);\n    }\n\n    /**\n     * Gets environment variable.\n     */\n    static getEnvVariable(name: string): any {\n        // if (this.type === \"browser\")\n        //     throw new Error(`This option/function is not supported in the browser environment. Failed operation: process.env[\"${name}\"].`);\n        return undefined;\n    }\n\n    static readFileSync(filename: string): any {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.readFileSync(\"${filename}\").`);\n        return null;\n    }\n\n    static appendFileSync(filename: string, data: any) {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.appendFileSync(\"${filename}\").`);\n    }\n\n    static writeFile(path: string, data: any): Promise<void> {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.writeFile(\"${path}\").`);\n        return Promise.reject(null);\n    }\n\n    /**\n     * Highlights sql string to be print in the console.\n     */\n    static highlightSql(sql: string) {\n        return sql;\n    }\n\n    /**\n     * Highlights json string to be print in the console.\n     */\n    static highlightJson(json: string) {\n        return json;\n    }\n\n    /**\n     * Logging functions needed by AdvancedConsoleLogger (but here without chalk)\n     */\n    static logInfo(prefix: string, info: any) {\n        console.info(prefix + \" \", info);\n    }\n\n    static logError(prefix: string, error: any) {\n        console.error(prefix + \" \", error);\n    }\n\n    static logWarn(prefix: string, warning: any) {\n        console.warn(prefix + \" \", warning);\n    }\n\n    static log(message: string) {\n        console.log(message);\n    }\n\n    static warn(message: string) {\n        return message;\n    }\n}\n\n/**\n * These classes are needed for stream operations or\n * in the mongodb driver. Both aren't supported in the browser.\n */\nexport class EventEmitter {}\n\nexport class Readable {}\n\nexport class Writable {}\n\nexport interface ReadStream {}\n\n/**\n * This loads a polyfill to enable Buffers in the browser.\n */\ninterface Window {\n    Buffer: any;\n}\n\ndeclare var window: Window;\nif (typeof window !== \"undefined\") {\n    window.Buffer = Buffer;\n}\n// NativeScript uses global, not window\nif (typeof global !== \"undefined\" && typeof require !== \"undefined\") {\n    global.Buffer = require(\"buffer/\").Buffer;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}