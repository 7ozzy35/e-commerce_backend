{"ast":null,"code":"import { TypeORMError } from \"../error\";\n/**\n * Index metadata contains all information about table's index.\n */\nexport class IndexMetadata {\n  // ---------------------------------------------------------------------\n  // Constructor\n  // ---------------------------------------------------------------------\n  constructor(options) {\n    /**\n     * Indicates if this index must be unique.\n     */\n    this.isUnique = false;\n    /**\n     * The SPATIAL modifier indexes the entire column and does not allow indexed columns to contain NULL values.\n     * Works only in MySQL.\n     */\n    this.isSpatial = false;\n    /**\n     * The FULLTEXT modifier indexes the entire column and does not allow prefixing.\n     * Works only in MySQL.\n     */\n    this.isFulltext = false;\n    /**\n     * NULL_FILTERED indexes are particularly useful for indexing sparse columns, where most rows contain a NULL value.\n     * In these cases, the NULL_FILTERED index can be considerably smaller and more efficient to maintain than\n     * a normal index that includes NULL values.\n     *\n     * Works only in Spanner.\n     */\n    this.isNullFiltered = false;\n    /**\n     * Indicates if this index must synchronize with database index.\n     */\n    this.synchronize = true;\n    /**\n     * Indexed columns.\n     */\n    this.columns = [];\n    /**\n     * Map of column names with order set.\n     * Used only by MongoDB driver.\n     */\n    this.columnNamesWithOrderingMap = {};\n    this.entityMetadata = options.entityMetadata;\n    this.embeddedMetadata = options.embeddedMetadata;\n    if (options.columns) this.columns = options.columns;\n    if (options.args) {\n      this.target = options.args.target;\n      if (options.args.synchronize !== null && options.args.synchronize !== undefined) this.synchronize = options.args.synchronize;\n      this.isUnique = !!options.args.unique;\n      this.isSpatial = !!options.args.spatial;\n      this.isFulltext = !!options.args.fulltext;\n      this.isNullFiltered = !!options.args.nullFiltered;\n      this.parser = options.args.parser;\n      this.where = options.args.where;\n      this.isSparse = options.args.sparse;\n      this.isBackground = options.args.background;\n      this.isConcurrent = options.args.concurrent;\n      this.expireAfterSeconds = options.args.expireAfterSeconds;\n      this.givenName = options.args.name;\n      this.givenColumnNames = options.args.columns;\n    }\n  }\n  // ---------------------------------------------------------------------\n  // Public Build Methods\n  // ---------------------------------------------------------------------\n  /**\n   * Builds some depend index properties.\n   * Must be called after all entity metadata's properties map, columns and relations are built.\n   */\n  build(namingStrategy) {\n    if (this.synchronize === false) {\n      this.name = this.givenName;\n      return this;\n    }\n    const map = {};\n    // if columns already an array of string then simply return it\n    if (this.givenColumnNames) {\n      let columnPropertyPaths = [];\n      if (Array.isArray(this.givenColumnNames)) {\n        columnPropertyPaths = this.givenColumnNames.map(columnName => {\n          if (this.embeddedMetadata) return this.embeddedMetadata.propertyPath + \".\" + columnName;\n          return columnName.trim();\n        });\n        columnPropertyPaths.forEach(propertyPath => map[propertyPath] = 1);\n      } else {\n        // todo: indices in embeds are not implemented in this syntax. deprecate this syntax?\n        // if columns is a function that returns array of field names then execute it and get columns names from it\n        const columnsFnResult = this.givenColumnNames(this.entityMetadata.propertiesMap);\n        if (Array.isArray(columnsFnResult)) {\n          columnPropertyPaths = columnsFnResult.map(i => String(i));\n          columnPropertyPaths.forEach(name => map[name] = 1);\n        } else {\n          columnPropertyPaths = Object.keys(columnsFnResult).map(i => String(i));\n          Object.keys(columnsFnResult).forEach(columnName => map[columnName] = columnsFnResult[columnName]);\n        }\n      }\n      this.columns = columnPropertyPaths.map(propertyPath => {\n        const columnWithSameName = this.entityMetadata.columns.find(column => column.propertyPath === propertyPath);\n        if (columnWithSameName) {\n          return [columnWithSameName];\n        }\n        const relationWithSameName = this.entityMetadata.relations.find(relation => relation.isWithJoinColumn && relation.propertyName === propertyPath);\n        if (relationWithSameName) {\n          return relationWithSameName.joinColumns;\n        }\n        const indexName = this.givenName ? '\"' + this.givenName + '\" ' : \"\";\n        const entityName = this.entityMetadata.targetName;\n        throw new TypeORMError(`Index ${indexName}contains column that is missing in the entity (${entityName}): ` + propertyPath);\n      }).reduce((a, b) => a.concat(b));\n    }\n    this.columnNamesWithOrderingMap = Object.keys(map).reduce((updatedMap, key) => {\n      const column = this.entityMetadata.columns.find(column => column.propertyPath === key);\n      if (column) updatedMap[column.databasePath] = map[key];\n      return updatedMap;\n    }, {});\n    this.name = this.givenName ? this.givenName : namingStrategy.indexName(this.entityMetadata.tableName, this.columns.map(column => column.databaseName), this.where);\n    return this;\n  }\n}","map":{"version":3,"names":["TypeORMError","IndexMetadata","constructor","options","isUnique","isSpatial","isFulltext","isNullFiltered","synchronize","columns","columnNamesWithOrderingMap","entityMetadata","embeddedMetadata","args","target","undefined","unique","spatial","fulltext","nullFiltered","parser","where","isSparse","sparse","isBackground","background","isConcurrent","concurrent","expireAfterSeconds","givenName","name","givenColumnNames","build","namingStrategy","map","columnPropertyPaths","Array","isArray","columnName","propertyPath","trim","forEach","columnsFnResult","propertiesMap","i","String","Object","keys","columnWithSameName","find","column","relationWithSameName","relations","relation","isWithJoinColumn","propertyName","joinColumns","indexName","entityName","targetName","reduce","a","b","concat","updatedMap","key","databasePath","tableName","databaseName"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\metadata\\IndexMetadata.ts"],"sourcesContent":["import { EntityMetadata } from \"./EntityMetadata\"\nimport { IndexMetadataArgs } from \"../metadata-args/IndexMetadataArgs\"\nimport { NamingStrategyInterface } from \"../naming-strategy/NamingStrategyInterface\"\nimport { ColumnMetadata } from \"./ColumnMetadata\"\nimport { EmbeddedMetadata } from \"./EmbeddedMetadata\"\nimport { TypeORMError } from \"../error\"\n\n/**\n * Index metadata contains all information about table's index.\n */\nexport class IndexMetadata {\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the class to which this index is applied.\n     */\n    entityMetadata: EntityMetadata\n\n    /**\n     * Embedded metadata if this index was applied on embedded.\n     */\n    embeddedMetadata?: EmbeddedMetadata\n\n    /**\n     * Indicates if this index must be unique.\n     */\n    isUnique: boolean = false\n\n    /**\n     * The SPATIAL modifier indexes the entire column and does not allow indexed columns to contain NULL values.\n     * Works only in MySQL.\n     */\n    isSpatial: boolean = false\n\n    /**\n     * The FULLTEXT modifier indexes the entire column and does not allow prefixing.\n     * Works only in MySQL.\n     */\n    isFulltext: boolean = false\n\n    /**\n     * NULL_FILTERED indexes are particularly useful for indexing sparse columns, where most rows contain a NULL value.\n     * In these cases, the NULL_FILTERED index can be considerably smaller and more efficient to maintain than\n     * a normal index that includes NULL values.\n     *\n     * Works only in Spanner.\n     */\n    isNullFiltered: boolean = false\n\n    /**\n     * Fulltext parser.\n     * Works only in MySQL.\n     */\n    parser?: string\n\n    /**\n     * Indicates if this index must synchronize with database index.\n     */\n    synchronize: boolean = true\n\n    /**\n     * If true, the index only references documents with the specified field.\n     * These indexes use less space but behave differently in some situations (particularly sorts).\n     * This option is only supported for mongodb database.\n     */\n    isSparse?: boolean\n\n    /**\n     * Builds the index in the background so that building an index an does not block other database activities.\n     * This option is only supported for mongodb database.\n     */\n    isBackground?: boolean\n\n    /**\n     * Builds the index using the concurrently option.\n     * This options is only supported for postgres database.\n     */\n    isConcurrent?: boolean\n\n    /**\n     * Specifies a time to live, in seconds.\n     * This option is only supported for mongodb database.\n     */\n    expireAfterSeconds?: number\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target?: Function | string\n\n    /**\n     * Indexed columns.\n     */\n    columns: ColumnMetadata[] = []\n\n    /**\n     * User specified index name.\n     */\n    givenName?: string\n\n    /**\n     * User specified column names.\n     */\n    givenColumnNames?:\n        | ((object?: any) => any[] | { [key: string]: number })\n        | string[]\n\n    /**\n     * Final index name.\n     * If index name was given by a user then it stores normalized (by naming strategy) givenName.\n     * If index name was not given then its generated.\n     */\n    name: string\n\n    /**\n     * Index filter condition.\n     */\n    where?: string\n\n    /**\n     * Map of column names with order set.\n     * Used only by MongoDB driver.\n     */\n    columnNamesWithOrderingMap: { [key: string]: number } = {}\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata\n        embeddedMetadata?: EmbeddedMetadata\n        columns?: ColumnMetadata[]\n        args?: IndexMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata\n        this.embeddedMetadata = options.embeddedMetadata\n        if (options.columns) this.columns = options.columns\n\n        if (options.args) {\n            this.target = options.args.target\n            if (\n                options.args.synchronize !== null &&\n                options.args.synchronize !== undefined\n            )\n                this.synchronize = options.args.synchronize\n            this.isUnique = !!options.args.unique\n            this.isSpatial = !!options.args.spatial\n            this.isFulltext = !!options.args.fulltext\n            this.isNullFiltered = !!options.args.nullFiltered\n            this.parser = options.args.parser\n            this.where = options.args.where\n            this.isSparse = options.args.sparse\n            this.isBackground = options.args.background\n            this.isConcurrent = options.args.concurrent\n            this.expireAfterSeconds = options.args.expireAfterSeconds\n            this.givenName = options.args.name\n            this.givenColumnNames = options.args.columns\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend index properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    build(namingStrategy: NamingStrategyInterface): this {\n        if (this.synchronize === false) {\n            this.name = this.givenName!\n            return this\n        }\n\n        const map: { [key: string]: number } = {}\n\n        // if columns already an array of string then simply return it\n        if (this.givenColumnNames) {\n            let columnPropertyPaths: string[] = []\n            if (Array.isArray(this.givenColumnNames)) {\n                columnPropertyPaths = this.givenColumnNames.map(\n                    (columnName) => {\n                        if (this.embeddedMetadata)\n                            return (\n                                this.embeddedMetadata.propertyPath +\n                                \".\" +\n                                columnName\n                            )\n\n                        return columnName.trim()\n                    },\n                )\n                columnPropertyPaths.forEach(\n                    (propertyPath) => (map[propertyPath] = 1),\n                )\n            } else {\n                // todo: indices in embeds are not implemented in this syntax. deprecate this syntax?\n                // if columns is a function that returns array of field names then execute it and get columns names from it\n                const columnsFnResult = this.givenColumnNames(\n                    this.entityMetadata.propertiesMap,\n                )\n                if (Array.isArray(columnsFnResult)) {\n                    columnPropertyPaths = columnsFnResult.map((i: any) =>\n                        String(i),\n                    )\n                    columnPropertyPaths.forEach((name) => (map[name] = 1))\n                } else {\n                    columnPropertyPaths = Object.keys(columnsFnResult).map(\n                        (i: any) => String(i),\n                    )\n                    Object.keys(columnsFnResult).forEach(\n                        (columnName) =>\n                            (map[columnName] = columnsFnResult[columnName]),\n                    )\n                }\n            }\n\n            this.columns = columnPropertyPaths\n                .map((propertyPath) => {\n                    const columnWithSameName = this.entityMetadata.columns.find(\n                        (column) => column.propertyPath === propertyPath,\n                    )\n                    if (columnWithSameName) {\n                        return [columnWithSameName]\n                    }\n                    const relationWithSameName =\n                        this.entityMetadata.relations.find(\n                            (relation) =>\n                                relation.isWithJoinColumn &&\n                                relation.propertyName === propertyPath,\n                        )\n                    if (relationWithSameName) {\n                        return relationWithSameName.joinColumns\n                    }\n                    const indexName = this.givenName\n                        ? '\"' + this.givenName + '\" '\n                        : \"\"\n                    const entityName = this.entityMetadata.targetName\n                    throw new TypeORMError(\n                        `Index ${indexName}contains column that is missing in the entity (${entityName}): ` +\n                            propertyPath,\n                    )\n                })\n                .reduce((a, b) => a.concat(b))\n        }\n\n        this.columnNamesWithOrderingMap = Object.keys(map).reduce(\n            (updatedMap, key) => {\n                const column = this.entityMetadata.columns.find(\n                    (column) => column.propertyPath === key,\n                )\n                if (column) updatedMap[column.databasePath] = map[key]\n\n                return updatedMap\n            },\n            {} as { [key: string]: number },\n        )\n\n        this.name = this.givenName\n            ? this.givenName\n            : namingStrategy.indexName(\n                  this.entityMetadata.tableName,\n                  this.columns.map((column) => column.databaseName),\n                  this.where,\n              )\n        return this\n    }\n}\n"],"mappings":"AAKA,SAASA,YAAY,QAAQ,UAAU;AAEvC;;;AAGA,OAAM,MAAOC,aAAa;EAqHtB;EACA;EACA;EAEAC,YAAYC,OAKX;IA/GD;;;IAGA,KAAAC,QAAQ,GAAY,KAAK;IAEzB;;;;IAIA,KAAAC,SAAS,GAAY,KAAK;IAE1B;;;;IAIA,KAAAC,UAAU,GAAY,KAAK;IAE3B;;;;;;;IAOA,KAAAC,cAAc,GAAY,KAAK;IAQ/B;;;IAGA,KAAAC,WAAW,GAAY,IAAI;IAgC3B;;;IAGA,KAAAC,OAAO,GAAqB,EAAE;IA0B9B;;;;IAIA,KAAAC,0BAA0B,GAA8B,EAAE;IAYtD,IAAI,CAACC,cAAc,GAAGR,OAAO,CAACQ,cAAc;IAC5C,IAAI,CAACC,gBAAgB,GAAGT,OAAO,CAACS,gBAAgB;IAChD,IAAIT,OAAO,CAACM,OAAO,EAAE,IAAI,CAACA,OAAO,GAAGN,OAAO,CAACM,OAAO;IAEnD,IAAIN,OAAO,CAACU,IAAI,EAAE;MACd,IAAI,CAACC,MAAM,GAAGX,OAAO,CAACU,IAAI,CAACC,MAAM;MACjC,IACIX,OAAO,CAACU,IAAI,CAACL,WAAW,KAAK,IAAI,IACjCL,OAAO,CAACU,IAAI,CAACL,WAAW,KAAKO,SAAS,EAEtC,IAAI,CAACP,WAAW,GAAGL,OAAO,CAACU,IAAI,CAACL,WAAW;MAC/C,IAAI,CAACJ,QAAQ,GAAG,CAAC,CAACD,OAAO,CAACU,IAAI,CAACG,MAAM;MACrC,IAAI,CAACX,SAAS,GAAG,CAAC,CAACF,OAAO,CAACU,IAAI,CAACI,OAAO;MACvC,IAAI,CAACX,UAAU,GAAG,CAAC,CAACH,OAAO,CAACU,IAAI,CAACK,QAAQ;MACzC,IAAI,CAACX,cAAc,GAAG,CAAC,CAACJ,OAAO,CAACU,IAAI,CAACM,YAAY;MACjD,IAAI,CAACC,MAAM,GAAGjB,OAAO,CAACU,IAAI,CAACO,MAAM;MACjC,IAAI,CAACC,KAAK,GAAGlB,OAAO,CAACU,IAAI,CAACQ,KAAK;MAC/B,IAAI,CAACC,QAAQ,GAAGnB,OAAO,CAACU,IAAI,CAACU,MAAM;MACnC,IAAI,CAACC,YAAY,GAAGrB,OAAO,CAACU,IAAI,CAACY,UAAU;MAC3C,IAAI,CAACC,YAAY,GAAGvB,OAAO,CAACU,IAAI,CAACc,UAAU;MAC3C,IAAI,CAACC,kBAAkB,GAAGzB,OAAO,CAACU,IAAI,CAACe,kBAAkB;MACzD,IAAI,CAACC,SAAS,GAAG1B,OAAO,CAACU,IAAI,CAACiB,IAAI;MAClC,IAAI,CAACC,gBAAgB,GAAG5B,OAAO,CAACU,IAAI,CAACJ,OAAO;IAChD;EACJ;EAEA;EACA;EACA;EAEA;;;;EAIAuB,KAAKA,CAACC,cAAuC;IACzC,IAAI,IAAI,CAACzB,WAAW,KAAK,KAAK,EAAE;MAC5B,IAAI,CAACsB,IAAI,GAAG,IAAI,CAACD,SAAU;MAC3B,OAAO,IAAI;IACf;IAEA,MAAMK,GAAG,GAA8B,EAAE;IAEzC;IACA,IAAI,IAAI,CAACH,gBAAgB,EAAE;MACvB,IAAII,mBAAmB,GAAa,EAAE;MACtC,IAAIC,KAAK,CAACC,OAAO,CAAC,IAAI,CAACN,gBAAgB,CAAC,EAAE;QACtCI,mBAAmB,GAAG,IAAI,CAACJ,gBAAgB,CAACG,GAAG,CAC1CI,UAAU,IAAI;UACX,IAAI,IAAI,CAAC1B,gBAAgB,EACrB,OACI,IAAI,CAACA,gBAAgB,CAAC2B,YAAY,GAClC,GAAG,GACHD,UAAU;UAGlB,OAAOA,UAAU,CAACE,IAAI,EAAE;QAC5B,CAAC,CACJ;QACDL,mBAAmB,CAACM,OAAO,CACtBF,YAAY,IAAML,GAAG,CAACK,YAAY,CAAC,GAAG,CAAE,CAC5C;MACL,CAAC,MAAM;QACH;QACA;QACA,MAAMG,eAAe,GAAG,IAAI,CAACX,gBAAgB,CACzC,IAAI,CAACpB,cAAc,CAACgC,aAAa,CACpC;QACD,IAAIP,KAAK,CAACC,OAAO,CAACK,eAAe,CAAC,EAAE;UAChCP,mBAAmB,GAAGO,eAAe,CAACR,GAAG,CAAEU,CAAM,IAC7CC,MAAM,CAACD,CAAC,CAAC,CACZ;UACDT,mBAAmB,CAACM,OAAO,CAAEX,IAAI,IAAMI,GAAG,CAACJ,IAAI,CAAC,GAAG,CAAE,CAAC;QAC1D,CAAC,MAAM;UACHK,mBAAmB,GAAGW,MAAM,CAACC,IAAI,CAACL,eAAe,CAAC,CAACR,GAAG,CACjDU,CAAM,IAAKC,MAAM,CAACD,CAAC,CAAC,CACxB;UACDE,MAAM,CAACC,IAAI,CAACL,eAAe,CAAC,CAACD,OAAO,CAC/BH,UAAU,IACNJ,GAAG,CAACI,UAAU,CAAC,GAAGI,eAAe,CAACJ,UAAU,CAAE,CACtD;QACL;MACJ;MAEA,IAAI,CAAC7B,OAAO,GAAG0B,mBAAmB,CAC7BD,GAAG,CAAEK,YAAY,IAAI;QAClB,MAAMS,kBAAkB,GAAG,IAAI,CAACrC,cAAc,CAACF,OAAO,CAACwC,IAAI,CACtDC,MAAM,IAAKA,MAAM,CAACX,YAAY,KAAKA,YAAY,CACnD;QACD,IAAIS,kBAAkB,EAAE;UACpB,OAAO,CAACA,kBAAkB,CAAC;QAC/B;QACA,MAAMG,oBAAoB,GACtB,IAAI,CAACxC,cAAc,CAACyC,SAAS,CAACH,IAAI,CAC7BI,QAAQ,IACLA,QAAQ,CAACC,gBAAgB,IACzBD,QAAQ,CAACE,YAAY,KAAKhB,YAAY,CAC7C;QACL,IAAIY,oBAAoB,EAAE;UACtB,OAAOA,oBAAoB,CAACK,WAAW;QAC3C;QACA,MAAMC,SAAS,GAAG,IAAI,CAAC5B,SAAS,GAC1B,GAAG,GAAG,IAAI,CAACA,SAAS,GAAG,IAAI,GAC3B,EAAE;QACR,MAAM6B,UAAU,GAAG,IAAI,CAAC/C,cAAc,CAACgD,UAAU;QACjD,MAAM,IAAI3D,YAAY,CAClB,SAASyD,SAAS,kDAAkDC,UAAU,KAAK,GAC/EnB,YAAY,CACnB;MACL,CAAC,CAAC,CACDqB,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,MAAM,CAACD,CAAC,CAAC,CAAC;IACtC;IAEA,IAAI,CAACpD,0BAA0B,GAAGoC,MAAM,CAACC,IAAI,CAACb,GAAG,CAAC,CAAC0B,MAAM,CACrD,CAACI,UAAU,EAAEC,GAAG,KAAI;MAChB,MAAMf,MAAM,GAAG,IAAI,CAACvC,cAAc,CAACF,OAAO,CAACwC,IAAI,CAC1CC,MAAM,IAAKA,MAAM,CAACX,YAAY,KAAK0B,GAAG,CAC1C;MACD,IAAIf,MAAM,EAAEc,UAAU,CAACd,MAAM,CAACgB,YAAY,CAAC,GAAGhC,GAAG,CAAC+B,GAAG,CAAC;MAEtD,OAAOD,UAAU;IACrB,CAAC,EACD,EAA+B,CAClC;IAED,IAAI,CAAClC,IAAI,GAAG,IAAI,CAACD,SAAS,GACpB,IAAI,CAACA,SAAS,GACdI,cAAc,CAACwB,SAAS,CACpB,IAAI,CAAC9C,cAAc,CAACwD,SAAS,EAC7B,IAAI,CAAC1D,OAAO,CAACyB,GAAG,CAAEgB,MAAM,IAAKA,MAAM,CAACkB,YAAY,CAAC,EACjD,IAAI,CAAC/C,KAAK,CACb;IACP,OAAO,IAAI;EACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}