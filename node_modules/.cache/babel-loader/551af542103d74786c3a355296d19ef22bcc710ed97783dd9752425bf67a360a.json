{"ast":null,"code":"import { getMetadataArgsStorage } from \"../globals\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(nameOrFieldsOrOptions, maybeFieldsOrOptions, maybeOptions) {\n  // normalize parameters\n  const name = typeof nameOrFieldsOrOptions === \"string\" ? nameOrFieldsOrOptions : undefined;\n  const fields = typeof nameOrFieldsOrOptions === \"string\" ? maybeFieldsOrOptions : nameOrFieldsOrOptions;\n  let options = ObjectUtils.isObject(nameOrFieldsOrOptions) && !Array.isArray(nameOrFieldsOrOptions) ? nameOrFieldsOrOptions : maybeOptions;\n  if (!options) options = ObjectUtils.isObject(maybeFieldsOrOptions) && !Array.isArray(maybeFieldsOrOptions) ? maybeFieldsOrOptions : maybeOptions;\n  return function (clsOrObject, propertyName) {\n    getMetadataArgsStorage().indices.push({\n      target: propertyName ? clsOrObject.constructor : clsOrObject,\n      name: name,\n      columns: propertyName ? [propertyName] : fields,\n      synchronize: options && options.synchronize === false ? false : true,\n      where: options ? options.where : undefined,\n      unique: options && options.unique ? true : false,\n      spatial: options && options.spatial ? true : false,\n      fulltext: options && options.fulltext ? true : false,\n      nullFiltered: options && options.nullFiltered ? true : false,\n      parser: options ? options.parser : undefined,\n      sparse: options && options.sparse ? true : false,\n      background: options && options.background ? true : false,\n      concurrent: options && options.concurrent ? true : false,\n      expireAfterSeconds: options ? options.expireAfterSeconds : undefined\n    });\n  };\n}","map":{"version":3,"names":["getMetadataArgsStorage","ObjectUtils","Index","nameOrFieldsOrOptions","maybeFieldsOrOptions","maybeOptions","name","undefined","fields","options","isObject","Array","isArray","clsOrObject","propertyName","indices","push","target","constructor","columns","synchronize","where","unique","spatial","fulltext","nullFiltered","parser","sparse","background","concurrent","expireAfterSeconds"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\decorator\\Index.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../globals\"\nimport { IndexMetadataArgs } from \"../metadata-args/IndexMetadataArgs\"\nimport { IndexOptions } from \"./options/IndexOptions\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(\n    options?: IndexOptions,\n): ClassDecorator & PropertyDecorator\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(\n    name: string,\n    options?: IndexOptions,\n): ClassDecorator & PropertyDecorator\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(\n    name: string,\n    options: { synchronize: false },\n): ClassDecorator & PropertyDecorator\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(\n    name: string,\n    fields: string[],\n    options?: IndexOptions,\n): ClassDecorator & PropertyDecorator\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(\n    fields: string[],\n    options?: IndexOptions,\n): ClassDecorator & PropertyDecorator\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(\n    fields: (object?: any) => any[] | { [key: string]: number },\n    options?: IndexOptions,\n): ClassDecorator & PropertyDecorator\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(\n    name: string,\n    fields: (object?: any) => any[] | { [key: string]: number },\n    options?: IndexOptions,\n): ClassDecorator & PropertyDecorator\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(\n    nameOrFieldsOrOptions?:\n        | string\n        | string[]\n        | ((object: any) => any[] | { [key: string]: number })\n        | IndexOptions,\n    maybeFieldsOrOptions?:\n        | ((object?: any) => any[] | { [key: string]: number })\n        | IndexOptions\n        | string[]\n        | { synchronize: false },\n    maybeOptions?: IndexOptions,\n): ClassDecorator & PropertyDecorator {\n    // normalize parameters\n    const name =\n        typeof nameOrFieldsOrOptions === \"string\"\n            ? nameOrFieldsOrOptions\n            : undefined\n    const fields =\n        typeof nameOrFieldsOrOptions === \"string\"\n            ? <\n                  | ((object?: any) => any[] | { [key: string]: number })\n                  | string[]\n              >maybeFieldsOrOptions\n            : (nameOrFieldsOrOptions as string[])\n    let options =\n        ObjectUtils.isObject(nameOrFieldsOrOptions) &&\n        !Array.isArray(nameOrFieldsOrOptions)\n            ? (nameOrFieldsOrOptions as IndexOptions)\n            : maybeOptions\n    if (!options)\n        options =\n            ObjectUtils.isObject(maybeFieldsOrOptions) &&\n            !Array.isArray(maybeFieldsOrOptions)\n                ? (maybeFieldsOrOptions as IndexOptions)\n                : maybeOptions\n\n    return function (\n        clsOrObject: Function | Object,\n        propertyName?: string | symbol,\n    ) {\n        getMetadataArgsStorage().indices.push({\n            target: propertyName\n                ? clsOrObject.constructor\n                : (clsOrObject as Function),\n            name: name,\n            columns: propertyName ? [propertyName] : fields,\n            synchronize:\n                options &&\n                (options as { synchronize: false }).synchronize === false\n                    ? false\n                    : true,\n            where: options ? options.where : undefined,\n            unique: options && options.unique ? true : false,\n            spatial: options && options.spatial ? true : false,\n            fulltext: options && options.fulltext ? true : false,\n            nullFiltered: options && options.nullFiltered ? true : false,\n            parser: options ? options.parser : undefined,\n            sparse: options && options.sparse ? true : false,\n            background: options && options.background ? true : false,\n            concurrent: options && options.concurrent ? true : false,\n            expireAfterSeconds: options\n                ? options.expireAfterSeconds\n                : undefined,\n        } as IndexMetadataArgs)\n    }\n}\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,YAAY;AAGnD,SAASC,WAAW,QAAQ,qBAAqB;AAyEjD;;;;;AAKA,OAAM,SAAUC,KAAKA,CACjBC,qBAIkB,EAClBC,oBAI4B,EAC5BC,YAA2B;EAE3B;EACA,MAAMC,IAAI,GACN,OAAOH,qBAAqB,KAAK,QAAQ,GACnCA,qBAAqB,GACrBI,SAAS;EACnB,MAAMC,MAAM,GACR,OAAOL,qBAAqB,KAAK,QAAQ,GAIlCC,oBAAoB,GACpBD,qBAAkC;EAC7C,IAAIM,OAAO,GACPR,WAAW,CAACS,QAAQ,CAACP,qBAAqB,CAAC,IAC3C,CAACQ,KAAK,CAACC,OAAO,CAACT,qBAAqB,CAAC,GAC9BA,qBAAsC,GACvCE,YAAY;EACtB,IAAI,CAACI,OAAO,EACRA,OAAO,GACHR,WAAW,CAACS,QAAQ,CAACN,oBAAoB,CAAC,IAC1C,CAACO,KAAK,CAACC,OAAO,CAACR,oBAAoB,CAAC,GAC7BA,oBAAqC,GACtCC,YAAY;EAE1B,OAAO,UACHQ,WAA8B,EAC9BC,YAA8B;IAE9Bd,sBAAsB,EAAE,CAACe,OAAO,CAACC,IAAI,CAAC;MAClCC,MAAM,EAAEH,YAAY,GACdD,WAAW,CAACK,WAAW,GACtBL,WAAwB;MAC/BP,IAAI,EAAEA,IAAI;MACVa,OAAO,EAAEL,YAAY,GAAG,CAACA,YAAY,CAAC,GAAGN,MAAM;MAC/CY,WAAW,EACPX,OAAO,IACNA,OAAkC,CAACW,WAAW,KAAK,KAAK,GACnD,KAAK,GACL,IAAI;MACdC,KAAK,EAAEZ,OAAO,GAAGA,OAAO,CAACY,KAAK,GAAGd,SAAS;MAC1Ce,MAAM,EAAEb,OAAO,IAAIA,OAAO,CAACa,MAAM,GAAG,IAAI,GAAG,KAAK;MAChDC,OAAO,EAAEd,OAAO,IAAIA,OAAO,CAACc,OAAO,GAAG,IAAI,GAAG,KAAK;MAClDC,QAAQ,EAAEf,OAAO,IAAIA,OAAO,CAACe,QAAQ,GAAG,IAAI,GAAG,KAAK;MACpDC,YAAY,EAAEhB,OAAO,IAAIA,OAAO,CAACgB,YAAY,GAAG,IAAI,GAAG,KAAK;MAC5DC,MAAM,EAAEjB,OAAO,GAAGA,OAAO,CAACiB,MAAM,GAAGnB,SAAS;MAC5CoB,MAAM,EAAElB,OAAO,IAAIA,OAAO,CAACkB,MAAM,GAAG,IAAI,GAAG,KAAK;MAChDC,UAAU,EAAEnB,OAAO,IAAIA,OAAO,CAACmB,UAAU,GAAG,IAAI,GAAG,KAAK;MACxDC,UAAU,EAAEpB,OAAO,IAAIA,OAAO,CAACoB,UAAU,GAAG,IAAI,GAAG,KAAK;MACxDC,kBAAkB,EAAErB,OAAO,GACrBA,OAAO,CAACqB,kBAAkB,GAC1BvB;KACY,CAAC;EAC3B,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}