{"ast":null,"code":"import { CustomRepositoryDoesNotHaveEntityError } from \"../error/CustomRepositoryDoesNotHaveEntityError\";\nimport { getMetadataArgsStorage } from \"../globals\";\nimport { CustomRepositoryNotFoundError } from \"../error/CustomRepositoryNotFoundError\";\n/**\n * Provides abstract class for custom repositories that do not inherit from original orm Repository.\n * Contains all most-necessary methods to simplify code in the custom repository.\n * All methods are protected thus not exposed and it allows to create encapsulated custom repository.\n *\n * @deprecated use Repository.extend function to create a custom repository\n */\nexport class AbstractRepository {\n  // -------------------------------------------------------------------------\n  // Protected Accessors\n  // -------------------------------------------------------------------------\n  /**\n   * Gets the original ORM repository for the entity that is managed by this repository.\n   * If current repository does not manage any entity, then exception will be thrown.\n   */\n  get repository() {\n    const target = this.getCustomRepositoryTarget(this);\n    if (!target) throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\n    return this.manager.getRepository(target);\n  }\n  /**\n   * Gets the original ORM tree repository for the entity that is managed by this repository.\n   * If current repository does not manage any entity, then exception will be thrown.\n   */\n  get treeRepository() {\n    const target = this.getCustomRepositoryTarget(this);\n    if (!target) throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\n    return this.manager.getTreeRepository(target);\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates a new query builder for the repository's entity that can be used to build a SQL query.\n   * If current repository does not manage any entity, then exception will be thrown.\n   */\n  createQueryBuilder(alias) {\n    const target = this.getCustomRepositoryTarget(this.constructor);\n    if (!target) throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\n    return this.manager.getRepository(target).createQueryBuilder(alias);\n  }\n  /**\n   * Creates a new query builder for the given entity that can be used to build a SQL query.\n   */\n  createQueryBuilderFor(entity, alias) {\n    return this.getRepositoryFor(entity).createQueryBuilder(alias);\n  }\n  /**\n   * Gets the original ORM repository for the given entity class.\n   */\n  getRepositoryFor(entity) {\n    return this.manager.getRepository(entity);\n  }\n  /**\n   * Gets the original ORM tree repository for the given entity class.\n   */\n  getTreeRepositoryFor(entity) {\n    return this.manager.getTreeRepository(entity);\n  }\n  // -------------------------------------------------------------------------\n  // Private Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Gets custom repository's managed entity.\n   * If given custom repository does not manage any entity then undefined will be returned.\n   */\n  getCustomRepositoryTarget(customRepository) {\n    const entityRepositoryMetadataArgs = getMetadataArgsStorage().entityRepositories.find(repository => {\n      return repository.target === (typeof customRepository === \"function\" ? customRepository : customRepository.constructor);\n    });\n    if (!entityRepositoryMetadataArgs) throw new CustomRepositoryNotFoundError(customRepository);\n    return entityRepositoryMetadataArgs.entity;\n  }\n}","map":{"version":3,"names":["CustomRepositoryDoesNotHaveEntityError","getMetadataArgsStorage","CustomRepositoryNotFoundError","AbstractRepository","repository","target","getCustomRepositoryTarget","constructor","manager","getRepository","treeRepository","getTreeRepository","createQueryBuilder","alias","createQueryBuilderFor","entity","getRepositoryFor","getTreeRepositoryFor","customRepository","entityRepositoryMetadataArgs","entityRepositories","find"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\repository\\AbstractRepository.ts"],"sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { EntityManager } from \"../entity-manager/EntityManager\"\nimport { Repository } from \"./Repository\"\nimport { TreeRepository } from \"./TreeRepository\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport { ObjectType } from \"../common/ObjectType\"\nimport { CustomRepositoryDoesNotHaveEntityError } from \"../error/CustomRepositoryDoesNotHaveEntityError\"\nimport { getMetadataArgsStorage } from \"../globals\"\nimport { CustomRepositoryNotFoundError } from \"../error/CustomRepositoryNotFoundError\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\n\n/**\n * Provides abstract class for custom repositories that do not inherit from original orm Repository.\n * Contains all most-necessary methods to simplify code in the custom repository.\n * All methods are protected thus not exposed and it allows to create encapsulated custom repository.\n *\n * @deprecated use Repository.extend function to create a custom repository\n */\nexport class AbstractRepository<Entity extends ObjectLiteral> {\n    // -------------------------------------------------------------------------\n    // Protected Methods Set Dynamically\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets entity manager that allows to perform repository operations with any entity.\n     */\n    protected manager: EntityManager\n\n    // -------------------------------------------------------------------------\n    // Protected Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets the original ORM repository for the entity that is managed by this repository.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    protected get repository(): Repository<Entity> {\n        const target = this.getCustomRepositoryTarget(this as any)\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor)\n\n        return this.manager.getRepository<Entity>(target)\n    }\n\n    /**\n     * Gets the original ORM tree repository for the entity that is managed by this repository.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    protected get treeRepository(): TreeRepository<Entity> {\n        const target = this.getCustomRepositoryTarget(this as any)\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor)\n\n        return this.manager.getTreeRepository<Entity>(target)\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new query builder for the repository's entity that can be used to build a SQL query.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    protected createQueryBuilder(alias: string): SelectQueryBuilder<Entity> {\n        const target = this.getCustomRepositoryTarget(this.constructor)\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor)\n\n        return this.manager\n            .getRepository<Entity>(target)\n            .createQueryBuilder(alias)\n    }\n\n    /**\n     * Creates a new query builder for the given entity that can be used to build a SQL query.\n     */\n    protected createQueryBuilderFor<T extends ObjectLiteral>(\n        entity: ObjectType<T>,\n        alias: string,\n    ): SelectQueryBuilder<T> {\n        return this.getRepositoryFor(entity).createQueryBuilder(alias)\n    }\n\n    /**\n     * Gets the original ORM repository for the given entity class.\n     */\n    protected getRepositoryFor<T extends ObjectLiteral>(\n        entity: ObjectType<T>,\n    ): Repository<T> {\n        return this.manager.getRepository(entity)\n    }\n\n    /**\n     * Gets the original ORM tree repository for the given entity class.\n     */\n    protected getTreeRepositoryFor<T extends ObjectLiteral>(\n        entity: ObjectType<T>,\n    ): TreeRepository<T> {\n        return this.manager.getTreeRepository(entity)\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets custom repository's managed entity.\n     * If given custom repository does not manage any entity then undefined will be returned.\n     */\n    private getCustomRepositoryTarget(\n        customRepository: any,\n    ): EntityTarget<any> | undefined {\n        const entityRepositoryMetadataArgs =\n            getMetadataArgsStorage().entityRepositories.find((repository) => {\n                return (\n                    repository.target ===\n                    (typeof customRepository === \"function\"\n                        ? customRepository\n                        : (customRepository as any).constructor)\n                )\n            })\n        if (!entityRepositoryMetadataArgs)\n            throw new CustomRepositoryNotFoundError(customRepository)\n\n        return entityRepositoryMetadataArgs.entity\n    }\n}\n"],"mappings":"AAMA,SAASA,sCAAsC,QAAQ,iDAAiD;AACxG,SAASC,sBAAsB,QAAQ,YAAY;AACnD,SAASC,6BAA6B,QAAQ,wCAAwC;AAGtF;;;;;;;AAOA,OAAM,MAAOC,kBAAkB;EAU3B;EACA;EACA;EAEA;;;;EAIA,IAAcC,UAAUA,CAAA;IACpB,MAAMC,MAAM,GAAG,IAAI,CAACC,yBAAyB,CAAC,IAAW,CAAC;IAC1D,IAAI,CAACD,MAAM,EACP,MAAM,IAAIL,sCAAsC,CAAC,IAAI,CAACO,WAAW,CAAC;IAEtE,OAAO,IAAI,CAACC,OAAO,CAACC,aAAa,CAASJ,MAAM,CAAC;EACrD;EAEA;;;;EAIA,IAAcK,cAAcA,CAAA;IACxB,MAAML,MAAM,GAAG,IAAI,CAACC,yBAAyB,CAAC,IAAW,CAAC;IAC1D,IAAI,CAACD,MAAM,EACP,MAAM,IAAIL,sCAAsC,CAAC,IAAI,CAACO,WAAW,CAAC;IAEtE,OAAO,IAAI,CAACC,OAAO,CAACG,iBAAiB,CAASN,MAAM,CAAC;EACzD;EAEA;EACA;EACA;EAEA;;;;EAIUO,kBAAkBA,CAACC,KAAa;IACtC,MAAMR,MAAM,GAAG,IAAI,CAACC,yBAAyB,CAAC,IAAI,CAACC,WAAW,CAAC;IAC/D,IAAI,CAACF,MAAM,EACP,MAAM,IAAIL,sCAAsC,CAAC,IAAI,CAACO,WAAW,CAAC;IAEtE,OAAO,IAAI,CAACC,OAAO,CACdC,aAAa,CAASJ,MAAM,CAAC,CAC7BO,kBAAkB,CAACC,KAAK,CAAC;EAClC;EAEA;;;EAGUC,qBAAqBA,CAC3BC,MAAqB,EACrBF,KAAa;IAEb,OAAO,IAAI,CAACG,gBAAgB,CAACD,MAAM,CAAC,CAACH,kBAAkB,CAACC,KAAK,CAAC;EAClE;EAEA;;;EAGUG,gBAAgBA,CACtBD,MAAqB;IAErB,OAAO,IAAI,CAACP,OAAO,CAACC,aAAa,CAACM,MAAM,CAAC;EAC7C;EAEA;;;EAGUE,oBAAoBA,CAC1BF,MAAqB;IAErB,OAAO,IAAI,CAACP,OAAO,CAACG,iBAAiB,CAACI,MAAM,CAAC;EACjD;EAEA;EACA;EACA;EAEA;;;;EAIQT,yBAAyBA,CAC7BY,gBAAqB;IAErB,MAAMC,4BAA4B,GAC9BlB,sBAAsB,EAAE,CAACmB,kBAAkB,CAACC,IAAI,CAAEjB,UAAU,IAAI;MAC5D,OACIA,UAAU,CAACC,MAAM,MAChB,OAAOa,gBAAgB,KAAK,UAAU,GACjCA,gBAAgB,GACfA,gBAAwB,CAACX,WAAW,CAAC;IAEpD,CAAC,CAAC;IACN,IAAI,CAACY,4BAA4B,EAC7B,MAAM,IAAIjB,6BAA6B,CAACgB,gBAAgB,CAAC;IAE7D,OAAOC,4BAA4B,CAACJ,MAAM;EAC9C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}