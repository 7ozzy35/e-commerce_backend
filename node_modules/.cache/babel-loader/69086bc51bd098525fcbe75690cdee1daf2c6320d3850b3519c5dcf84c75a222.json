{"ast":null,"code":"import { OrmUtils } from \"../util/OrmUtils\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\n/**\n * Subject is a subject of persistence.\n * It holds information about each entity that needs to be persisted:\n * - what entity should be persisted\n * - what is database representation of the persisted entity\n * - what entity metadata of the persisted entity\n * - what is allowed to with persisted entity (insert/update/remove)\n *\n * Having this collection of subjects we can perform database queries.\n */\nexport class Subject {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(options) {\n    this[\"@instanceof\"] = Symbol.for(\"Subject\");\n    /**\n     * Subject identifier.\n     * This identifier is not limited to table entity primary columns.\n     * This can be entity id or ids as well as some unique entity properties, like name or title.\n     * Insert / Update / Remove operation will be executed by a given identifier.\n     */\n    this.identifier = undefined;\n    /**\n     * Copy of entity but with relational ids fulfilled.\n     */\n    this.entityWithFulfilledIds = undefined;\n    /**\n     * Indicates if database entity was loaded.\n     * No matter if it was found or not, it indicates the fact of loading.\n     */\n    this.databaseEntityLoaded = false;\n    /**\n     * Changes needs to be applied in the database for the given subject.\n     */\n    this.changeMaps = [];\n    /**\n     * Indicates if this subject can be inserted into the database.\n     * This means that this subject either is newly persisted, either can be inserted by cascades.\n     */\n    this.canBeInserted = false;\n    /**\n     * Indicates if this subject can be updated in the database.\n     * This means that this subject either was persisted, either can be updated by cascades.\n     */\n    this.canBeUpdated = false;\n    /**\n     * Indicates if this subject MUST be removed from the database.\n     * This means that this subject either was removed, either was removed by cascades.\n     */\n    this.mustBeRemoved = false;\n    /**\n     * Indicates if this subject can be soft-removed from the database.\n     * This means that this subject either was soft-removed, either was soft-removed by cascades.\n     */\n    this.canBeSoftRemoved = false;\n    /**\n     * Indicates if this subject can be recovered from the database.\n     * This means that this subject either was recovered, either was recovered by cascades.\n     */\n    this.canBeRecovered = false;\n    /**\n     * Relations updated by the change maps.\n     */\n    this.updatedRelationMaps = [];\n    /**\n     * List of updated columns\n     */\n    this.diffColumns = [];\n    /**\n     * List of updated relations\n     */\n    this.diffRelations = [];\n    this.metadata = options.metadata;\n    this.entity = options.entity;\n    this.parentSubject = options.parentSubject;\n    if (options.canBeInserted !== undefined) this.canBeInserted = options.canBeInserted;\n    if (options.canBeUpdated !== undefined) this.canBeUpdated = options.canBeUpdated;\n    if (options.mustBeRemoved !== undefined) this.mustBeRemoved = options.mustBeRemoved;\n    if (options.canBeSoftRemoved !== undefined) this.canBeSoftRemoved = options.canBeSoftRemoved;\n    if (options.canBeRecovered !== undefined) this.canBeRecovered = options.canBeRecovered;\n    if (options.identifier !== undefined) this.identifier = options.identifier;\n    if (options.changeMaps !== undefined) this.changeMaps.push(...options.changeMaps);\n    this.recompute();\n  }\n  // -------------------------------------------------------------------------\n  // Accessors\n  // -------------------------------------------------------------------------\n  /**\n   * Checks if this subject must be inserted into the database.\n   * Subject can be inserted into the database if it is allowed to be inserted (explicitly persisted or by cascades)\n   * and if it does not have database entity set.\n   */\n  get mustBeInserted() {\n    return this.canBeInserted && !this.databaseEntity;\n  }\n  /**\n   * Checks if this subject must be updated into the database.\n   * Subject can be updated in the database if it is allowed to be updated (explicitly persisted or by cascades)\n   * and if it does have differentiated columns or relations.\n   */\n  get mustBeUpdated() {\n    return this.canBeUpdated && this.identifier && (this.databaseEntityLoaded === false || this.databaseEntityLoaded && this.databaseEntity) &&\n    // ((this.entity && this.databaseEntity) || (!this.entity && !this.databaseEntity)) &&\n    // ensure there are one or more changes for updatable columns\n    this.changeMaps.some(change => !change.column || change.column.isUpdate);\n  }\n  /**\n   * Checks if this subject must be soft-removed into the database.\n   * Subject can be updated in the database if it is allowed to be soft-removed (explicitly persisted or by cascades)\n   * and if it does have differentiated columns or relations.\n   */\n  get mustBeSoftRemoved() {\n    return this.canBeSoftRemoved && this.identifier && (this.databaseEntityLoaded === false || this.databaseEntityLoaded && this.databaseEntity);\n  }\n  /**\n   * Checks if this subject must be recovered into the database.\n   * Subject can be updated in the database if it is allowed to be recovered (explicitly persisted or by cascades)\n   * and if it does have differentiated columns or relations.\n   */\n  get mustBeRecovered() {\n    return this.canBeRecovered && this.identifier && (this.databaseEntityLoaded === false || this.databaseEntityLoaded && this.databaseEntity);\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates a value set needs to be inserted / updated in the database.\n   * Value set is based on the entity and change maps of the subject.\n   * Important note: this method pops data from this subject's change maps.\n   */\n  createValueSetAndPopChangeMap() {\n    const changeMapsWithoutValues = [];\n    const changeSet = this.changeMaps.reduce((updateMap, changeMap) => {\n      let value = changeMap.value;\n      if (InstanceChecker.isSubject(value)) {\n        // referenced columns can refer on values both which were just inserted and which were present in the model\n        // if entity was just inserted valueSets must contain all values from the entity and values just inserted in the database\n        // so, here we check if we have a value set then we simply use it as value to get our reference column values\n        // otherwise simply use an entity which cannot be just inserted at the moment and have all necessary data\n        value = value.insertedValueSet ? value.insertedValueSet : value.entity;\n      }\n      // value = changeMap.valueFactory ? changeMap.valueFactory(value) : changeMap.column.createValueMap(value);\n      let valueMap;\n      if (this.metadata.isJunction && changeMap.column) {\n        valueMap = changeMap.column.createValueMap(changeMap.column.referencedColumn.getEntityValue(value));\n      } else if (changeMap.column) {\n        valueMap = changeMap.column.createValueMap(value);\n      } else if (changeMap.relation) {\n        // value can be a related object, for example: post.question = { id: 1 }\n        // or value can be a null or direct relation id, e.g. post.question = 1\n        // if its a direction relation id then we just set it to the valueMap,\n        // however if its an object then we need to extract its relation id map and set it to the valueMap\n        if (ObjectUtils.isObject(value) && !Buffer.isBuffer(value)) {\n          // get relation id, e.g. referenced column name and its value,\n          // for example: { id: 1 } which then will be set to relation, e.g. post.category = { id: 1 }\n          const relationId = changeMap.relation.getRelationIdMap(value);\n          // but relation id can be empty, for example in the case when you insert a new post with category\n          // and both post and category are newly inserted objects (by cascades) and in this case category will not have id\n          // this means we need to insert post without question id and update post's questionId once question be inserted\n          // that's why we create a new changeMap operation for future updation of the post entity\n          if (relationId === undefined) {\n            changeMapsWithoutValues.push(changeMap);\n            this.canBeUpdated = true;\n            return updateMap;\n          }\n          valueMap = changeMap.relation.createValueMap(relationId);\n          this.updatedRelationMaps.push({\n            relation: changeMap.relation,\n            value: relationId\n          });\n        } else {\n          // value can be \"null\" or direct relation id here\n          valueMap = changeMap.relation.createValueMap(value);\n          this.updatedRelationMaps.push({\n            relation: changeMap.relation,\n            value: value\n          });\n        }\n      }\n      OrmUtils.mergeDeep(updateMap, valueMap);\n      return updateMap;\n    }, {});\n    this.changeMaps = changeMapsWithoutValues;\n    return changeSet;\n  }\n  /**\n   * Recomputes entityWithFulfilledIds and identifier when entity changes.\n   */\n  recompute() {\n    if (this.entity) {\n      this.entityWithFulfilledIds = Object.assign({}, this.entity);\n      if (this.parentSubject) {\n        this.metadata.primaryColumns.forEach(primaryColumn => {\n          if (primaryColumn.relationMetadata && primaryColumn.relationMetadata.inverseEntityMetadata === this.parentSubject.metadata) {\n            const value = primaryColumn.referencedColumn.getEntityValue(this.parentSubject.entity);\n            primaryColumn.setEntityValue(this.entityWithFulfilledIds, value);\n          }\n        });\n      }\n      this.identifier = this.metadata.getEntityIdMap(this.entityWithFulfilledIds);\n    } else if (this.databaseEntity) {\n      this.identifier = this.metadata.getEntityIdMap(this.databaseEntity);\n    }\n  }\n}","map":{"version":3,"names":["OrmUtils","ObjectUtils","InstanceChecker","Subject","constructor","options","Symbol","for","identifier","undefined","entityWithFulfilledIds","databaseEntityLoaded","changeMaps","canBeInserted","canBeUpdated","mustBeRemoved","canBeSoftRemoved","canBeRecovered","updatedRelationMaps","diffColumns","diffRelations","metadata","entity","parentSubject","push","recompute","mustBeInserted","databaseEntity","mustBeUpdated","some","change","column","isUpdate","mustBeSoftRemoved","mustBeRecovered","createValueSetAndPopChangeMap","changeMapsWithoutValues","changeSet","reduce","updateMap","changeMap","value","isSubject","insertedValueSet","valueMap","isJunction","createValueMap","referencedColumn","getEntityValue","relation","isObject","Buffer","isBuffer","relationId","getRelationIdMap","mergeDeep","Object","assign","primaryColumns","forEach","primaryColumn","relationMetadata","inverseEntityMetadata","setEntityValue","getEntityIdMap"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\persistence\\Subject.ts"],"sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { SubjectChangeMap } from \"./SubjectChangeMap\"\nimport { OrmUtils } from \"../util/OrmUtils\"\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\n\n/**\n * Subject is a subject of persistence.\n * It holds information about each entity that needs to be persisted:\n * - what entity should be persisted\n * - what is database representation of the persisted entity\n * - what entity metadata of the persisted entity\n * - what is allowed to with persisted entity (insert/update/remove)\n *\n * Having this collection of subjects we can perform database queries.\n */\nexport class Subject {\n    readonly \"@instanceof\" = Symbol.for(\"Subject\")\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the subject entity.\n     */\n    metadata: EntityMetadata\n\n    /**\n     * Subject identifier.\n     * This identifier is not limited to table entity primary columns.\n     * This can be entity id or ids as well as some unique entity properties, like name or title.\n     * Insert / Update / Remove operation will be executed by a given identifier.\n     */\n    identifier: ObjectLiteral | undefined = undefined\n\n    /**\n     * Copy of entity but with relational ids fulfilled.\n     */\n    entityWithFulfilledIds: ObjectLiteral | undefined = undefined\n\n    /**\n     * If subject was created by cascades this property will contain subject\n     * from where this subject was created.\n     */\n    parentSubject?: Subject\n\n    /**\n     * Gets entity sent to the persistence (e.g. changed entity).\n     * If entity is not set then this subject is created only for the entity loaded from the database,\n     * or this subject is used for the junction operation (junction operations are relying only on identifier).\n     */\n    entity?: ObjectLiteral\n\n    /**\n     * Database entity.\n     * THIS IS NOT RAW ENTITY DATA, its a real entity.\n     */\n    databaseEntity?: ObjectLiteral\n\n    /**\n     * Indicates if database entity was loaded.\n     * No matter if it was found or not, it indicates the fact of loading.\n     */\n    databaseEntityLoaded: boolean = false\n\n    /**\n     * Changes needs to be applied in the database for the given subject.\n     */\n    changeMaps: SubjectChangeMap[] = []\n\n    /**\n     * Generated values returned by a database (for example generated id or default values).\n     * Used in insert and update operations.\n     * Has entity-like structure (not just column database name and values).\n     */\n    generatedMap?: ObjectLiteral\n\n    /**\n     * Inserted values with updated values of special and default columns.\n     * Has entity-like structure (not just column database name and values).\n     */\n    insertedValueSet?: ObjectLiteral\n\n    /**\n     * Indicates if this subject can be inserted into the database.\n     * This means that this subject either is newly persisted, either can be inserted by cascades.\n     */\n    canBeInserted: boolean = false\n\n    /**\n     * Indicates if this subject can be updated in the database.\n     * This means that this subject either was persisted, either can be updated by cascades.\n     */\n    canBeUpdated: boolean = false\n\n    /**\n     * Indicates if this subject MUST be removed from the database.\n     * This means that this subject either was removed, either was removed by cascades.\n     */\n    mustBeRemoved: boolean = false\n\n    /**\n     * Indicates if this subject can be soft-removed from the database.\n     * This means that this subject either was soft-removed, either was soft-removed by cascades.\n     */\n    canBeSoftRemoved: boolean = false\n\n    /**\n     * Indicates if this subject can be recovered from the database.\n     * This means that this subject either was recovered, either was recovered by cascades.\n     */\n    canBeRecovered: boolean = false\n\n    /**\n     * Relations updated by the change maps.\n     */\n    updatedRelationMaps: {\n        relation: RelationMetadata\n        value: ObjectLiteral\n    }[] = []\n\n    /**\n     * List of updated columns\n     */\n    diffColumns: ColumnMetadata[] = []\n\n    /**\n     * List of updated relations\n     */\n    diffRelations: RelationMetadata[] = []\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: {\n        metadata: EntityMetadata\n        parentSubject?: Subject\n        entity?: ObjectLiteral\n        canBeInserted?: boolean\n        canBeUpdated?: boolean\n        mustBeRemoved?: boolean\n        canBeSoftRemoved?: boolean\n        canBeRecovered?: boolean\n        identifier?: ObjectLiteral\n        changeMaps?: SubjectChangeMap[]\n    }) {\n        this.metadata = options.metadata\n        this.entity = options.entity\n        this.parentSubject = options.parentSubject\n        if (options.canBeInserted !== undefined)\n            this.canBeInserted = options.canBeInserted\n        if (options.canBeUpdated !== undefined)\n            this.canBeUpdated = options.canBeUpdated\n        if (options.mustBeRemoved !== undefined)\n            this.mustBeRemoved = options.mustBeRemoved\n        if (options.canBeSoftRemoved !== undefined)\n            this.canBeSoftRemoved = options.canBeSoftRemoved\n        if (options.canBeRecovered !== undefined)\n            this.canBeRecovered = options.canBeRecovered\n        if (options.identifier !== undefined)\n            this.identifier = options.identifier\n        if (options.changeMaps !== undefined)\n            this.changeMaps.push(...options.changeMaps)\n\n        this.recompute()\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if this subject must be inserted into the database.\n     * Subject can be inserted into the database if it is allowed to be inserted (explicitly persisted or by cascades)\n     * and if it does not have database entity set.\n     */\n    get mustBeInserted() {\n        return this.canBeInserted && !this.databaseEntity\n    }\n\n    /**\n     * Checks if this subject must be updated into the database.\n     * Subject can be updated in the database if it is allowed to be updated (explicitly persisted or by cascades)\n     * and if it does have differentiated columns or relations.\n     */\n    get mustBeUpdated() {\n        return (\n            this.canBeUpdated &&\n            this.identifier &&\n            (this.databaseEntityLoaded === false ||\n                (this.databaseEntityLoaded && this.databaseEntity)) &&\n            // ((this.entity && this.databaseEntity) || (!this.entity && !this.databaseEntity)) &&\n            // ensure there are one or more changes for updatable columns\n            this.changeMaps.some(\n                (change) => !change.column || change.column.isUpdate,\n            )\n        )\n    }\n\n    /**\n     * Checks if this subject must be soft-removed into the database.\n     * Subject can be updated in the database if it is allowed to be soft-removed (explicitly persisted or by cascades)\n     * and if it does have differentiated columns or relations.\n     */\n    get mustBeSoftRemoved() {\n        return (\n            this.canBeSoftRemoved &&\n            this.identifier &&\n            (this.databaseEntityLoaded === false ||\n                (this.databaseEntityLoaded && this.databaseEntity))\n        )\n    }\n\n    /**\n     * Checks if this subject must be recovered into the database.\n     * Subject can be updated in the database if it is allowed to be recovered (explicitly persisted or by cascades)\n     * and if it does have differentiated columns or relations.\n     */\n    get mustBeRecovered() {\n        return (\n            this.canBeRecovered &&\n            this.identifier &&\n            (this.databaseEntityLoaded === false ||\n                (this.databaseEntityLoaded && this.databaseEntity))\n        )\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a value set needs to be inserted / updated in the database.\n     * Value set is based on the entity and change maps of the subject.\n     * Important note: this method pops data from this subject's change maps.\n     */\n    createValueSetAndPopChangeMap(): ObjectLiteral {\n        const changeMapsWithoutValues: SubjectChangeMap[] = []\n        const changeSet = this.changeMaps.reduce((updateMap, changeMap) => {\n            let value = changeMap.value\n            if (InstanceChecker.isSubject(value)) {\n                // referenced columns can refer on values both which were just inserted and which were present in the model\n                // if entity was just inserted valueSets must contain all values from the entity and values just inserted in the database\n                // so, here we check if we have a value set then we simply use it as value to get our reference column values\n                // otherwise simply use an entity which cannot be just inserted at the moment and have all necessary data\n                value = value.insertedValueSet\n                    ? value.insertedValueSet\n                    : value.entity\n            }\n            // value = changeMap.valueFactory ? changeMap.valueFactory(value) : changeMap.column.createValueMap(value);\n\n            let valueMap: ObjectLiteral | undefined\n            if (this.metadata.isJunction && changeMap.column) {\n                valueMap = changeMap.column.createValueMap(\n                    changeMap.column.referencedColumn!.getEntityValue(value),\n                )\n            } else if (changeMap.column) {\n                valueMap = changeMap.column.createValueMap(value)\n            } else if (changeMap.relation) {\n                // value can be a related object, for example: post.question = { id: 1 }\n                // or value can be a null or direct relation id, e.g. post.question = 1\n                // if its a direction relation id then we just set it to the valueMap,\n                // however if its an object then we need to extract its relation id map and set it to the valueMap\n                if (ObjectUtils.isObject(value) && !Buffer.isBuffer(value)) {\n                    // get relation id, e.g. referenced column name and its value,\n                    // for example: { id: 1 } which then will be set to relation, e.g. post.category = { id: 1 }\n                    const relationId =\n                        changeMap.relation!.getRelationIdMap(value)\n\n                    // but relation id can be empty, for example in the case when you insert a new post with category\n                    // and both post and category are newly inserted objects (by cascades) and in this case category will not have id\n                    // this means we need to insert post without question id and update post's questionId once question be inserted\n                    // that's why we create a new changeMap operation for future updation of the post entity\n                    if (relationId === undefined) {\n                        changeMapsWithoutValues.push(changeMap)\n                        this.canBeUpdated = true\n                        return updateMap\n                    }\n                    valueMap = changeMap.relation!.createValueMap(relationId)\n                    this.updatedRelationMaps.push({\n                        relation: changeMap.relation,\n                        value: relationId,\n                    })\n                } else {\n                    // value can be \"null\" or direct relation id here\n                    valueMap = changeMap.relation!.createValueMap(value)\n                    this.updatedRelationMaps.push({\n                        relation: changeMap.relation,\n                        value: value,\n                    })\n                }\n            }\n\n            OrmUtils.mergeDeep(updateMap, valueMap)\n            return updateMap\n        }, {} as ObjectLiteral)\n        this.changeMaps = changeMapsWithoutValues\n        return changeSet\n    }\n\n    /**\n     * Recomputes entityWithFulfilledIds and identifier when entity changes.\n     */\n    recompute(): void {\n        if (this.entity) {\n            this.entityWithFulfilledIds = Object.assign({}, this.entity)\n            if (this.parentSubject) {\n                this.metadata.primaryColumns.forEach((primaryColumn) => {\n                    if (\n                        primaryColumn.relationMetadata &&\n                        primaryColumn.relationMetadata.inverseEntityMetadata ===\n                            this.parentSubject!.metadata\n                    ) {\n                        const value =\n                            primaryColumn.referencedColumn!.getEntityValue(\n                                this.parentSubject!.entity!,\n                            )\n                        primaryColumn.setEntityValue(\n                            this.entityWithFulfilledIds!,\n                            value,\n                        )\n                    }\n                })\n            }\n            this.identifier = this.metadata.getEntityIdMap(\n                this.entityWithFulfilledIds,\n            )\n        } else if (this.databaseEntity) {\n            this.identifier = this.metadata.getEntityIdMap(this.databaseEntity)\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}