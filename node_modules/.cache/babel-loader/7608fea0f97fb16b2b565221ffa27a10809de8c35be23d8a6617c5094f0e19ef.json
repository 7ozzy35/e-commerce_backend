{"ast":null,"code":"import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { CapacitorQueryRunner } from \"./CapacitorQueryRunner\";\nimport { DriverPackageNotInstalledError } from \"../../error\";\nexport class CapacitorDriver extends AbstractSqliteDriver {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connection) {\n    super(connection);\n    this.database = this.options.database;\n    this.driver = this.options.driver;\n    // load sqlite package\n    this.sqlite = this.options.driver;\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Performs connection to the database.\n   */\n  async connect() {\n    this.databaseConnection = this.createDatabaseConnection();\n    await this.databaseConnection;\n  }\n  /**\n   * Closes connection with database.\n   */\n  async disconnect() {\n    this.queryRunner = undefined;\n    const databaseConnection = await this.databaseConnection;\n    return databaseConnection.close().then(() => {\n      this.databaseConnection = undefined;\n    });\n  }\n  /**\n   * Creates a query runner used to execute database queries.\n   */\n  createQueryRunner(mode) {\n    if (!this.queryRunner) this.queryRunner = new CapacitorQueryRunner(this);\n    return this.queryRunner;\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates connection with the database.\n   */\n  async createDatabaseConnection() {\n    const databaseMode = this.options.mode || \"no-encryption\";\n    const isDatabaseEncryted = databaseMode !== \"no-encryption\";\n    const databaseVersion = typeof this.options.version === \"undefined\" ? 1 : this.options.version;\n    const connection = await this.sqlite.createConnection(this.options.database, isDatabaseEncryted, databaseMode, databaseVersion);\n    await connection.open();\n    // we need to enable foreign keys in sqlite to make sure all foreign key related features\n    // working properly. this also makes onDelete to work with sqlite.\n    await connection.run(`PRAGMA foreign_keys = ON`);\n    if (this.options.journalMode && [\"DELETE\", \"TRUNCATE\", \"PERSIST\", \"MEMORY\", \"WAL\", \"OFF\"].indexOf(this.options.journalMode) !== -1) {\n      await connection.run(`PRAGMA journal_mode = ${this.options.journalMode}`);\n    }\n    return connection;\n  }\n  loadDependencies() {\n    this.sqlite = this.driver;\n    if (!this.driver) {\n      throw new DriverPackageNotInstalledError(\"Capacitor\", \"@capacitor-community/sqlite\");\n    }\n  }\n}","map":{"version":3,"names":["AbstractSqliteDriver","CapacitorQueryRunner","DriverPackageNotInstalledError","CapacitorDriver","constructor","connection","database","options","driver","sqlite","connect","databaseConnection","createDatabaseConnection","disconnect","queryRunner","undefined","close","then","createQueryRunner","mode","databaseMode","isDatabaseEncryted","databaseVersion","version","createConnection","open","run","journalMode","indexOf","loadDependencies"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\driver\\capacitor\\CapacitorDriver.ts"],"sourcesContent":["import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\"\nimport { CapacitorConnectionOptions } from \"./CapacitorConnectionOptions\"\nimport { CapacitorQueryRunner } from \"./CapacitorQueryRunner\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { DataSource } from \"../../data-source/DataSource\"\nimport { DriverPackageNotInstalledError } from \"../../error\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\n\nexport class CapacitorDriver extends AbstractSqliteDriver {\n    driver: any\n    options: CapacitorConnectionOptions\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        super(connection)\n\n        this.database = this.options.database\n        this.driver = this.options.driver\n\n        // load sqlite package\n        this.sqlite = this.options.driver\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    async connect(): Promise<void> {\n        this.databaseConnection = this.createDatabaseConnection()\n        await this.databaseConnection\n    }\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        this.queryRunner = undefined\n        const databaseConnection = await this.databaseConnection\n        return databaseConnection.close().then(() => {\n            this.databaseConnection = undefined\n        })\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner) this.queryRunner = new CapacitorQueryRunner(this)\n\n        return this.queryRunner\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected async createDatabaseConnection() {\n        const databaseMode = this.options.mode || \"no-encryption\"\n        const isDatabaseEncryted = databaseMode !== \"no-encryption\"\n        const databaseVersion =\n            typeof this.options.version === \"undefined\"\n                ? 1\n                : this.options.version\n        const connection = await this.sqlite.createConnection(\n            this.options.database,\n            isDatabaseEncryted,\n            databaseMode,\n            databaseVersion,\n        )\n        await connection.open()\n\n        // we need to enable foreign keys in sqlite to make sure all foreign key related features\n        // working properly. this also makes onDelete to work with sqlite.\n        await connection.run(`PRAGMA foreign_keys = ON`)\n\n        if (\n            this.options.journalMode &&\n            [\"DELETE\", \"TRUNCATE\", \"PERSIST\", \"MEMORY\", \"WAL\", \"OFF\"].indexOf(\n                this.options.journalMode,\n            ) !== -1\n        ) {\n            await connection.run(\n                `PRAGMA journal_mode = ${this.options.journalMode}`,\n            )\n        }\n\n        return connection\n    }\n\n    protected loadDependencies(): void {\n        this.sqlite = this.driver\n        if (!this.driver) {\n            throw new DriverPackageNotInstalledError(\n                \"Capacitor\",\n                \"@capacitor-community/sqlite\",\n            )\n        }\n    }\n}\n"],"mappings":"AAAA,SAASA,oBAAoB,QAAQ,yCAAyC;AAE9E,SAASC,oBAAoB,QAAQ,wBAAwB;AAG7D,SAASC,8BAA8B,QAAQ,aAAa;AAG5D,OAAM,MAAOC,eAAgB,SAAQH,oBAAoB;EAIrD;EACA;EACA;EAEAI,YAAYC,UAAsB;IAC9B,KAAK,CAACA,UAAU,CAAC;IAEjB,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACC,OAAO,CAACD,QAAQ;IACrC,IAAI,CAACE,MAAM,GAAG,IAAI,CAACD,OAAO,CAACC,MAAM;IAEjC;IACA,IAAI,CAACC,MAAM,GAAG,IAAI,CAACF,OAAO,CAACC,MAAM;EACrC;EAEA;EACA;EACA;EAEA;;;EAGA,MAAME,OAAOA,CAAA;IACT,IAAI,CAACC,kBAAkB,GAAG,IAAI,CAACC,wBAAwB,EAAE;IACzD,MAAM,IAAI,CAACD,kBAAkB;EACjC;EAEA;;;EAGA,MAAME,UAAUA,CAAA;IACZ,IAAI,CAACC,WAAW,GAAGC,SAAS;IAC5B,MAAMJ,kBAAkB,GAAG,MAAM,IAAI,CAACA,kBAAkB;IACxD,OAAOA,kBAAkB,CAACK,KAAK,EAAE,CAACC,IAAI,CAAC,MAAK;MACxC,IAAI,CAACN,kBAAkB,GAAGI,SAAS;IACvC,CAAC,CAAC;EACN;EAEA;;;EAGAG,iBAAiBA,CAACC,IAAqB;IACnC,IAAI,CAAC,IAAI,CAACL,WAAW,EAAE,IAAI,CAACA,WAAW,GAAG,IAAIb,oBAAoB,CAAC,IAAI,CAAC;IAExE,OAAO,IAAI,CAACa,WAAW;EAC3B;EAEA;EACA;EACA;EAEA;;;EAGU,MAAMF,wBAAwBA,CAAA;IACpC,MAAMQ,YAAY,GAAG,IAAI,CAACb,OAAO,CAACY,IAAI,IAAI,eAAe;IACzD,MAAME,kBAAkB,GAAGD,YAAY,KAAK,eAAe;IAC3D,MAAME,eAAe,GACjB,OAAO,IAAI,CAACf,OAAO,CAACgB,OAAO,KAAK,WAAW,GACrC,CAAC,GACD,IAAI,CAAChB,OAAO,CAACgB,OAAO;IAC9B,MAAMlB,UAAU,GAAG,MAAM,IAAI,CAACI,MAAM,CAACe,gBAAgB,CACjD,IAAI,CAACjB,OAAO,CAACD,QAAQ,EACrBe,kBAAkB,EAClBD,YAAY,EACZE,eAAe,CAClB;IACD,MAAMjB,UAAU,CAACoB,IAAI,EAAE;IAEvB;IACA;IACA,MAAMpB,UAAU,CAACqB,GAAG,CAAC,0BAA0B,CAAC;IAEhD,IACI,IAAI,CAACnB,OAAO,CAACoB,WAAW,IACxB,CAAC,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC,CAACC,OAAO,CAC7D,IAAI,CAACrB,OAAO,CAACoB,WAAW,CAC3B,KAAK,CAAC,CAAC,EACV;MACE,MAAMtB,UAAU,CAACqB,GAAG,CAChB,yBAAyB,IAAI,CAACnB,OAAO,CAACoB,WAAW,EAAE,CACtD;IACL;IAEA,OAAOtB,UAAU;EACrB;EAEUwB,gBAAgBA,CAAA;IACtB,IAAI,CAACpB,MAAM,GAAG,IAAI,CAACD,MAAM;IACzB,IAAI,CAAC,IAAI,CAACA,MAAM,EAAE;MACd,MAAM,IAAIN,8BAA8B,CACpC,WAAW,EACX,6BAA6B,CAChC;IACL;EACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}