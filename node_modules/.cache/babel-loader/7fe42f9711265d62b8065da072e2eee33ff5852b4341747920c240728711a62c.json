{"ast":null,"code":"/**\n * Contains all information about entity's foreign key.\n */\nexport class ForeignKeyMetadata {\n  // ---------------------------------------------------------------------\n  // Constructor\n  // ---------------------------------------------------------------------\n  constructor(options) {\n    /**\n     * Array of columns of this foreign key.\n     */\n    this.columns = [];\n    /**\n     * Array of referenced columns.\n     */\n    this.referencedColumns = [];\n    /**\n     * Gets array of column names.\n     */\n    this.columnNames = [];\n    /**\n     * Gets array of referenced column names.\n     */\n    this.referencedColumnNames = [];\n    this.entityMetadata = options.entityMetadata;\n    this.referencedEntityMetadata = options.referencedEntityMetadata;\n    this.columns = options.columns;\n    this.referencedColumns = options.referencedColumns;\n    this.onDelete = options.onDelete || \"NO ACTION\";\n    this.onUpdate = options.onUpdate || \"NO ACTION\";\n    this.deferrable = options.deferrable;\n    this.givenName = options.name;\n    if (options.namingStrategy) this.build(options.namingStrategy);\n  }\n  // ---------------------------------------------------------------------\n  // Public Methods\n  // ---------------------------------------------------------------------\n  /**\n   * Builds some depend foreign key properties.\n   * Must be called after all entity metadatas and their columns are built.\n   */\n  build(namingStrategy) {\n    this.columnNames = this.columns.map(column => column.databaseName);\n    this.referencedColumnNames = this.referencedColumns.map(column => column.databaseName);\n    this.referencedTablePath = this.referencedEntityMetadata.tablePath;\n    this.name = this.givenName ? this.givenName : namingStrategy.foreignKeyName(this.entityMetadata.tableName, this.columnNames, this.referencedEntityMetadata.tableName, this.referencedColumnNames);\n  }\n}","map":{"version":3,"names":["ForeignKeyMetadata","constructor","options","columns","referencedColumns","columnNames","referencedColumnNames","entityMetadata","referencedEntityMetadata","onDelete","onUpdate","deferrable","givenName","name","namingStrategy","build","map","column","databaseName","referencedTablePath","tablePath","foreignKeyName","tableName"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\metadata\\ForeignKeyMetadata.ts"],"sourcesContent":["import { ColumnMetadata } from \"./ColumnMetadata\"\nimport { EntityMetadata } from \"./EntityMetadata\"\nimport { NamingStrategyInterface } from \"../naming-strategy/NamingStrategyInterface\"\nimport { DeferrableType } from \"./types/DeferrableType\"\nimport { OnDeleteType } from \"./types/OnDeleteType\"\nimport { OnUpdateType } from \"./types/OnUpdateType\"\n\n/**\n * Contains all information about entity's foreign key.\n */\nexport class ForeignKeyMetadata {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity metadata where this foreign key is.\n     */\n    entityMetadata: EntityMetadata\n\n    /**\n     * Entity metadata which this foreign key references.\n     */\n    referencedEntityMetadata: EntityMetadata\n\n    /**\n     * Array of columns of this foreign key.\n     */\n    columns: ColumnMetadata[] = []\n\n    /**\n     * Array of referenced columns.\n     */\n    referencedColumns: ColumnMetadata[] = []\n\n    /**\n     * What to do with a relation on deletion of the row containing a foreign key.\n     */\n    onDelete?: OnDeleteType\n\n    /**\n     * What to do with a relation on update of the row containing a foreign key.\n     */\n    onUpdate?: OnUpdateType\n\n    /**\n     * When to check the constraints of a foreign key.\n     */\n    deferrable?: DeferrableType\n\n    /**\n     * Gets the table name to which this foreign key is referenced.\n     */\n    referencedTablePath: string\n\n    /**\n     * Gets foreign key name.\n     * If unique constraint name was given by a user then it stores givenName.\n     * If unique constraint name was not given then its generated.\n     */\n    name: string\n\n    /**\n     * Gets array of column names.\n     */\n    columnNames: string[] = []\n\n    /**\n     * Gets array of referenced column names.\n     */\n    referencedColumnNames: string[] = []\n\n    /**\n     * User specified unique constraint name.\n     */\n    givenName?: string\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata\n        referencedEntityMetadata: EntityMetadata\n        namingStrategy?: NamingStrategyInterface\n        columns: ColumnMetadata[]\n        referencedColumns: ColumnMetadata[]\n        onDelete?: OnDeleteType\n        onUpdate?: OnUpdateType\n        deferrable?: DeferrableType\n        name?: string\n    }) {\n        this.entityMetadata = options.entityMetadata\n        this.referencedEntityMetadata = options.referencedEntityMetadata\n        this.columns = options.columns\n        this.referencedColumns = options.referencedColumns\n        this.onDelete = options.onDelete || \"NO ACTION\"\n        this.onUpdate = options.onUpdate || \"NO ACTION\"\n        this.deferrable = options.deferrable\n        this.givenName = options.name\n        if (options.namingStrategy) this.build(options.namingStrategy)\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend foreign key properties.\n     * Must be called after all entity metadatas and their columns are built.\n     */\n    build(namingStrategy: NamingStrategyInterface) {\n        this.columnNames = this.columns.map((column) => column.databaseName)\n        this.referencedColumnNames = this.referencedColumns.map(\n            (column) => column.databaseName,\n        )\n        this.referencedTablePath = this.referencedEntityMetadata.tablePath\n        this.name = this.givenName\n            ? this.givenName\n            : namingStrategy.foreignKeyName(\n                  this.entityMetadata.tableName,\n                  this.columnNames,\n                  this.referencedEntityMetadata.tableName,\n                  this.referencedColumnNames,\n              )\n    }\n}\n"],"mappings":"AAOA;;;AAGA,OAAM,MAAOA,kBAAkB;EAmE3B;EACA;EACA;EAEAC,YAAYC,OAUX;IAlED;;;IAGA,KAAAC,OAAO,GAAqB,EAAE;IAE9B;;;IAGA,KAAAC,iBAAiB,GAAqB,EAAE;IA6BxC;;;IAGA,KAAAC,WAAW,GAAa,EAAE;IAE1B;;;IAGA,KAAAC,qBAAqB,GAAa,EAAE;IAsBhC,IAAI,CAACC,cAAc,GAAGL,OAAO,CAACK,cAAc;IAC5C,IAAI,CAACC,wBAAwB,GAAGN,OAAO,CAACM,wBAAwB;IAChE,IAAI,CAACL,OAAO,GAAGD,OAAO,CAACC,OAAO;IAC9B,IAAI,CAACC,iBAAiB,GAAGF,OAAO,CAACE,iBAAiB;IAClD,IAAI,CAACK,QAAQ,GAAGP,OAAO,CAACO,QAAQ,IAAI,WAAW;IAC/C,IAAI,CAACC,QAAQ,GAAGR,OAAO,CAACQ,QAAQ,IAAI,WAAW;IAC/C,IAAI,CAACC,UAAU,GAAGT,OAAO,CAACS,UAAU;IACpC,IAAI,CAACC,SAAS,GAAGV,OAAO,CAACW,IAAI;IAC7B,IAAIX,OAAO,CAACY,cAAc,EAAE,IAAI,CAACC,KAAK,CAACb,OAAO,CAACY,cAAc,CAAC;EAClE;EAEA;EACA;EACA;EAEA;;;;EAIAC,KAAKA,CAACD,cAAuC;IACzC,IAAI,CAACT,WAAW,GAAG,IAAI,CAACF,OAAO,CAACa,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAACC,YAAY,CAAC;IACpE,IAAI,CAACZ,qBAAqB,GAAG,IAAI,CAACF,iBAAiB,CAACY,GAAG,CAClDC,MAAM,IAAKA,MAAM,CAACC,YAAY,CAClC;IACD,IAAI,CAACC,mBAAmB,GAAG,IAAI,CAACX,wBAAwB,CAACY,SAAS;IAClE,IAAI,CAACP,IAAI,GAAG,IAAI,CAACD,SAAS,GACpB,IAAI,CAACA,SAAS,GACdE,cAAc,CAACO,cAAc,CACzB,IAAI,CAACd,cAAc,CAACe,SAAS,EAC7B,IAAI,CAACjB,WAAW,EAChB,IAAI,CAACG,wBAAwB,CAACc,SAAS,EACvC,IAAI,CAAChB,qBAAqB,CAC7B;EACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}