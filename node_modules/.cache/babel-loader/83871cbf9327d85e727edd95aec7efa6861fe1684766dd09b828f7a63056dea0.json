{"ast":null,"code":"import { TableColumn } from \"./TableColumn\";\nimport { TableIndex } from \"./TableIndex\";\nimport { TableForeignKey } from \"./TableForeignKey\";\nimport { TableUtils } from \"../util/TableUtils\";\nimport { TableUnique } from \"./TableUnique\";\nimport { TableCheck } from \"./TableCheck\";\nimport { TableExclusion } from \"./TableExclusion\";\n/**\n * Table in the database represented in this class.\n */\nexport class Table {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(options) {\n    this[\"@instanceof\"] = Symbol.for(\"Table\");\n    /**\n     * Table columns.\n     */\n    this.columns = [];\n    /**\n     * Table indices.\n     */\n    this.indices = [];\n    /**\n     * Table foreign keys.\n     */\n    this.foreignKeys = [];\n    /**\n     * Table unique constraints.\n     */\n    this.uniques = [];\n    /**\n     * Table check constraints.\n     */\n    this.checks = [];\n    /**\n     * Table exclusion constraints.\n     */\n    this.exclusions = [];\n    /**\n     * Indicates if table was just created.\n     * This is needed, for example to check if we need to skip primary keys creation\n     * for new tables.\n     */\n    this.justCreated = false;\n    /**\n     * Enables Sqlite \"WITHOUT ROWID\" modifier for the \"CREATE TABLE\" statement\n     */\n    this.withoutRowid = false;\n    if (options) {\n      this.database = options.database;\n      this.schema = options.schema;\n      this.name = options.name;\n      if (options.columns) this.columns = options.columns.map(column => new TableColumn(column));\n      if (options.indices) this.indices = options.indices.map(index => new TableIndex(index));\n      if (options.foreignKeys) this.foreignKeys = options.foreignKeys.map(foreignKey => new TableForeignKey({\n        ...foreignKey,\n        referencedDatabase: foreignKey?.referencedDatabase || options.database,\n        referencedSchema: foreignKey?.referencedSchema || options.schema\n      }));\n      if (options.uniques) this.uniques = options.uniques.map(unique => new TableUnique(unique));\n      if (options.checks) this.checks = options.checks.map(check => new TableCheck(check));\n      if (options.exclusions) this.exclusions = options.exclusions.map(exclusion => new TableExclusion(exclusion));\n      if (options.justCreated !== undefined) this.justCreated = options.justCreated;\n      if (options.withoutRowid) this.withoutRowid = options.withoutRowid;\n      this.engine = options.engine;\n      this.comment = options.comment;\n    }\n  }\n  // -------------------------------------------------------------------------\n  // Accessors\n  // -------------------------------------------------------------------------\n  get primaryColumns() {\n    return this.columns.filter(column => column.isPrimary);\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Clones this table to a new table with all properties cloned.\n   */\n  clone() {\n    return new Table({\n      schema: this.schema,\n      database: this.database,\n      name: this.name,\n      columns: this.columns.map(column => column.clone()),\n      indices: this.indices.map(constraint => constraint.clone()),\n      foreignKeys: this.foreignKeys.map(constraint => constraint.clone()),\n      uniques: this.uniques.map(constraint => constraint.clone()),\n      checks: this.checks.map(constraint => constraint.clone()),\n      exclusions: this.exclusions.map(constraint => constraint.clone()),\n      justCreated: this.justCreated,\n      withoutRowid: this.withoutRowid,\n      engine: this.engine,\n      comment: this.comment\n    });\n  }\n  /**\n   * Add column and creates its constraints.\n   */\n  addColumn(column) {\n    this.columns.push(column);\n  }\n  /**\n   * Remove column and its constraints.\n   */\n  removeColumn(column) {\n    const foundColumn = this.columns.find(c => c.name === column.name);\n    if (foundColumn) this.columns.splice(this.columns.indexOf(foundColumn), 1);\n  }\n  /**\n   * Adds unique constraint.\n   */\n  addUniqueConstraint(uniqueConstraint) {\n    this.uniques.push(uniqueConstraint);\n    if (uniqueConstraint.columnNames.length === 1) {\n      const uniqueColumn = this.columns.find(column => column.name === uniqueConstraint.columnNames[0]);\n      if (uniqueColumn) uniqueColumn.isUnique = true;\n    }\n  }\n  /**\n   * Removes unique constraint.\n   */\n  removeUniqueConstraint(removedUnique) {\n    const foundUnique = this.uniques.find(unique => unique.name === removedUnique.name);\n    if (foundUnique) {\n      this.uniques.splice(this.uniques.indexOf(foundUnique), 1);\n      if (foundUnique.columnNames.length === 1) {\n        const uniqueColumn = this.columns.find(column => column.name === foundUnique.columnNames[0]);\n        if (uniqueColumn) uniqueColumn.isUnique = false;\n      }\n    }\n  }\n  /**\n   * Adds check constraint.\n   */\n  addCheckConstraint(checkConstraint) {\n    this.checks.push(checkConstraint);\n  }\n  /**\n   * Removes check constraint.\n   */\n  removeCheckConstraint(removedCheck) {\n    const foundCheck = this.checks.find(check => check.name === removedCheck.name);\n    if (foundCheck) {\n      this.checks.splice(this.checks.indexOf(foundCheck), 1);\n    }\n  }\n  /**\n   * Adds exclusion constraint.\n   */\n  addExclusionConstraint(exclusionConstraint) {\n    this.exclusions.push(exclusionConstraint);\n  }\n  /**\n   * Removes exclusion constraint.\n   */\n  removeExclusionConstraint(removedExclusion) {\n    const foundExclusion = this.exclusions.find(exclusion => exclusion.name === removedExclusion.name);\n    if (foundExclusion) {\n      this.exclusions.splice(this.exclusions.indexOf(foundExclusion), 1);\n    }\n  }\n  /**\n   * Adds foreign keys.\n   */\n  addForeignKey(foreignKey) {\n    this.foreignKeys.push(foreignKey);\n  }\n  /**\n   * Removes foreign key.\n   */\n  removeForeignKey(removedForeignKey) {\n    const fk = this.foreignKeys.find(foreignKey => foreignKey.name === removedForeignKey.name);\n    if (fk) this.foreignKeys.splice(this.foreignKeys.indexOf(fk), 1);\n  }\n  /**\n   * Adds index.\n   */\n  addIndex(index, isMysql = false) {\n    this.indices.push(index);\n    // in Mysql unique indices and unique constraints are the same thing\n    // if index is unique and have only one column, we mark this column as unique\n    if (index.columnNames.length === 1 && index.isUnique && isMysql) {\n      const column = this.columns.find(c => c.name === index.columnNames[0]);\n      if (column) column.isUnique = true;\n    }\n  }\n  /**\n   * Removes index.\n   */\n  removeIndex(tableIndex, isMysql = false) {\n    const index = this.indices.find(index => index.name === tableIndex.name);\n    if (index) {\n      this.indices.splice(this.indices.indexOf(index), 1);\n      // in Mysql unique indices and unique constraints are the same thing\n      // if index is unique and have only one column, we move `unique` attribute from its column\n      if (index.columnNames.length === 1 && index.isUnique && isMysql) {\n        const column = this.columns.find(c => c.name === index.columnNames[0]);\n        if (column) column.isUnique = this.indices.some(ind => ind.columnNames.length === 1 && ind.columnNames[0] === column.name && !!index.isUnique);\n      }\n    }\n  }\n  findColumnByName(name) {\n    return this.columns.find(column => column.name === name);\n  }\n  /**\n   * Returns all column indices.\n   */\n  findColumnIndices(column) {\n    return this.indices.filter(index => {\n      return !!index.columnNames.find(columnName => columnName === column.name);\n    });\n  }\n  /**\n   * Returns all column foreign keys.\n   */\n  findColumnForeignKeys(column) {\n    return this.foreignKeys.filter(foreignKey => {\n      return !!foreignKey.columnNames.find(columnName => columnName === column.name);\n    });\n  }\n  /**\n   * Returns all column uniques.\n   */\n  findColumnUniques(column) {\n    return this.uniques.filter(unique => {\n      return !!unique.columnNames.find(columnName => columnName === column.name);\n    });\n  }\n  /**\n   * Returns all column checks.\n   */\n  findColumnChecks(column) {\n    return this.checks.filter(check => {\n      return !!check.columnNames.find(columnName => columnName === column.name);\n    });\n  }\n  // -------------------------------------------------------------------------\n  // Static Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates table from a given entity metadata.\n   */\n  static create(entityMetadata, driver) {\n    const database = entityMetadata.database === driver.database ? undefined : entityMetadata.database;\n    const schema = entityMetadata.schema === driver.options.schema ? undefined : entityMetadata.schema;\n    const options = {\n      database: entityMetadata.database,\n      schema: entityMetadata.schema,\n      name: driver.buildTableName(entityMetadata.tableName, schema, database),\n      withoutRowid: entityMetadata.withoutRowid,\n      engine: entityMetadata.engine,\n      columns: entityMetadata.columns.filter(column => column && !column.isVirtualProperty).map(column => TableUtils.createTableColumnOptions(column, driver)),\n      indices: entityMetadata.indices.filter(index => index.synchronize === true).map(index => TableIndex.create(index)),\n      uniques: entityMetadata.uniques.map(unique => TableUnique.create(unique)),\n      checks: entityMetadata.checks.map(check => TableCheck.create(check)),\n      exclusions: entityMetadata.exclusions.map(exclusion => TableExclusion.create(exclusion)),\n      comment: entityMetadata.comment\n    };\n    return new Table(options);\n  }\n}","map":{"version":3,"names":["TableColumn","TableIndex","TableForeignKey","TableUtils","TableUnique","TableCheck","TableExclusion","Table","constructor","options","Symbol","for","columns","indices","foreignKeys","uniques","checks","exclusions","justCreated","withoutRowid","database","schema","name","map","column","index","foreignKey","referencedDatabase","referencedSchema","unique","check","exclusion","undefined","engine","comment","primaryColumns","filter","isPrimary","clone","constraint","addColumn","push","removeColumn","foundColumn","find","c","splice","indexOf","addUniqueConstraint","uniqueConstraint","columnNames","length","uniqueColumn","isUnique","removeUniqueConstraint","removedUnique","foundUnique","addCheckConstraint","checkConstraint","removeCheckConstraint","removedCheck","foundCheck","addExclusionConstraint","exclusionConstraint","removeExclusionConstraint","removedExclusion","foundExclusion","addForeignKey","removeForeignKey","removedForeignKey","fk","addIndex","isMysql","removeIndex","tableIndex","some","ind","findColumnByName","findColumnIndices","columnName","findColumnForeignKeys","findColumnUniques","findColumnChecks","create","entityMetadata","driver","buildTableName","tableName","isVirtualProperty","createTableColumnOptions","synchronize"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\schema-builder\\table\\Table.ts"],"sourcesContent":["import { TableColumn } from \"./TableColumn\"\nimport { TableIndex } from \"./TableIndex\"\nimport { TableForeignKey } from \"./TableForeignKey\"\nimport { Driver } from \"../../driver/Driver\"\nimport { TableOptions } from \"../options/TableOptions\"\nimport { EntityMetadata } from \"../../metadata/EntityMetadata\"\nimport { TableUtils } from \"../util/TableUtils\"\nimport { TableUnique } from \"./TableUnique\"\nimport { TableCheck } from \"./TableCheck\"\nimport { TableExclusion } from \"./TableExclusion\"\n\n/**\n * Table in the database represented in this class.\n */\nexport class Table {\n    readonly \"@instanceof\" = Symbol.for(\"Table\")\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database name that this table resides in if it applies.\n     */\n    database?: string\n\n    /**\n     * Schema name that this table resides in if it applies.\n     */\n    schema?: string\n\n    /**\n     * May contain database name, schema name and table name, unless they're the current database.\n     *\n     * E.g. myDB.mySchema.myTable\n     */\n    name: string\n\n    /**\n     * Table columns.\n     */\n    columns: TableColumn[] = []\n\n    /**\n     * Table indices.\n     */\n    indices: TableIndex[] = []\n\n    /**\n     * Table foreign keys.\n     */\n    foreignKeys: TableForeignKey[] = []\n\n    /**\n     * Table unique constraints.\n     */\n    uniques: TableUnique[] = []\n\n    /**\n     * Table check constraints.\n     */\n    checks: TableCheck[] = []\n\n    /**\n     * Table exclusion constraints.\n     */\n    exclusions: TableExclusion[] = []\n\n    /**\n     * Indicates if table was just created.\n     * This is needed, for example to check if we need to skip primary keys creation\n     * for new tables.\n     */\n    justCreated: boolean = false\n\n    /**\n     * Enables Sqlite \"WITHOUT ROWID\" modifier for the \"CREATE TABLE\" statement\n     */\n    withoutRowid?: boolean = false\n\n    /**\n     * Table engine.\n     */\n    engine?: string\n\n    /**\n     * Table comment. Not supported by all database types.\n     */\n    comment?: string\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options?: TableOptions) {\n        if (options) {\n            this.database = options.database\n            this.schema = options.schema\n            this.name = options.name\n\n            if (options.columns)\n                this.columns = options.columns.map(\n                    (column) => new TableColumn(column),\n                )\n\n            if (options.indices)\n                this.indices = options.indices.map(\n                    (index) => new TableIndex(index),\n                )\n\n            if (options.foreignKeys)\n                this.foreignKeys = options.foreignKeys.map(\n                    (foreignKey) =>\n                        new TableForeignKey({\n                            ...foreignKey,\n                            referencedDatabase:\n                                foreignKey?.referencedDatabase ||\n                                options.database,\n                            referencedSchema:\n                                foreignKey?.referencedSchema || options.schema,\n                        }),\n                )\n\n            if (options.uniques)\n                this.uniques = options.uniques.map(\n                    (unique) => new TableUnique(unique),\n                )\n\n            if (options.checks)\n                this.checks = options.checks.map(\n                    (check) => new TableCheck(check),\n                )\n\n            if (options.exclusions)\n                this.exclusions = options.exclusions.map(\n                    (exclusion) => new TableExclusion(exclusion),\n                )\n\n            if (options.justCreated !== undefined)\n                this.justCreated = options.justCreated\n\n            if (options.withoutRowid) this.withoutRowid = options.withoutRowid\n\n            this.engine = options.engine\n\n            this.comment = options.comment\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    get primaryColumns(): TableColumn[] {\n        return this.columns.filter((column) => column.isPrimary)\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Clones this table to a new table with all properties cloned.\n     */\n    clone(): Table {\n        return new Table({\n            schema: this.schema,\n            database: this.database,\n            name: this.name,\n            columns: this.columns.map((column) => column.clone()),\n            indices: this.indices.map((constraint) => constraint.clone()),\n            foreignKeys: this.foreignKeys.map((constraint) =>\n                constraint.clone(),\n            ),\n            uniques: this.uniques.map((constraint) => constraint.clone()),\n            checks: this.checks.map((constraint) => constraint.clone()),\n            exclusions: this.exclusions.map((constraint) => constraint.clone()),\n            justCreated: this.justCreated,\n            withoutRowid: this.withoutRowid,\n            engine: this.engine,\n            comment: this.comment,\n        })\n    }\n\n    /**\n     * Add column and creates its constraints.\n     */\n    addColumn(column: TableColumn): void {\n        this.columns.push(column)\n    }\n\n    /**\n     * Remove column and its constraints.\n     */\n    removeColumn(column: TableColumn): void {\n        const foundColumn = this.columns.find((c) => c.name === column.name)\n        if (foundColumn)\n            this.columns.splice(this.columns.indexOf(foundColumn), 1)\n    }\n\n    /**\n     * Adds unique constraint.\n     */\n    addUniqueConstraint(uniqueConstraint: TableUnique): void {\n        this.uniques.push(uniqueConstraint)\n        if (uniqueConstraint.columnNames.length === 1) {\n            const uniqueColumn = this.columns.find(\n                (column) => column.name === uniqueConstraint.columnNames[0],\n            )\n            if (uniqueColumn) uniqueColumn.isUnique = true\n        }\n    }\n\n    /**\n     * Removes unique constraint.\n     */\n    removeUniqueConstraint(removedUnique: TableUnique): void {\n        const foundUnique = this.uniques.find(\n            (unique) => unique.name === removedUnique.name,\n        )\n        if (foundUnique) {\n            this.uniques.splice(this.uniques.indexOf(foundUnique), 1)\n            if (foundUnique.columnNames.length === 1) {\n                const uniqueColumn = this.columns.find(\n                    (column) => column.name === foundUnique.columnNames[0],\n                )\n                if (uniqueColumn) uniqueColumn.isUnique = false\n            }\n        }\n    }\n\n    /**\n     * Adds check constraint.\n     */\n    addCheckConstraint(checkConstraint: TableCheck): void {\n        this.checks.push(checkConstraint)\n    }\n\n    /**\n     * Removes check constraint.\n     */\n    removeCheckConstraint(removedCheck: TableCheck): void {\n        const foundCheck = this.checks.find(\n            (check) => check.name === removedCheck.name,\n        )\n        if (foundCheck) {\n            this.checks.splice(this.checks.indexOf(foundCheck), 1)\n        }\n    }\n\n    /**\n     * Adds exclusion constraint.\n     */\n    addExclusionConstraint(exclusionConstraint: TableExclusion): void {\n        this.exclusions.push(exclusionConstraint)\n    }\n\n    /**\n     * Removes exclusion constraint.\n     */\n    removeExclusionConstraint(removedExclusion: TableExclusion): void {\n        const foundExclusion = this.exclusions.find(\n            (exclusion) => exclusion.name === removedExclusion.name,\n        )\n        if (foundExclusion) {\n            this.exclusions.splice(this.exclusions.indexOf(foundExclusion), 1)\n        }\n    }\n\n    /**\n     * Adds foreign keys.\n     */\n    addForeignKey(foreignKey: TableForeignKey): void {\n        this.foreignKeys.push(foreignKey)\n    }\n\n    /**\n     * Removes foreign key.\n     */\n    removeForeignKey(removedForeignKey: TableForeignKey): void {\n        const fk = this.foreignKeys.find(\n            (foreignKey) => foreignKey.name === removedForeignKey.name,\n        )\n        if (fk) this.foreignKeys.splice(this.foreignKeys.indexOf(fk), 1)\n    }\n\n    /**\n     * Adds index.\n     */\n    addIndex(index: TableIndex, isMysql: boolean = false): void {\n        this.indices.push(index)\n\n        // in Mysql unique indices and unique constraints are the same thing\n        // if index is unique and have only one column, we mark this column as unique\n        if (index.columnNames.length === 1 && index.isUnique && isMysql) {\n            const column = this.columns.find(\n                (c) => c.name === index.columnNames[0],\n            )\n            if (column) column.isUnique = true\n        }\n    }\n\n    /**\n     * Removes index.\n     */\n    removeIndex(tableIndex: TableIndex, isMysql: boolean = false): void {\n        const index = this.indices.find(\n            (index) => index.name === tableIndex.name,\n        )\n        if (index) {\n            this.indices.splice(this.indices.indexOf(index), 1)\n\n            // in Mysql unique indices and unique constraints are the same thing\n            // if index is unique and have only one column, we move `unique` attribute from its column\n            if (index.columnNames.length === 1 && index.isUnique && isMysql) {\n                const column = this.columns.find(\n                    (c) => c.name === index.columnNames[0],\n                )\n                if (column)\n                    column.isUnique = this.indices.some(\n                        (ind) =>\n                            ind.columnNames.length === 1 &&\n                            ind.columnNames[0] === column.name &&\n                            !!index.isUnique,\n                    )\n            }\n        }\n    }\n\n    findColumnByName(name: string): TableColumn | undefined {\n        return this.columns.find((column) => column.name === name)\n    }\n\n    /**\n     * Returns all column indices.\n     */\n    findColumnIndices(column: TableColumn): TableIndex[] {\n        return this.indices.filter((index) => {\n            return !!index.columnNames.find(\n                (columnName) => columnName === column.name,\n            )\n        })\n    }\n\n    /**\n     * Returns all column foreign keys.\n     */\n    findColumnForeignKeys(column: TableColumn): TableForeignKey[] {\n        return this.foreignKeys.filter((foreignKey) => {\n            return !!foreignKey.columnNames.find(\n                (columnName) => columnName === column.name,\n            )\n        })\n    }\n\n    /**\n     * Returns all column uniques.\n     */\n    findColumnUniques(column: TableColumn): TableUnique[] {\n        return this.uniques.filter((unique) => {\n            return !!unique.columnNames.find(\n                (columnName) => columnName === column.name,\n            )\n        })\n    }\n\n    /**\n     * Returns all column checks.\n     */\n    findColumnChecks(column: TableColumn): TableCheck[] {\n        return this.checks.filter((check) => {\n            return !!check.columnNames!.find(\n                (columnName) => columnName === column.name,\n            )\n        })\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates table from a given entity metadata.\n     */\n    static create(entityMetadata: EntityMetadata, driver: Driver): Table {\n        const database =\n            entityMetadata.database === driver.database\n                ? undefined\n                : entityMetadata.database\n        const schema =\n            entityMetadata.schema === (driver.options as any).schema\n                ? undefined\n                : entityMetadata.schema\n\n        const options: TableOptions = {\n            database: entityMetadata.database,\n            schema: entityMetadata.schema,\n            name: driver.buildTableName(\n                entityMetadata.tableName,\n                schema,\n                database,\n            ),\n            withoutRowid: entityMetadata.withoutRowid,\n            engine: entityMetadata.engine,\n            columns: entityMetadata.columns\n                .filter((column) => column && !column.isVirtualProperty)\n                .map((column) =>\n                    TableUtils.createTableColumnOptions(column, driver),\n                ),\n            indices: entityMetadata.indices\n                .filter((index) => index.synchronize === true)\n                .map((index) => TableIndex.create(index)),\n            uniques: entityMetadata.uniques.map((unique) =>\n                TableUnique.create(unique),\n            ),\n            checks: entityMetadata.checks.map((check) =>\n                TableCheck.create(check),\n            ),\n            exclusions: entityMetadata.exclusions.map((exclusion) =>\n                TableExclusion.create(exclusion),\n            ),\n            comment: entityMetadata.comment,\n        }\n\n        return new Table(options)\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}