{"ast":null,"code":"import { QueryBuilder } from \"./QueryBuilder\";\nimport { DeleteResult } from \"./result/DeleteResult\";\nimport { ReturningStatementNotSupportedError } from \"../error/ReturningStatementNotSupportedError\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class DeleteQueryBuilder extends QueryBuilder {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connectionOrQueryBuilder, queryRunner) {\n    super(connectionOrQueryBuilder, queryRunner);\n    this[\"@instanceof\"] = Symbol.for(\"DeleteQueryBuilder\");\n    this.expressionMap.aliasNamePrefixingEnabled = false;\n  }\n  // -------------------------------------------------------------------------\n  // Public Implemented Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Gets generated SQL query without parameters being replaced.\n   */\n  getQuery() {\n    let sql = this.createComment();\n    sql += this.createCteExpression();\n    sql += this.createDeleteExpression();\n    return this.replacePropertyNamesForTheWholeQuery(sql.trim());\n  }\n  /**\n   * Executes sql generated by query builder and returns raw database results.\n   */\n  async execute() {\n    const [sql, parameters] = this.getQueryAndParameters();\n    const queryRunner = this.obtainQueryRunner();\n    let transactionStartedByUs = false;\n    try {\n      // start transaction if it was enabled\n      if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {\n        await queryRunner.startTransaction();\n        transactionStartedByUs = true;\n      }\n      // call before deletion methods in listeners and subscribers\n      if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata) {\n        await queryRunner.broadcaster.broadcast(\"BeforeRemove\", this.expressionMap.mainAlias.metadata);\n      }\n      // execute query\n      const queryResult = await queryRunner.query(sql, parameters, true);\n      const deleteResult = DeleteResult.from(queryResult);\n      // call after deletion methods in listeners and subscribers\n      if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata) {\n        await queryRunner.broadcaster.broadcast(\"AfterRemove\", this.expressionMap.mainAlias.metadata);\n      }\n      // close transaction if we started it\n      if (transactionStartedByUs) await queryRunner.commitTransaction();\n      return deleteResult;\n    } catch (error) {\n      // rollback transaction if we started it\n      if (transactionStartedByUs) {\n        try {\n          await queryRunner.rollbackTransaction();\n        } catch (rollbackError) {}\n      }\n      throw error;\n    } finally {\n      if (queryRunner !== this.queryRunner) {\n        // means we created our own query runner\n        await queryRunner.release();\n      }\n    }\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Specifies FROM which entity's table select/update/delete will be executed.\n   * Also sets a main string alias of the selection data.\n   */\n  from(entityTarget, aliasName) {\n    entityTarget = InstanceChecker.isEntitySchema(entityTarget) ? entityTarget.options.name : entityTarget;\n    const mainAlias = this.createFromAlias(entityTarget, aliasName);\n    this.expressionMap.setMainAlias(mainAlias);\n    return this;\n  }\n  /**\n   * Sets WHERE condition in the query builder.\n   * If you had previously WHERE expression defined,\n   * calling this function will override previously set WHERE conditions.\n   * Additionally you can add parameters used in where expression.\n   */\n  where(where, parameters) {\n    this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\n    const condition = this.getWhereCondition(where);\n    if (condition) this.expressionMap.wheres = [{\n      type: \"simple\",\n      condition: condition\n    }];\n    if (parameters) this.setParameters(parameters);\n    return this;\n  }\n  /**\n   * Adds new AND WHERE condition in the query builder.\n   * Additionally you can add parameters used in where expression.\n   */\n  andWhere(where, parameters) {\n    this.expressionMap.wheres.push({\n      type: \"and\",\n      condition: this.getWhereCondition(where)\n    });\n    if (parameters) this.setParameters(parameters);\n    return this;\n  }\n  /**\n   * Adds new OR WHERE condition in the query builder.\n   * Additionally you can add parameters used in where expression.\n   */\n  orWhere(where, parameters) {\n    this.expressionMap.wheres.push({\n      type: \"or\",\n      condition: this.getWhereCondition(where)\n    });\n    if (parameters) this.setParameters(parameters);\n    return this;\n  }\n  /**\n   * Sets WHERE condition in the query builder with a condition for the given ids.\n   * If you had previously WHERE expression defined,\n   * calling this function will override previously set WHERE conditions.\n   */\n  whereInIds(ids) {\n    return this.where(this.getWhereInIdsCondition(ids));\n  }\n  /**\n   * Adds new AND WHERE with conditions for the given ids.\n   */\n  andWhereInIds(ids) {\n    return this.andWhere(this.getWhereInIdsCondition(ids));\n  }\n  /**\n   * Adds new OR WHERE with conditions for the given ids.\n   */\n  orWhereInIds(ids) {\n    return this.orWhere(this.getWhereInIdsCondition(ids));\n  }\n  /**\n   * Optional returning/output clause.\n   */\n  output(output) {\n    return this.returning(output);\n  }\n  /**\n   * Optional returning/output clause.\n   */\n  returning(returning) {\n    // not all databases support returning/output cause\n    if (!this.connection.driver.isReturningSqlSupported(\"delete\")) {\n      throw new ReturningStatementNotSupportedError();\n    }\n    this.expressionMap.returning = returning;\n    return this;\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates DELETE express used to perform query.\n   */\n  createDeleteExpression() {\n    const tableName = this.getTableName(this.getMainTableName());\n    const whereExpression = this.createWhereExpression();\n    const returningExpression = this.createReturningExpression(\"delete\");\n    if (returningExpression === \"\") {\n      return `DELETE FROM ${tableName}${whereExpression}`;\n    }\n    if (this.connection.driver.options.type === \"mssql\") {\n      return `DELETE FROM ${tableName} OUTPUT ${returningExpression}${whereExpression}`;\n    }\n    return `DELETE FROM ${tableName}${whereExpression} RETURNING ${returningExpression}`;\n  }\n}","map":{"version":3,"names":["QueryBuilder","DeleteResult","ReturningStatementNotSupportedError","InstanceChecker","DeleteQueryBuilder","constructor","connectionOrQueryBuilder","queryRunner","Symbol","for","expressionMap","aliasNamePrefixingEnabled","getQuery","sql","createComment","createCteExpression","createDeleteExpression","replacePropertyNamesForTheWholeQuery","trim","execute","parameters","getQueryAndParameters","obtainQueryRunner","transactionStartedByUs","useTransaction","isTransactionActive","startTransaction","callListeners","mainAlias","hasMetadata","broadcaster","broadcast","metadata","queryResult","query","deleteResult","from","commitTransaction","error","rollbackTransaction","rollbackError","release","entityTarget","aliasName","isEntitySchema","options","name","createFromAlias","setMainAlias","where","wheres","condition","getWhereCondition","type","setParameters","andWhere","push","orWhere","whereInIds","ids","getWhereInIdsCondition","andWhereInIds","orWhereInIds","output","returning","connection","driver","isReturningSqlSupported","tableName","getTableName","getMainTableName","whereExpression","createWhereExpression","returningExpression","createReturningExpression"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\query-builder\\DeleteQueryBuilder.ts"],"sourcesContent":["import { QueryBuilder } from \"./QueryBuilder\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { WhereExpressionBuilder } from \"./WhereExpressionBuilder\"\nimport { Brackets } from \"./Brackets\"\nimport { DeleteResult } from \"./result/DeleteResult\"\nimport { ReturningStatementNotSupportedError } from \"../error/ReturningStatementNotSupportedError\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class DeleteQueryBuilder<Entity extends ObjectLiteral>\n    extends QueryBuilder<Entity>\n    implements WhereExpressionBuilder\n{\n    readonly \"@instanceof\" = Symbol.for(\"DeleteQueryBuilder\")\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        connectionOrQueryBuilder: DataSource | QueryBuilder<any>,\n        queryRunner?: QueryRunner,\n    ) {\n        super(connectionOrQueryBuilder as any, queryRunner)\n        this.expressionMap.aliasNamePrefixingEnabled = false\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated SQL query without parameters being replaced.\n     */\n    getQuery(): string {\n        let sql = this.createComment()\n        sql += this.createCteExpression()\n        sql += this.createDeleteExpression()\n        return this.replacePropertyNamesForTheWholeQuery(sql.trim())\n    }\n\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute(): Promise<DeleteResult> {\n        const [sql, parameters] = this.getQueryAndParameters()\n        const queryRunner = this.obtainQueryRunner()\n        let transactionStartedByUs: boolean = false\n\n        try {\n            // start transaction if it was enabled\n            if (\n                this.expressionMap.useTransaction === true &&\n                queryRunner.isTransactionActive === false\n            ) {\n                await queryRunner.startTransaction()\n                transactionStartedByUs = true\n            }\n\n            // call before deletion methods in listeners and subscribers\n            if (\n                this.expressionMap.callListeners === true &&\n                this.expressionMap.mainAlias!.hasMetadata\n            ) {\n                await queryRunner.broadcaster.broadcast(\n                    \"BeforeRemove\",\n                    this.expressionMap.mainAlias!.metadata,\n                )\n            }\n\n            // execute query\n            const queryResult = await queryRunner.query(sql, parameters, true)\n            const deleteResult = DeleteResult.from(queryResult)\n\n            // call after deletion methods in listeners and subscribers\n            if (\n                this.expressionMap.callListeners === true &&\n                this.expressionMap.mainAlias!.hasMetadata\n            ) {\n                await queryRunner.broadcaster.broadcast(\n                    \"AfterRemove\",\n                    this.expressionMap.mainAlias!.metadata,\n                )\n            }\n\n            // close transaction if we started it\n            if (transactionStartedByUs) await queryRunner.commitTransaction()\n\n            return deleteResult\n        } catch (error) {\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction()\n                } catch (rollbackError) {}\n            }\n            throw error\n        } finally {\n            if (queryRunner !== this.queryRunner) {\n                // means we created our own query runner\n                await queryRunner.release()\n            }\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    from<T extends ObjectLiteral>(\n        entityTarget: EntityTarget<T>,\n        aliasName?: string,\n    ): DeleteQueryBuilder<T> {\n        entityTarget = InstanceChecker.isEntitySchema(entityTarget)\n            ? entityTarget.options.name\n            : entityTarget\n        const mainAlias = this.createFromAlias(entityTarget, aliasName)\n        this.expressionMap.setMainAlias(mainAlias)\n        return this as any as DeleteQueryBuilder<T>\n    }\n\n    /**\n     * Sets WHERE condition in the query builder.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    where(\n        where:\n            | Brackets\n            | string\n            | ((qb: this) => string)\n            | ObjectLiteral\n            | ObjectLiteral[],\n        parameters?: ObjectLiteral,\n    ): this {\n        this.expressionMap.wheres = [] // don't move this block below since computeWhereParameter can add where expressions\n        const condition = this.getWhereCondition(where)\n        if (condition)\n            this.expressionMap.wheres = [\n                { type: \"simple\", condition: condition },\n            ]\n        if (parameters) this.setParameters(parameters)\n        return this\n    }\n\n    /**\n     * Adds new AND WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andWhere(\n        where:\n            | Brackets\n            | string\n            | ((qb: this) => string)\n            | ObjectLiteral\n            | ObjectLiteral[],\n        parameters?: ObjectLiteral,\n    ): this {\n        this.expressionMap.wheres.push({\n            type: \"and\",\n            condition: this.getWhereCondition(where),\n        })\n        if (parameters) this.setParameters(parameters)\n        return this\n    }\n\n    /**\n     * Adds new OR WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orWhere(\n        where:\n            | Brackets\n            | string\n            | ((qb: this) => string)\n            | ObjectLiteral\n            | ObjectLiteral[],\n        parameters?: ObjectLiteral,\n    ): this {\n        this.expressionMap.wheres.push({\n            type: \"or\",\n            condition: this.getWhereCondition(where),\n        })\n        if (parameters) this.setParameters(parameters)\n        return this\n    }\n\n    /**\n     * Sets WHERE condition in the query builder with a condition for the given ids.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     */\n    whereInIds(ids: any | any[]): this {\n        return this.where(this.getWhereInIdsCondition(ids))\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    andWhereInIds(ids: any | any[]): this {\n        return this.andWhere(this.getWhereInIdsCondition(ids))\n    }\n\n    /**\n     * Adds new OR WHERE with conditions for the given ids.\n     */\n    orWhereInIds(ids: any | any[]): this {\n        return this.orWhere(this.getWhereInIdsCondition(ids))\n    }\n    /**\n     * Optional returning/output clause.\n     * This will return given column values.\n     */\n    output(columns: string[]): this\n\n    /**\n     * Optional returning/output clause.\n     * Returning is a SQL string containing returning statement.\n     */\n    output(output: string): this\n\n    /**\n     * Optional returning/output clause.\n     */\n    output(output: string | string[]): this\n\n    /**\n     * Optional returning/output clause.\n     */\n    output(output: string | string[]): this {\n        return this.returning(output)\n    }\n\n    /**\n     * Optional returning/output clause.\n     * This will return given column values.\n     */\n    returning(columns: string[]): this\n\n    /**\n     * Optional returning/output clause.\n     * Returning is a SQL string containing returning statement.\n     */\n    returning(returning: string): this\n\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning: string | string[]): this\n\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning: string | string[]): this {\n        // not all databases support returning/output cause\n        if (!this.connection.driver.isReturningSqlSupported(\"delete\")) {\n            throw new ReturningStatementNotSupportedError()\n        }\n\n        this.expressionMap.returning = returning\n        return this\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates DELETE express used to perform query.\n     */\n    protected createDeleteExpression() {\n        const tableName = this.getTableName(this.getMainTableName())\n        const whereExpression = this.createWhereExpression()\n        const returningExpression = this.createReturningExpression(\"delete\")\n\n        if (returningExpression === \"\") {\n            return `DELETE FROM ${tableName}${whereExpression}`\n        }\n        if (this.connection.driver.options.type === \"mssql\") {\n            return `DELETE FROM ${tableName} OUTPUT ${returningExpression}${whereExpression}`\n        }\n        return `DELETE FROM ${tableName}${whereExpression} RETURNING ${returningExpression}`\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}