{"ast":null,"code":"/**\n * Metadata args utility functions.\n */\nexport class MetadataUtils {\n  /**\n   * Gets given's entity all inherited classes.\n   * Gives in order from parents to children.\n   * For example Post extends ContentModel which extends Unit it will give\n   * [Unit, ContentModel, Post]\n   */\n  static getInheritanceTree(entity) {\n    const tree = [entity];\n    const getPrototypeOf = object => {\n      const proto = Object.getPrototypeOf(object);\n      if (proto && proto.name) {\n        tree.push(proto);\n        getPrototypeOf(proto);\n      }\n    };\n    getPrototypeOf(entity);\n    return tree;\n  }\n  /**\n   * Checks if this table is inherited from another table.\n   */\n  static isInherited(target1, target2) {\n    return target1.prototype instanceof target2;\n  }\n  /**\n   * Filters given array of targets by a given classes.\n   * If classes are not given, then it returns array itself.\n   */\n  static filterByTarget(array, classes) {\n    if (!classes) return array;\n    return array.filter(item => item.target && classes.indexOf(item.target) !== -1);\n  }\n}","map":{"version":3,"names":["MetadataUtils","getInheritanceTree","entity","tree","getPrototypeOf","object","proto","Object","name","push","isInherited","target1","target2","prototype","filterByTarget","array","classes","filter","item","target","indexOf"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\metadata-builder\\MetadataUtils.ts"],"sourcesContent":["/**\n * Metadata args utility functions.\n */\nexport class MetadataUtils {\n    /**\n     * Gets given's entity all inherited classes.\n     * Gives in order from parents to children.\n     * For example Post extends ContentModel which extends Unit it will give\n     * [Unit, ContentModel, Post]\n     */\n    static getInheritanceTree(entity: Function): Function[] {\n        const tree: Function[] = [entity]\n        const getPrototypeOf = (object: Function): void => {\n            const proto = Object.getPrototypeOf(object)\n            if (proto && proto.name) {\n                tree.push(proto)\n                getPrototypeOf(proto)\n            }\n        }\n        getPrototypeOf(entity)\n        return tree\n    }\n\n    /**\n     * Checks if this table is inherited from another table.\n     */\n    static isInherited(target1: Function, target2: Function) {\n        return target1.prototype instanceof target2\n    }\n\n    /**\n     * Filters given array of targets by a given classes.\n     * If classes are not given, then it returns array itself.\n     */\n    static filterByTarget<T extends { target?: any }>(\n        array: T[],\n        classes?: any[],\n    ): T[] {\n        if (!classes) return array\n        return array.filter(\n            (item) => item.target && classes.indexOf(item.target) !== -1,\n        )\n    }\n}\n"],"mappings":"AAAA;;;AAGA,OAAM,MAAOA,aAAa;EACtB;;;;;;EAMA,OAAOC,kBAAkBA,CAACC,MAAgB;IACtC,MAAMC,IAAI,GAAe,CAACD,MAAM,CAAC;IACjC,MAAME,cAAc,GAAIC,MAAgB,IAAU;MAC9C,MAAMC,KAAK,GAAGC,MAAM,CAACH,cAAc,CAACC,MAAM,CAAC;MAC3C,IAAIC,KAAK,IAAIA,KAAK,CAACE,IAAI,EAAE;QACrBL,IAAI,CAACM,IAAI,CAACH,KAAK,CAAC;QAChBF,cAAc,CAACE,KAAK,CAAC;MACzB;IACJ,CAAC;IACDF,cAAc,CAACF,MAAM,CAAC;IACtB,OAAOC,IAAI;EACf;EAEA;;;EAGA,OAAOO,WAAWA,CAACC,OAAiB,EAAEC,OAAiB;IACnD,OAAOD,OAAO,CAACE,SAAS,YAAYD,OAAO;EAC/C;EAEA;;;;EAIA,OAAOE,cAAcA,CACjBC,KAAU,EACVC,OAAe;IAEf,IAAI,CAACA,OAAO,EAAE,OAAOD,KAAK;IAC1B,OAAOA,KAAK,CAACE,MAAM,CACdC,IAAI,IAAKA,IAAI,CAACC,MAAM,IAAIH,OAAO,CAACI,OAAO,CAACF,IAAI,CAACC,MAAM,CAAC,KAAK,CAAC,CAAC,CAC/D;EACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}