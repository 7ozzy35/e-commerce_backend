{"ast":null,"code":"import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { ExpoQueryRunner } from \"./ExpoQueryRunner\";\nexport class ExpoDriver extends AbstractSqliteDriver {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connection) {\n    super(connection);\n    this.database = this.options.database;\n    // load sqlite package\n    this.sqlite = this.options.driver;\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Closes connection with database.\n   */\n  async disconnect() {\n    return new Promise((ok, fail) => {\n      try {\n        this.queryRunner = undefined;\n        this.databaseConnection._db.close();\n        this.databaseConnection = undefined;\n        ok();\n      } catch (error) {\n        fail(error);\n      }\n    });\n  }\n  /**\n   * Creates a query runner used to execute database queries.\n   */\n  createQueryRunner(mode) {\n    if (!this.queryRunner) this.queryRunner = new ExpoQueryRunner(this);\n    return this.queryRunner;\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates connection with the database.\n   */\n  createDatabaseConnection() {\n    return new Promise((ok, fail) => {\n      try {\n        const databaseConnection = this.sqlite.openDatabase(this.options.database);\n        /*\n        // we need to enable foreign keys in sqlite to make sure all foreign key related features\n        // working properly. this also makes onDelete work with sqlite.\n        */\n        databaseConnection.transaction(tsx => {\n          tsx.executeSql(`PRAGMA foreign_keys = ON`, [], (t, result) => {\n            ok(databaseConnection);\n          }, (t, err) => {\n            fail({\n              transaction: t,\n              error: err\n            });\n          });\n        }, err => {\n          fail(err);\n        });\n      } catch (error) {\n        fail(error);\n      }\n    });\n  }\n}","map":{"version":3,"names":["AbstractSqliteDriver","ExpoQueryRunner","ExpoDriver","constructor","connection","database","options","sqlite","driver","disconnect","Promise","ok","fail","queryRunner","undefined","databaseConnection","_db","close","error","createQueryRunner","mode","createDatabaseConnection","openDatabase","transaction","tsx","executeSql","t","result","err"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\driver\\expo\\ExpoDriver.ts"],"sourcesContent":["import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\"\nimport { ExpoConnectionOptions } from \"./ExpoConnectionOptions\"\nimport { ExpoQueryRunner } from \"./ExpoQueryRunner\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { DataSource } from \"../../data-source/DataSource\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\n\nexport class ExpoDriver extends AbstractSqliteDriver {\n    options: ExpoConnectionOptions\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        super(connection)\n\n        this.database = this.options.database\n\n        // load sqlite package\n        this.sqlite = this.options.driver\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            try {\n                this.queryRunner = undefined\n                this.databaseConnection._db.close()\n                this.databaseConnection = undefined\n                ok()\n            } catch (error) {\n                fail(error)\n            }\n        })\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner) this.queryRunner = new ExpoQueryRunner(this)\n\n        return this.queryRunner\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected createDatabaseConnection() {\n        return new Promise<void>((ok, fail) => {\n            try {\n                const databaseConnection = this.sqlite.openDatabase(\n                    this.options.database,\n                )\n                /*\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                // working properly. this also makes onDelete work with sqlite.\n                */\n                databaseConnection.transaction(\n                    (tsx: any) => {\n                        tsx.executeSql(\n                            `PRAGMA foreign_keys = ON`,\n                            [],\n                            (t: any, result: any) => {\n                                ok(databaseConnection)\n                            },\n                            (t: any, err: any) => {\n                                fail({ transaction: t, error: err })\n                            },\n                        )\n                    },\n                    (err: any) => {\n                        fail(err)\n                    },\n                )\n            } catch (error) {\n                fail(error)\n            }\n        })\n    }\n}\n"],"mappings":"AAAA,SAASA,oBAAoB,QAAQ,yCAAyC;AAE9E,SAASC,eAAe,QAAQ,mBAAmB;AAKnD,OAAM,MAAOC,UAAW,SAAQF,oBAAoB;EAGhD;EACA;EACA;EAEAG,YAAYC,UAAsB;IAC9B,KAAK,CAACA,UAAU,CAAC;IAEjB,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACC,OAAO,CAACD,QAAQ;IAErC;IACA,IAAI,CAACE,MAAM,GAAG,IAAI,CAACD,OAAO,CAACE,MAAM;EACrC;EAEA;EACA;EACA;EAEA;;;EAGA,MAAMC,UAAUA,CAAA;IACZ,OAAO,IAAIC,OAAO,CAAO,CAACC,EAAE,EAAEC,IAAI,KAAI;MAClC,IAAI;QACA,IAAI,CAACC,WAAW,GAAGC,SAAS;QAC5B,IAAI,CAACC,kBAAkB,CAACC,GAAG,CAACC,KAAK,EAAE;QACnC,IAAI,CAACF,kBAAkB,GAAGD,SAAS;QACnCH,EAAE,EAAE;MACR,CAAC,CAAC,OAAOO,KAAK,EAAE;QACZN,IAAI,CAACM,KAAK,CAAC;MACf;IACJ,CAAC,CAAC;EACN;EAEA;;;EAGAC,iBAAiBA,CAACC,IAAqB;IACnC,IAAI,CAAC,IAAI,CAACP,WAAW,EAAE,IAAI,CAACA,WAAW,GAAG,IAAIZ,eAAe,CAAC,IAAI,CAAC;IAEnE,OAAO,IAAI,CAACY,WAAW;EAC3B;EAEA;EACA;EACA;EAEA;;;EAGUQ,wBAAwBA,CAAA;IAC9B,OAAO,IAAIX,OAAO,CAAO,CAACC,EAAE,EAAEC,IAAI,KAAI;MAClC,IAAI;QACA,MAAMG,kBAAkB,GAAG,IAAI,CAACR,MAAM,CAACe,YAAY,CAC/C,IAAI,CAAChB,OAAO,CAACD,QAAQ,CACxB;QACD;;;;QAIAU,kBAAkB,CAACQ,WAAW,CACzBC,GAAQ,IAAI;UACTA,GAAG,CAACC,UAAU,CACV,0BAA0B,EAC1B,EAAE,EACF,CAACC,CAAM,EAAEC,MAAW,KAAI;YACpBhB,EAAE,CAACI,kBAAkB,CAAC;UAC1B,CAAC,EACD,CAACW,CAAM,EAAEE,GAAQ,KAAI;YACjBhB,IAAI,CAAC;cAAEW,WAAW,EAAEG,CAAC;cAAER,KAAK,EAAEU;YAAG,CAAE,CAAC;UACxC,CAAC,CACJ;QACL,CAAC,EACAA,GAAQ,IAAI;UACThB,IAAI,CAACgB,GAAG,CAAC;QACb,CAAC,CACJ;MACL,CAAC,CAAC,OAAOV,KAAK,EAAE;QACZN,IAAI,CAACM,KAAK,CAAC;MACf;IACJ,CAAC,CAAC;EACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}