{"ast":null,"code":"import { getMetadataArgsStorage } from \"../globals\";\nimport { TypeORMError } from \"../error\";\n/**\n * Creates a database exclusion.\n * Can be used on entity.\n * Can create exclusions with composite columns when used on entity.\n */\nexport function Exclusion(nameOrExpression, maybeExpression) {\n  const name = maybeExpression ? nameOrExpression : undefined;\n  const expression = maybeExpression ? maybeExpression : nameOrExpression;\n  if (!expression) throw new TypeORMError(`Exclusion expression is required`);\n  return function (clsOrObject, propertyName) {\n    getMetadataArgsStorage().exclusions.push({\n      target: propertyName ? clsOrObject.constructor : clsOrObject,\n      name: name,\n      expression: expression\n    });\n  };\n}","map":{"version":3,"names":["getMetadataArgsStorage","TypeORMError","Exclusion","nameOrExpression","maybeExpression","name","undefined","expression","clsOrObject","propertyName","exclusions","push","target","constructor"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\decorator\\Exclusion.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../globals\"\nimport { ExclusionMetadataArgs } from \"../metadata-args/ExclusionMetadataArgs\"\nimport { TypeORMError } from \"../error\"\n\n/**\n * Creates a database exclusion.\n * Can be used on entity.\n * Can create exclusions with composite columns when used on entity.\n */\nexport function Exclusion(\n    expression: string,\n): ClassDecorator & PropertyDecorator\n\n/**\n * Creates a database exclusion.\n * Can be used on entity.\n * Can create exclusions with composite columns when used on entity.\n */\nexport function Exclusion(\n    name: string,\n    expression: string,\n): ClassDecorator & PropertyDecorator\n\n/**\n * Creates a database exclusion.\n * Can be used on entity.\n * Can create exclusions with composite columns when used on entity.\n */\nexport function Exclusion(\n    nameOrExpression: string,\n    maybeExpression?: string,\n): ClassDecorator & PropertyDecorator {\n    const name = maybeExpression ? nameOrExpression : undefined\n    const expression = maybeExpression ? maybeExpression : nameOrExpression\n\n    if (!expression) throw new TypeORMError(`Exclusion expression is required`)\n\n    return function (\n        clsOrObject: Function | Object,\n        propertyName?: string | symbol,\n    ) {\n        getMetadataArgsStorage().exclusions.push({\n            target: propertyName\n                ? clsOrObject.constructor\n                : (clsOrObject as Function),\n            name: name,\n            expression: expression,\n        } as ExclusionMetadataArgs)\n    }\n}\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,YAAY;AAEnD,SAASC,YAAY,QAAQ,UAAU;AAqBvC;;;;;AAKA,OAAM,SAAUC,SAASA,CACrBC,gBAAwB,EACxBC,eAAwB;EAExB,MAAMC,IAAI,GAAGD,eAAe,GAAGD,gBAAgB,GAAGG,SAAS;EAC3D,MAAMC,UAAU,GAAGH,eAAe,GAAGA,eAAe,GAAGD,gBAAgB;EAEvE,IAAI,CAACI,UAAU,EAAE,MAAM,IAAIN,YAAY,CAAC,kCAAkC,CAAC;EAE3E,OAAO,UACHO,WAA8B,EAC9BC,YAA8B;IAE9BT,sBAAsB,EAAE,CAACU,UAAU,CAACC,IAAI,CAAC;MACrCC,MAAM,EAAEH,YAAY,GACdD,WAAW,CAACK,WAAW,GACtBL,WAAwB;MAC/BH,IAAI,EAAEA,IAAI;MACVE,UAAU,EAAEA;KACU,CAAC;EAC/B,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}