{"ast":null,"code":"import { PlatformTools } from \"../platform/PlatformTools\";\nimport { AbstractLogger } from \"./AbstractLogger\";\n/**\n * Performs logging of the events in TypeORM.\n * This version of logger uses console to log events and use syntax highlighting.\n */\nexport class AdvancedConsoleLogger extends AbstractLogger {\n  /**\n   * Write log to specific output.\n   */\n  writeLog(level, logMessage, queryRunner) {\n    const messages = this.prepareLogMessages(logMessage);\n    for (let message of messages) {\n      switch (message.type ?? level) {\n        case \"log\":\n        case \"schema-build\":\n        case \"migration\":\n          PlatformTools.log(String(message.message));\n          break;\n        case \"info\":\n        case \"query\":\n          if (message.prefix) {\n            PlatformTools.logInfo(message.prefix, message.message);\n          } else {\n            PlatformTools.log(String(message.message));\n          }\n          break;\n        case \"warn\":\n        case \"query-slow\":\n          if (message.prefix) {\n            PlatformTools.logWarn(message.prefix, message.message);\n          } else {\n            console.warn(PlatformTools.warn(String(message.message)));\n          }\n          break;\n        case \"error\":\n        case \"query-error\":\n          if (message.prefix) {\n            PlatformTools.logError(message.prefix, String(message.message));\n          } else {\n            console.error(PlatformTools.error(String(message.message)));\n          }\n          break;\n      }\n    }\n  }\n}","map":{"version":3,"names":["PlatformTools","AbstractLogger","AdvancedConsoleLogger","writeLog","level","logMessage","queryRunner","messages","prepareLogMessages","message","type","log","String","prefix","logInfo","logWarn","console","warn","logError","error"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\logger\\AdvancedConsoleLogger.ts"],"sourcesContent":["import { PlatformTools } from \"../platform/PlatformTools\"\nimport { AbstractLogger } from \"./AbstractLogger\"\nimport { LogLevel, LogMessage } from \"./Logger\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\n\n/**\n * Performs logging of the events in TypeORM.\n * This version of logger uses console to log events and use syntax highlighting.\n */\nexport class AdvancedConsoleLogger extends AbstractLogger {\n    /**\n     * Write log to specific output.\n     */\n    protected writeLog(\n        level: LogLevel,\n        logMessage: LogMessage | LogMessage[],\n        queryRunner?: QueryRunner,\n    ) {\n        const messages = this.prepareLogMessages(logMessage)\n\n        for (let message of messages) {\n            switch (message.type ?? level) {\n                case \"log\":\n                case \"schema-build\":\n                case \"migration\":\n                    PlatformTools.log(String(message.message))\n                    break\n\n                case \"info\":\n                case \"query\":\n                    if (message.prefix) {\n                        PlatformTools.logInfo(message.prefix, message.message)\n                    } else {\n                        PlatformTools.log(String(message.message))\n                    }\n                    break\n\n                case \"warn\":\n                case \"query-slow\":\n                    if (message.prefix) {\n                        PlatformTools.logWarn(message.prefix, message.message)\n                    } else {\n                        console.warn(\n                            PlatformTools.warn(String(message.message)),\n                        )\n                    }\n                    break\n\n                case \"error\":\n                case \"query-error\":\n                    if (message.prefix) {\n                        PlatformTools.logError(\n                            message.prefix,\n                            String(message.message),\n                        )\n                    } else {\n                        console.error(\n                            PlatformTools.error(String(message.message)),\n                        )\n                    }\n                    break\n            }\n        }\n    }\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,2BAA2B;AACzD,SAASC,cAAc,QAAQ,kBAAkB;AAIjD;;;;AAIA,OAAM,MAAOC,qBAAsB,SAAQD,cAAc;EACrD;;;EAGUE,QAAQA,CACdC,KAAe,EACfC,UAAqC,EACrCC,WAAyB;IAEzB,MAAMC,QAAQ,GAAG,IAAI,CAACC,kBAAkB,CAACH,UAAU,CAAC;IAEpD,KAAK,IAAII,OAAO,IAAIF,QAAQ,EAAE;MAC1B,QAAQE,OAAO,CAACC,IAAI,IAAIN,KAAK;QACzB,KAAK,KAAK;QACV,KAAK,cAAc;QACnB,KAAK,WAAW;UACZJ,aAAa,CAACW,GAAG,CAACC,MAAM,CAACH,OAAO,CAACA,OAAO,CAAC,CAAC;UAC1C;QAEJ,KAAK,MAAM;QACX,KAAK,OAAO;UACR,IAAIA,OAAO,CAACI,MAAM,EAAE;YAChBb,aAAa,CAACc,OAAO,CAACL,OAAO,CAACI,MAAM,EAAEJ,OAAO,CAACA,OAAO,CAAC;UAC1D,CAAC,MAAM;YACHT,aAAa,CAACW,GAAG,CAACC,MAAM,CAACH,OAAO,CAACA,OAAO,CAAC,CAAC;UAC9C;UACA;QAEJ,KAAK,MAAM;QACX,KAAK,YAAY;UACb,IAAIA,OAAO,CAACI,MAAM,EAAE;YAChBb,aAAa,CAACe,OAAO,CAACN,OAAO,CAACI,MAAM,EAAEJ,OAAO,CAACA,OAAO,CAAC;UAC1D,CAAC,MAAM;YACHO,OAAO,CAACC,IAAI,CACRjB,aAAa,CAACiB,IAAI,CAACL,MAAM,CAACH,OAAO,CAACA,OAAO,CAAC,CAAC,CAC9C;UACL;UACA;QAEJ,KAAK,OAAO;QACZ,KAAK,aAAa;UACd,IAAIA,OAAO,CAACI,MAAM,EAAE;YAChBb,aAAa,CAACkB,QAAQ,CAClBT,OAAO,CAACI,MAAM,EACdD,MAAM,CAACH,OAAO,CAACA,OAAO,CAAC,CAC1B;UACL,CAAC,MAAM;YACHO,OAAO,CAACG,KAAK,CACTnB,aAAa,CAACmB,KAAK,CAACP,MAAM,CAACH,OAAO,CAACA,OAAO,CAAC,CAAC,CAC/C;UACL;UACA;MACR;IACJ;EACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}