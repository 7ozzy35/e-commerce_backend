{"ast":null,"code":"import express from 'express';\nimport { AppDataSource } from './data_source';\nimport { Product } from './entity/Product';\nimport cors from 'cors';\nconst app = express();\napp.use(express.json());\napp.use(cors());\n\n// Veritabanını başlat\nAppDataSource.initialize().then(() => {\n  console.log('Veritabanına başarıyla bağlanıldı.');\n}).catch(error => console.log('Veritabanı bağlantı hatası:', error));\n\n// Tüm ürünleri listeleme (READ)\napp.get('/product', async (req, res) => {\n  try {\n    const productRepository = AppDataSource.getRepository(Product);\n    const products = await productRepository.find();\n    res.json(products);\n  } catch (error) {\n    res.status(500).json({\n      message: 'Ürünler listelenirken bir hata oluştu'\n    });\n  }\n});\n\n// Belirli bir ürünü listeleme (READ) \napp.get('/product/:id', async (req, res) => {\n  try {\n    const productRepository = AppDataSource.getRepository(Product);\n    const product = await productRepository.findOneBy({\n      id: parseInt(req.params.id)\n    });\n    if (product) {\n      res.json(product);\n    } else {\n      res.status(404).json({\n        message: 'Ürün bulunamadı'\n      });\n    }\n  } catch (error) {\n    res.status(500).json({\n      message: 'Ürün getirilirken bir hata oluştu'\n    });\n  }\n});\n\n// Yeni ürün ekleme (CREATE)\napp.post('/product', async (req, res) => {\n  try {\n    const productRepository = AppDataSource.getRepository(Product);\n    const newProduct = productRepository.create(req.body);\n    const result = await productRepository.save(newProduct);\n    res.status(201).json(result);\n  } catch (error) {\n    res.status(500).json({\n      message: 'Ürün eklenirken bir hata oluştu'\n    });\n  }\n});\n\n// Ürün güncelleme (UPDATE)\napp.put('/product/:id', async (req, res) => {\n  try {\n    const productRepository = AppDataSource.getRepository(Product);\n    const product = await productRepository.findOneBy({\n      id: parseInt(req.params.id)\n    });\n    if (!product) {\n      return res.status(404).json({\n        message: 'Güncellenecek ürün bulunamadı'\n      });\n    }\n    productRepository.merge(product, req.body);\n    const result = await productRepository.save(product);\n    res.json(result);\n  } catch (error) {\n    res.status(500).json({\n      message: 'Ürün güncellenirken bir hata oluştu'\n    });\n  }\n});\n\n// Ürün silme (DELETE)\napp.delete('/product/:id', async (req, res) => {\n  try {\n    const productRepository = AppDataSource.getRepository(Product);\n    const product = await productRepository.findOneBy({\n      id: parseInt(req.params.id)\n    });\n    if (!product) {\n      return res.status(404).json({\n        message: 'Silinecek ürün bulunamadı'\n      });\n    }\n    await productRepository.remove(product);\n    res.status(200).json({\n      message: 'Ürün başarıyla silindi'\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: 'Ürün silinirken bir hata oluştu'\n    });\n  }\n});\n\n// Sunucuyu başlat\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Sunucu ${PORT} portunda çalışıyor.`);\n});","map":{"version":3,"names":["express","AppDataSource","Product","cors","app","use","json","initialize","then","console","log","catch","error","get","req","res","productRepository","getRepository","products","find","status","message","product","findOneBy","id","parseInt","params","post","newProduct","create","body","result","save","put","merge","delete","remove","PORT","listen"],"sources":["D:/Ronwell Task 1/src/index.ts"],"sourcesContent":["import express, { Request, Response } from 'express';\r\nimport { AppDataSource } from './data_source';\r\nimport { Product } from './entity/Product';\r\nimport cors from 'cors';\r\n\r\nconst app = express();\r\napp.use(express.json());\r\napp.use(cors());\r\n\r\n// Veritabanını başlat\r\nAppDataSource.initialize()\r\n  .then(() => {\r\n    console.log('Veritabanına başarıyla bağlanıldı.');\r\n  })\r\n  .catch((error) => console.log('Veritabanı bağlantı hatası:', error));\r\n\r\n// Tüm ürünleri listeleme (READ)\r\napp.get('/product', async (req: Request, res: Response) => {\r\n  try {\r\n    const productRepository = AppDataSource.getRepository(Product);\r\n    const products = await productRepository.find();\r\n    res.json(products);\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Ürünler listelenirken bir hata oluştu' });\r\n  }\r\n});\r\n\r\n// Belirli bir ürünü listeleme (READ) \r\napp.get('/product/:id', async (req: Request, res: Response) => {\r\n  try {\r\n    const productRepository = AppDataSource.getRepository(Product);\r\n    const product = await productRepository.findOneBy({ id: parseInt(req.params.id) });\r\n    if (product) {\r\n      res.json(product);\r\n    } else {\r\n      res.status(404).json({ message: 'Ürün bulunamadı' });\r\n    }\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Ürün getirilirken bir hata oluştu' });\r\n  }\r\n});\r\n\r\n// Yeni ürün ekleme (CREATE)\r\napp.post('/product', async (req: Request, res: Response) => {\r\n  try {\r\n    const productRepository = AppDataSource.getRepository(Product);\r\n    const newProduct = productRepository.create(req.body);\r\n    const result = await productRepository.save(newProduct);\r\n    res.status(201).json(result);\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Ürün eklenirken bir hata oluştu' });\r\n  }\r\n});\r\n\r\n// Ürün güncelleme (UPDATE)\r\napp.put('/product/:id', async (req: Request, res: Response) => {\r\n  try {\r\n    const productRepository = AppDataSource.getRepository(Product);\r\n    const product = await productRepository.findOneBy({ id: parseInt(req.params.id) });\r\n    \r\n    if (!product) {\r\n      return res.status(404).json({ message: 'Güncellenecek ürün bulunamadı' });\r\n    }\r\n\r\n    productRepository.merge(product, req.body);\r\n    const result = await productRepository.save(product);\r\n    res.json(result);\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Ürün güncellenirken bir hata oluştu' });\r\n  }\r\n});\r\n\r\n// Ürün silme (DELETE)\r\napp.delete('/product/:id', async (req: Request, res: Response) => {\r\n  try {\r\n    const productRepository = AppDataSource.getRepository(Product);\r\n    const product = await productRepository.findOneBy({ id: parseInt(req.params.id) });\r\n    \r\n    if (!product) {\r\n      return res.status(404).json({ message: 'Silinecek ürün bulunamadı' });\r\n    }\r\n\r\n    await productRepository.remove(product);\r\n    res.status(200).json({ message: 'Ürün başarıyla silindi' });\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Ürün silinirken bir hata oluştu' });\r\n  }\r\n});\r\n\r\n// Sunucuyu başlat\r\nconst PORT = 3000;\r\napp.listen(PORT, () => {\r\n  console.log(`Sunucu ${PORT} portunda çalışıyor.`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}