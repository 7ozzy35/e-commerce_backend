{"ast":null,"code":"import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { QueryResult } from \"../../query-runner/QueryResult\";\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class CapacitorQueryRunner extends AbstractSqliteQueryRunner {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(driver) {\n    super();\n    this.driver = driver;\n    this.connection = driver.connection;\n    this.broadcaster = new Broadcaster(this);\n  }\n  /**\n   * Called before migrations are run.\n   */\n  async beforeMigration() {\n    await this.query(`PRAGMA foreign_keys = OFF`);\n  }\n  /**\n   * Called after migrations are run.\n   */\n  async afterMigration() {\n    await this.query(`PRAGMA foreign_keys = ON`);\n  }\n  async executeSet(set) {\n    if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n    const databaseConnection = await this.connect();\n    return databaseConnection.executeSet(set, false);\n  }\n  /**\n   * Executes a given SQL query.\n   */\n  async query(query, parameters, useStructuredResult = false) {\n    if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n    const databaseConnection = await this.connect();\n    this.driver.connection.logger.logQuery(query, parameters, this);\n    const command = query.substring(0, query.indexOf(\" \") !== -1 ? query.indexOf(\" \") : undefined);\n    try {\n      let raw;\n      if ([\"BEGIN\", \"ROLLBACK\", \"COMMIT\", \"CREATE\", \"ALTER\", \"DROP\"].indexOf(command) !== -1) {\n        raw = await databaseConnection.execute(query, false);\n      } else if ([\"INSERT\", \"UPDATE\", \"DELETE\", \"PRAGMA\"].indexOf(command) !== -1) {\n        raw = await databaseConnection.run(query, parameters, false);\n      } else {\n        raw = await databaseConnection.query(query, parameters || []);\n      }\n      const result = new QueryResult();\n      if (raw?.hasOwnProperty(\"values\")) {\n        result.raw = raw.values;\n        result.records = raw.values;\n      }\n      if (raw?.hasOwnProperty(\"changes\")) {\n        result.affected = raw.changes.changes;\n        result.raw = raw.changes.lastId || raw.changes.changes;\n      }\n      if (!useStructuredResult) {\n        return result.raw;\n      }\n      return result;\n    } catch (err) {\n      this.driver.connection.logger.logQueryError(err, query, parameters, this);\n      throw new QueryFailedError(query, parameters, err);\n    }\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Parametrizes given object of values. Used to create column=value queries.\n   */\n  parametrize(objectLiteral) {\n    return Object.keys(objectLiteral).map(key => `\"${key}\"` + \"=?\");\n  }\n}","map":{"version":3,"names":["QueryRunnerAlreadyReleasedError","QueryFailedError","AbstractSqliteQueryRunner","Broadcaster","QueryResult","CapacitorQueryRunner","constructor","driver","connection","broadcaster","beforeMigration","query","afterMigration","executeSet","set","isReleased","databaseConnection","connect","parameters","useStructuredResult","logger","logQuery","command","substring","indexOf","undefined","raw","execute","run","result","hasOwnProperty","values","records","affected","changes","lastId","err","logQueryError","parametrize","objectLiteral","Object","keys","map","key"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\driver\\capacitor\\CapacitorQueryRunner.ts"],"sourcesContent":["import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\nimport { QueryFailedError } from \"../../error/QueryFailedError\"\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\"\nimport { CapacitorDriver } from \"./CapacitorDriver\"\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { QueryResult } from \"../../query-runner/QueryResult\"\n\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class CapacitorQueryRunner extends AbstractSqliteQueryRunner {\n    /**\n     * Database driver used by connection.\n     */\n    driver: CapacitorDriver\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: CapacitorDriver) {\n        super()\n        this.driver = driver\n        this.connection = driver.connection\n        this.broadcaster = new Broadcaster(this)\n    }\n\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = OFF`)\n    }\n\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = ON`)\n    }\n\n    async executeSet(set: { statement: string; values?: any[] }[]) {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        const databaseConnection = await this.connect()\n\n        return databaseConnection.executeSet(set, false)\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(\n        query: string,\n        parameters?: any[],\n        useStructuredResult = false,\n    ): Promise<any> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        const databaseConnection = await this.connect()\n\n        this.driver.connection.logger.logQuery(query, parameters, this)\n\n        const command = query.substring(\n            0,\n            query.indexOf(\" \") !== -1 ? query.indexOf(\" \") : undefined,\n        )\n\n        try {\n            let raw: any\n\n            if (\n                [\n                    \"BEGIN\",\n                    \"ROLLBACK\",\n                    \"COMMIT\",\n                    \"CREATE\",\n                    \"ALTER\",\n                    \"DROP\",\n                ].indexOf(command) !== -1\n            ) {\n                raw = await databaseConnection.execute(query, false)\n            } else if (\n                [\"INSERT\", \"UPDATE\", \"DELETE\", \"PRAGMA\"].indexOf(command) !== -1\n            ) {\n                raw = await databaseConnection.run(query, parameters, false)\n            } else {\n                raw = await databaseConnection.query(query, parameters || [])\n            }\n\n            const result = new QueryResult()\n\n            if (raw?.hasOwnProperty(\"values\")) {\n                result.raw = raw.values\n                result.records = raw.values\n            }\n\n            if (raw?.hasOwnProperty(\"changes\")) {\n                result.affected = raw.changes.changes\n                result.raw = raw.changes.lastId || raw.changes.changes\n            }\n\n            if (!useStructuredResult) {\n                return result.raw\n            }\n\n            return result\n        } catch (err) {\n            this.driver.connection.logger.logQueryError(\n                err,\n                query,\n                parameters,\n                this,\n            )\n\n            throw new QueryFailedError(query, parameters, err)\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral): string[] {\n        return Object.keys(objectLiteral).map((key) => `\"${key}\"` + \"=?\")\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}