{"ast":null,"code":"import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { CordovaQueryRunner } from \"./CordovaQueryRunner\";\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\nexport class CordovaDriver extends AbstractSqliteDriver {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connection) {\n    super(connection);\n    this.transactionSupport = \"none\";\n    // this.connection = connection;\n    // this.options = connection.options as CordovaConnectionOptions;\n    this.database = this.options.database;\n    // load sqlite package\n    this.loadDependencies();\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Closes connection with database.\n   */\n  async disconnect() {\n    this.queryRunner = undefined;\n    return new Promise((ok, fail) => {\n      this.databaseConnection.close(ok, fail);\n    });\n  }\n  /**\n   * Creates a query runner used to execute database queries.\n   */\n  createQueryRunner(mode) {\n    if (!this.queryRunner) this.queryRunner = new CordovaQueryRunner(this);\n    return this.queryRunner;\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates connection with the database.\n   */\n  async createDatabaseConnection() {\n    const options = Object.assign({}, {\n      name: this.options.database,\n      location: this.options.location\n    }, this.options.extra || {});\n    const connection = await new Promise((resolve, fail) => {\n      this.sqlite.openDatabase(options, db => resolve(db), err => fail(err));\n    });\n    await new Promise((ok, fail) => {\n      // we need to enable foreign keys in sqlite to make sure all foreign key related features\n      // working properly. this also makes onDelete to work with sqlite.\n      connection.executeSql(`PRAGMA foreign_keys = ON`, [], () => ok(), err => fail(err));\n    });\n    return connection;\n  }\n  /**\n   * If driver dependency is not given explicitly, then try to load it via \"require\".\n   */\n  loadDependencies() {\n    try {\n      const sqlite = this.options.driver || window.sqlitePlugin;\n      this.sqlite = sqlite;\n    } catch (e) {\n      throw new DriverPackageNotInstalledError(\"Cordova-SQLite\", \"cordova-sqlite-storage\");\n    }\n  }\n}","map":{"version":3,"names":["AbstractSqliteDriver","CordovaQueryRunner","DriverPackageNotInstalledError","CordovaDriver","constructor","connection","transactionSupport","database","options","loadDependencies","disconnect","queryRunner","undefined","Promise","ok","fail","databaseConnection","close","createQueryRunner","mode","createDatabaseConnection","Object","assign","name","location","extra","resolve","sqlite","openDatabase","db","err","executeSql","driver","window","sqlitePlugin","e"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\driver\\cordova\\CordovaDriver.ts"],"sourcesContent":["import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\"\nimport { CordovaConnectionOptions } from \"./CordovaConnectionOptions\"\nimport { CordovaQueryRunner } from \"./CordovaQueryRunner\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { DataSource } from \"../../data-source/DataSource\"\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\n\n// needed for typescript compiler\ninterface Window {\n    sqlitePlugin: any\n}\n\ndeclare let window: Window\n\nexport class CordovaDriver extends AbstractSqliteDriver {\n    options: CordovaConnectionOptions\n\n    transactionSupport = \"none\" as const\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        super(connection)\n\n        // this.connection = connection;\n        // this.options = connection.options as CordovaConnectionOptions;\n        this.database = this.options.database\n\n        // load sqlite package\n        this.loadDependencies()\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        this.queryRunner = undefined\n\n        return new Promise<void>((ok, fail) => {\n            this.databaseConnection.close(ok, fail)\n        })\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner) this.queryRunner = new CordovaQueryRunner(this)\n\n        return this.queryRunner\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected async createDatabaseConnection() {\n        const options = Object.assign(\n            {},\n            {\n                name: this.options.database,\n                location: this.options.location,\n            },\n            this.options.extra || {},\n        )\n\n        const connection = await new Promise<any>((resolve, fail) => {\n            this.sqlite.openDatabase(\n                options,\n                (db: any) => resolve(db),\n                (err: any) => fail(err),\n            )\n        })\n\n        await new Promise<void>((ok, fail) => {\n            // we need to enable foreign keys in sqlite to make sure all foreign key related features\n            // working properly. this also makes onDelete to work with sqlite.\n            connection.executeSql(\n                `PRAGMA foreign_keys = ON`,\n                [],\n                () => ok(),\n                (err: any) => fail(err),\n            )\n        })\n\n        return connection\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            const sqlite = this.options.driver || window.sqlitePlugin\n            this.sqlite = sqlite\n        } catch (e) {\n            throw new DriverPackageNotInstalledError(\n                \"Cordova-SQLite\",\n                \"cordova-sqlite-storage\",\n            )\n        }\n    }\n}\n"],"mappings":"AAAA,SAASA,oBAAoB,QAAQ,yCAAyC;AAE9E,SAASC,kBAAkB,QAAQ,sBAAsB;AAGzD,SAASC,8BAA8B,QAAQ,4CAA4C;AAU3F,OAAM,MAAOC,aAAc,SAAQH,oBAAoB;EAKnD;EACA;EACA;EAEAI,YAAYC,UAAsB;IAC9B,KAAK,CAACA,UAAU,CAAC;IAPrB,KAAAC,kBAAkB,GAAG,MAAe;IAShC;IACA;IACA,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACC,OAAO,CAACD,QAAQ;IAErC;IACA,IAAI,CAACE,gBAAgB,EAAE;EAC3B;EAEA;EACA;EACA;EAEA;;;EAGA,MAAMC,UAAUA,CAAA;IACZ,IAAI,CAACC,WAAW,GAAGC,SAAS;IAE5B,OAAO,IAAIC,OAAO,CAAO,CAACC,EAAE,EAAEC,IAAI,KAAI;MAClC,IAAI,CAACC,kBAAkB,CAACC,KAAK,CAACH,EAAE,EAAEC,IAAI,CAAC;IAC3C,CAAC,CAAC;EACN;EAEA;;;EAGAG,iBAAiBA,CAACC,IAAqB;IACnC,IAAI,CAAC,IAAI,CAACR,WAAW,EAAE,IAAI,CAACA,WAAW,GAAG,IAAIV,kBAAkB,CAAC,IAAI,CAAC;IAEtE,OAAO,IAAI,CAACU,WAAW;EAC3B;EAEA;EACA;EACA;EAEA;;;EAGU,MAAMS,wBAAwBA,CAAA;IACpC,MAAMZ,OAAO,GAAGa,MAAM,CAACC,MAAM,CACzB,EAAE,EACF;MACIC,IAAI,EAAE,IAAI,CAACf,OAAO,CAACD,QAAQ;MAC3BiB,QAAQ,EAAE,IAAI,CAAChB,OAAO,CAACgB;KAC1B,EACD,IAAI,CAAChB,OAAO,CAACiB,KAAK,IAAI,EAAE,CAC3B;IAED,MAAMpB,UAAU,GAAG,MAAM,IAAIQ,OAAO,CAAM,CAACa,OAAO,EAAEX,IAAI,KAAI;MACxD,IAAI,CAACY,MAAM,CAACC,YAAY,CACpBpB,OAAO,EACNqB,EAAO,IAAKH,OAAO,CAACG,EAAE,CAAC,EACvBC,GAAQ,IAAKf,IAAI,CAACe,GAAG,CAAC,CAC1B;IACL,CAAC,CAAC;IAEF,MAAM,IAAIjB,OAAO,CAAO,CAACC,EAAE,EAAEC,IAAI,KAAI;MACjC;MACA;MACAV,UAAU,CAAC0B,UAAU,CACjB,0BAA0B,EAC1B,EAAE,EACF,MAAMjB,EAAE,EAAE,EACTgB,GAAQ,IAAKf,IAAI,CAACe,GAAG,CAAC,CAC1B;IACL,CAAC,CAAC;IAEF,OAAOzB,UAAU;EACrB;EAEA;;;EAGUI,gBAAgBA,CAAA;IACtB,IAAI;MACA,MAAMkB,MAAM,GAAG,IAAI,CAACnB,OAAO,CAACwB,MAAM,IAAIC,MAAM,CAACC,YAAY;MACzD,IAAI,CAACP,MAAM,GAAGA,MAAM;IACxB,CAAC,CAAC,OAAOQ,CAAC,EAAE;MACR,MAAM,IAAIjC,8BAA8B,CACpC,gBAAgB,EAChB,wBAAwB,CAC3B;IACL;EACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}