{"ast":null,"code":"/**\n * View in the database represented in this class.\n */\nexport class View {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(options) {\n    this[\"@instanceof\"] = Symbol.for(\"View\");\n    this.indices = [];\n    if (options) {\n      this.database = options.database;\n      this.schema = options.schema;\n      this.name = options.name;\n      this.expression = options.expression;\n      this.materialized = !!options.materialized;\n    }\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Clones this table to a new table with all properties cloned.\n   */\n  clone() {\n    return new View({\n      database: this.database,\n      schema: this.schema,\n      name: this.name,\n      expression: this.expression,\n      materialized: this.materialized\n    });\n  }\n  /**\n   * Add index\n   */\n  addIndex(index) {\n    this.indices.push(index);\n  }\n  /**\n   * Remove index\n   */\n  removeIndex(viewIndex) {\n    const index = this.indices.find(index => index.name === viewIndex.name);\n    if (index) {\n      this.indices.splice(this.indices.indexOf(index), 1);\n    }\n  }\n  // -------------------------------------------------------------------------\n  // Static Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates view from a given entity metadata.\n   */\n  static create(entityMetadata, driver) {\n    const options = {\n      database: entityMetadata.database,\n      schema: entityMetadata.schema,\n      name: driver.buildTableName(entityMetadata.tableName, entityMetadata.schema, entityMetadata.database),\n      expression: entityMetadata.expression,\n      materialized: entityMetadata.tableMetadataArgs.materialized\n    };\n    return new View(options);\n  }\n}","map":{"version":3,"names":["View","constructor","options","Symbol","for","indices","database","schema","name","expression","materialized","clone","addIndex","index","push","removeIndex","viewIndex","find","splice","indexOf","create","entityMetadata","driver","buildTableName","tableName","tableMetadataArgs"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\schema-builder\\view\\View.ts"],"sourcesContent":["import {\n    DataSource,\n    Driver,\n    EntityMetadata,\n    SelectQueryBuilder,\n    TableIndex,\n} from \"../..\"\nimport { ViewOptions } from \"../options/ViewOptions\"\n\n/**\n * View in the database represented in this class.\n */\nexport class View {\n    readonly \"@instanceof\" = Symbol.for(\"View\")\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database name that this view resides in if it applies.\n     */\n    database?: string\n\n    /**\n     * Schema name that this view resides in if it applies.\n     */\n    schema?: string\n\n    /**\n     * View name\n     */\n    name: string\n\n    /**\n     * Indicates if view is materialized.\n     */\n    materialized: boolean\n\n    /**\n     * View Indices\n     */\n    indices: TableIndex[]\n\n    /**\n     * View definition.\n     */\n    expression: string | ((connection: DataSource) => SelectQueryBuilder<any>)\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options?: ViewOptions) {\n        this.indices = []\n        if (options) {\n            this.database = options.database\n            this.schema = options.schema\n            this.name = options.name\n            this.expression = options.expression\n            this.materialized = !!options.materialized\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Clones this table to a new table with all properties cloned.\n     */\n    clone(): View {\n        return new View(<ViewOptions>{\n            database: this.database,\n            schema: this.schema,\n            name: this.name,\n            expression: this.expression,\n            materialized: this.materialized,\n        })\n    }\n\n    /**\n     * Add index\n     */\n    addIndex(index: TableIndex): void {\n        this.indices.push(index)\n    }\n\n    /**\n     * Remove index\n     */\n    removeIndex(viewIndex: TableIndex): void {\n        const index = this.indices.find(\n            (index) => index.name === viewIndex.name,\n        )\n        if (index) {\n            this.indices.splice(this.indices.indexOf(index), 1)\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates view from a given entity metadata.\n     */\n    static create(entityMetadata: EntityMetadata, driver: Driver): View {\n        const options: ViewOptions = {\n            database: entityMetadata.database,\n            schema: entityMetadata.schema,\n            name: driver.buildTableName(\n                entityMetadata.tableName,\n                entityMetadata.schema,\n                entityMetadata.database,\n            ),\n            expression: entityMetadata.expression!,\n            materialized: entityMetadata.tableMetadataArgs.materialized,\n        }\n\n        return new View(options)\n    }\n}\n"],"mappings":"AASA;;;AAGA,OAAM,MAAOA,IAAI;EAqCb;EACA;EACA;EAEAC,YAAYC,OAAqB;IAxCxB,mBAAa,GAAGC,MAAM,CAACC,GAAG,CAAC,MAAM,CAAC;IAyCvC,IAAI,CAACC,OAAO,GAAG,EAAE;IACjB,IAAIH,OAAO,EAAE;MACT,IAAI,CAACI,QAAQ,GAAGJ,OAAO,CAACI,QAAQ;MAChC,IAAI,CAACC,MAAM,GAAGL,OAAO,CAACK,MAAM;MAC5B,IAAI,CAACC,IAAI,GAAGN,OAAO,CAACM,IAAI;MACxB,IAAI,CAACC,UAAU,GAAGP,OAAO,CAACO,UAAU;MACpC,IAAI,CAACC,YAAY,GAAG,CAAC,CAACR,OAAO,CAACQ,YAAY;IAC9C;EACJ;EAEA;EACA;EACA;EAEA;;;EAGAC,KAAKA,CAAA;IACD,OAAO,IAAIX,IAAI,CAAc;MACzBM,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBC,IAAI,EAAE,IAAI,CAACA,IAAI;MACfC,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3BC,YAAY,EAAE,IAAI,CAACA;KACtB,CAAC;EACN;EAEA;;;EAGAE,QAAQA,CAACC,KAAiB;IACtB,IAAI,CAACR,OAAO,CAACS,IAAI,CAACD,KAAK,CAAC;EAC5B;EAEA;;;EAGAE,WAAWA,CAACC,SAAqB;IAC7B,MAAMH,KAAK,GAAG,IAAI,CAACR,OAAO,CAACY,IAAI,CAC1BJ,KAAK,IAAKA,KAAK,CAACL,IAAI,KAAKQ,SAAS,CAACR,IAAI,CAC3C;IACD,IAAIK,KAAK,EAAE;MACP,IAAI,CAACR,OAAO,CAACa,MAAM,CAAC,IAAI,CAACb,OAAO,CAACc,OAAO,CAACN,KAAK,CAAC,EAAE,CAAC,CAAC;IACvD;EACJ;EAEA;EACA;EACA;EAEA;;;EAGA,OAAOO,MAAMA,CAACC,cAA8B,EAAEC,MAAc;IACxD,MAAMpB,OAAO,GAAgB;MACzBI,QAAQ,EAAEe,cAAc,CAACf,QAAQ;MACjCC,MAAM,EAAEc,cAAc,CAACd,MAAM;MAC7BC,IAAI,EAAEc,MAAM,CAACC,cAAc,CACvBF,cAAc,CAACG,SAAS,EACxBH,cAAc,CAACd,MAAM,EACrBc,cAAc,CAACf,QAAQ,CAC1B;MACDG,UAAU,EAAEY,cAAc,CAACZ,UAAW;MACtCC,YAAY,EAAEW,cAAc,CAACI,iBAAiB,CAACf;KAClD;IAED,OAAO,IAAIV,IAAI,CAACE,OAAO,CAAC;EAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}