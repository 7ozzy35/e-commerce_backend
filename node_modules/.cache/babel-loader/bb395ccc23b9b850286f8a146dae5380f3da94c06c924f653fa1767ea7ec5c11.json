{"ast":null,"code":"import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when ORM cannot get method parameter's type.\n * Basically, when reflect-metadata is not available or tsconfig is not properly setup.\n */\nexport class CannotReflectMethodParameterTypeError extends TypeORMError {\n  constructor(target, methodName) {\n    super(`Cannot get reflected type for a \"${methodName}\" method's parameter of \"${target.name}\" class. ` + `Make sure you have turned on an \"emitDecoratorMetadata\": true option in tsconfig.json. ` + `Also make sure you have imported \"reflect-metadata\" on top of the main entry file in your application.`);\n  }\n}","map":{"version":3,"names":["TypeORMError","CannotReflectMethodParameterTypeError","constructor","target","methodName","name"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\error\\CannotReflectMethodParameterTypeError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when ORM cannot get method parameter's type.\n * Basically, when reflect-metadata is not available or tsconfig is not properly setup.\n */\nexport class CannotReflectMethodParameterTypeError extends TypeORMError {\n    constructor(target: Function, methodName: string) {\n        super(\n            `Cannot get reflected type for a \"${methodName}\" method's parameter of \"${target.name}\" class. ` +\n                `Make sure you have turned on an \"emitDecoratorMetadata\": true option in tsconfig.json. ` +\n                `Also make sure you have imported \"reflect-metadata\" on top of the main entry file in your application.`,\n        )\n    }\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,gBAAgB;AAE7C;;;;AAIA,OAAM,MAAOC,qCAAsC,SAAQD,YAAY;EACnEE,YAAYC,MAAgB,EAAEC,UAAkB;IAC5C,KAAK,CACD,oCAAoCA,UAAU,4BAA4BD,MAAM,CAACE,IAAI,WAAW,GAC5F,yFAAyF,GACzF,wGAAwG,CAC/G;EACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}