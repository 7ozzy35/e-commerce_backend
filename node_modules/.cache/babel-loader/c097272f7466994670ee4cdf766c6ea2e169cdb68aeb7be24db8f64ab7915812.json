{"ast":null,"code":"import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { QueryResult } from \"../../query-runner/QueryResult\";\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class NativescriptQueryRunner extends AbstractSqliteQueryRunner {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(driver) {\n    super();\n    this.driver = driver;\n    this.connection = driver.connection;\n    this.broadcaster = new Broadcaster(this);\n  }\n  /**\n   * Called before migrations are run.\n   */\n  async beforeMigration() {\n    await this.query(`PRAGMA foreign_keys = OFF`);\n  }\n  /**\n   * Called after migrations are run.\n   */\n  async afterMigration() {\n    await this.query(`PRAGMA foreign_keys = ON`);\n  }\n  /**\n   * Executes a given SQL query.\n   */\n  async query(query, parameters, useStructuredResult = false) {\n    if (this.isReleased) {\n      throw new QueryRunnerAlreadyReleasedError();\n    }\n    const connection = this.driver.connection;\n    return new Promise(async (ok, fail) => {\n      const databaseConnection = await this.connect();\n      const isInsertQuery = query.substr(0, 11) === \"INSERT INTO\";\n      connection.logger.logQuery(query, parameters, this);\n      const handler = (err, raw) => {\n        // log slow queries if maxQueryExecution time is set\n        const maxQueryExecutionTime = this.driver.options.maxQueryExecutionTime;\n        const queryEndTime = +new Date();\n        const queryExecutionTime = queryEndTime - queryStartTime;\n        if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime) {\n          connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n        }\n        if (err) {\n          connection.logger.logQueryError(err, query, parameters, this);\n          fail(new QueryFailedError(query, parameters, err));\n        }\n        const result = new QueryResult();\n        result.raw = raw;\n        if (!isInsertQuery && Array.isArray(raw)) {\n          result.records = raw;\n        }\n        if (useStructuredResult) {\n          ok(result);\n        } else {\n          ok(result.raw);\n        }\n      };\n      const queryStartTime = +new Date();\n      if (isInsertQuery) {\n        databaseConnection.execSQL(query, parameters, handler);\n      } else {\n        databaseConnection.all(query, parameters, handler);\n      }\n    });\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Parametrizes given object of values. Used to create column=value queries.\n   */\n  parametrize(objectLiteral, startIndex = 0) {\n    return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=?\");\n  }\n}","map":{"version":3,"names":["QueryRunnerAlreadyReleasedError","QueryFailedError","AbstractSqliteQueryRunner","Broadcaster","QueryResult","NativescriptQueryRunner","constructor","driver","connection","broadcaster","beforeMigration","query","afterMigration","parameters","useStructuredResult","isReleased","Promise","ok","fail","databaseConnection","connect","isInsertQuery","substr","logger","logQuery","handler","err","raw","maxQueryExecutionTime","options","queryEndTime","Date","queryExecutionTime","queryStartTime","logQuerySlow","logQueryError","result","Array","isArray","records","execSQL","all","parametrize","objectLiteral","startIndex","Object","keys","map","key","index"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\driver\\nativescript\\NativescriptQueryRunner.ts"],"sourcesContent":["import { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\nimport { QueryFailedError } from \"../../error/QueryFailedError\"\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\"\nimport { NativescriptDriver } from \"./NativescriptDriver\"\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\nimport { QueryResult } from \"../../query-runner/QueryResult\"\n\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class NativescriptQueryRunner extends AbstractSqliteQueryRunner {\n    /**\n     * Database driver used by connection.\n     */\n    driver: NativescriptDriver\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: NativescriptDriver) {\n        super()\n        this.driver = driver\n        this.connection = driver.connection\n        this.broadcaster = new Broadcaster(this)\n    }\n\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = OFF`)\n    }\n\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = ON`)\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(\n        query: string,\n        parameters?: any[],\n        useStructuredResult = false,\n    ): Promise<any> {\n        if (this.isReleased) {\n            throw new QueryRunnerAlreadyReleasedError()\n        }\n\n        const connection = this.driver.connection\n\n        return new Promise(async (ok, fail) => {\n            const databaseConnection = await this.connect()\n            const isInsertQuery = query.substr(0, 11) === \"INSERT INTO\"\n            connection.logger.logQuery(query, parameters, this)\n\n            const handler = (err: any, raw: any) => {\n                // log slow queries if maxQueryExecution time is set\n                const maxQueryExecutionTime =\n                    this.driver.options.maxQueryExecutionTime\n                const queryEndTime = +new Date()\n                const queryExecutionTime = queryEndTime - queryStartTime\n\n                if (\n                    maxQueryExecutionTime &&\n                    queryExecutionTime > maxQueryExecutionTime\n                ) {\n                    connection.logger.logQuerySlow(\n                        queryExecutionTime,\n                        query,\n                        parameters,\n                        this,\n                    )\n                }\n\n                if (err) {\n                    connection.logger.logQueryError(\n                        err,\n                        query,\n                        parameters,\n                        this,\n                    )\n                    fail(new QueryFailedError(query, parameters, err))\n                }\n\n                const result = new QueryResult()\n                result.raw = raw\n\n                if (!isInsertQuery && Array.isArray(raw)) {\n                    result.records = raw\n                }\n\n                if (useStructuredResult) {\n                    ok(result)\n                } else {\n                    ok(result.raw)\n                }\n            }\n            const queryStartTime = +new Date()\n\n            if (isInsertQuery) {\n                databaseConnection.execSQL(query, parameters, handler)\n            } else {\n                databaseConnection.all(query, parameters, handler)\n            }\n        })\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(\n        objectLiteral: ObjectLiteral,\n        startIndex: number = 0,\n    ): string[] {\n        return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=?\")\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}