{"ast":null,"code":"import { ObjectUtils } from \"../util/ObjectUtils\";\n/**\n * Base abstract entity for all entities, used in ActiveRecord patterns.\n */\nexport class BaseEntity {\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Checks if entity has an id.\n   * If entity composite compose ids, it will check them all.\n   */\n  hasId() {\n    const baseEntity = this.constructor;\n    return baseEntity.getRepository().hasId(this);\n  }\n  /**\n   * Saves current entity in the database.\n   * If entity does not exist in the database then inserts, otherwise updates.\n   */\n  save(options) {\n    const baseEntity = this.constructor;\n    return baseEntity.getRepository().save(this, options);\n  }\n  /**\n   * Removes current entity from the database.\n   */\n  remove(options) {\n    const baseEntity = this.constructor;\n    return baseEntity.getRepository().remove(this, options);\n  }\n  /**\n   * Records the delete date of current entity.\n   */\n  softRemove(options) {\n    const baseEntity = this.constructor;\n    return baseEntity.getRepository().softRemove(this, options);\n  }\n  /**\n   * Recovers a given entity in the database.\n   */\n  recover(options) {\n    const baseEntity = this.constructor;\n    return baseEntity.getRepository().recover(this, options);\n  }\n  /**\n   * Reloads entity data from the database.\n   */\n  async reload() {\n    const baseEntity = this.constructor;\n    const id = baseEntity.getRepository().metadata.getEntityIdMap(this);\n    if (!id) {\n      throw new Error(`Entity doesn't have id-s set, cannot reload entity`);\n    }\n    const reloadedEntity = await baseEntity.getRepository().findOneByOrFail(id);\n    ObjectUtils.assign(this, reloadedEntity);\n  }\n  // -------------------------------------------------------------------------\n  // Public Static Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Sets DataSource to be used by entity.\n   */\n  static useDataSource(dataSource) {\n    this.dataSource = dataSource;\n  }\n  /**\n   * Gets current entity's Repository.\n   */\n  static getRepository() {\n    const dataSource = this.dataSource;\n    if (!dataSource) throw new Error(`DataSource is not set for this entity.`);\n    return dataSource.getRepository(this);\n  }\n  /**\n   * Returns object that is managed by this repository.\n   * If this repository manages entity from schema,\n   * then it returns a name of that schema instead.\n   */\n  static get target() {\n    return this.getRepository().target;\n  }\n  /**\n   * Checks entity has an id.\n   * If entity composite compose ids, it will check them all.\n   */\n  static hasId(entity) {\n    return this.getRepository().hasId(entity);\n  }\n  /**\n   * Gets entity mixed id.\n   */\n  static getId(entity) {\n    return this.getRepository().getId(entity);\n  }\n  /**\n   * Creates a new query builder that can be used to build a SQL query.\n   */\n  static createQueryBuilder(alias) {\n    return this.getRepository().createQueryBuilder(alias);\n  }\n  /**\n   * Creates a new entity instance and copies all entity properties from this object into a new entity.\n   * Note that it copies only properties that present in entity schema.\n   */\n  static create(entityOrEntities) {\n    return this.getRepository().create(entityOrEntities);\n  }\n  /**\n   * Merges multiple entities (or entity-like objects) into a given entity.\n   */\n  static merge(mergeIntoEntity, ...entityLikes) {\n    return this.getRepository().merge(mergeIntoEntity, ...entityLikes);\n  }\n  /**\n   * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\n   * it loads it (and everything related to it), replaces all values with the new ones from the given object\n   * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n   * replaced from the new object.\n   *\n   * Note that given entity-like object must have an entity id / primary key to find entity by.\n   * Returns undefined if entity with given id was not found.\n   */\n  static preload(entityLike) {\n    const thisRepository = this.getRepository();\n    return thisRepository.preload(entityLike);\n  }\n  /**\n   * Saves one or many given entities.\n   */\n  static save(entityOrEntities, options) {\n    return this.getRepository().save(entityOrEntities, options);\n  }\n  /**\n   * Removes one or many given entities.\n   */\n  static remove(entityOrEntities, options) {\n    return this.getRepository().remove(entityOrEntities, options);\n  }\n  /**\n   * Records the delete date of one or many given entities.\n   */\n  static softRemove(entityOrEntities, options) {\n    return this.getRepository().softRemove(entityOrEntities, options);\n  }\n  /**\n   * Inserts a given entity into the database.\n   * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n   * Executes fast and efficient INSERT query.\n   * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n   */\n  static insert(entity) {\n    return this.getRepository().insert(entity);\n  }\n  /**\n   * Updates entity partially. Entity can be found by a given conditions.\n   * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n   * Executes fast and efficient UPDATE query.\n   * Does not check if entity exist in the database.\n   */\n  static update(criteria, partialEntity) {\n    return this.getRepository().update(criteria, partialEntity);\n  }\n  /**\n   * Inserts a given entity into the database, unless a unique constraint conflicts then updates the entity\n   * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n   * Executes fast and efficient INSERT ... ON CONFLICT DO UPDATE/ON DUPLICATE KEY UPDATE query.\n   */\n  static upsert(entityOrEntities, conflictPathsOrOptions) {\n    return this.getRepository().upsert(entityOrEntities, conflictPathsOrOptions);\n  }\n  /**\n   * Deletes entities by a given criteria.\n   * Unlike remove method executes a primitive operation without cascades, relations and other operations included.\n   * Executes fast and efficient DELETE query.\n   * Does not check if entity exist in the database.\n   */\n  static delete(criteria) {\n    return this.getRepository().delete(criteria);\n  }\n  /**\n   * Checks whether any entity exists that matches the given options.\n   */\n  static exists(options) {\n    return this.getRepository().exists(options);\n  }\n  /**\n   * Checks whether any entity exists that matches the given conditions.\n   */\n  static existsBy(where) {\n    return this.getRepository().existsBy(where);\n  }\n  /**\n   * Counts entities that match given options.\n   */\n  static count(options) {\n    return this.getRepository().count(options);\n  }\n  /**\n   * Counts entities that match given WHERE conditions.\n   */\n  static countBy(where) {\n    return this.getRepository().countBy(where);\n  }\n  /**\n   * Return the SUM of a column\n   */\n  static sum(columnName, where) {\n    return this.getRepository().sum(columnName, where);\n  }\n  /**\n   * Return the AVG of a column\n   */\n  static average(columnName, where) {\n    return this.getRepository().average(columnName, where);\n  }\n  /**\n   * Return the MIN of a column\n   */\n  static minimum(columnName, where) {\n    return this.getRepository().minimum(columnName, where);\n  }\n  /**\n   * Return the MAX of a column\n   */\n  static maximum(columnName, where) {\n    return this.getRepository().maximum(columnName, where);\n  }\n  /**\n   * Finds entities that match given options.\n   */\n  static find(options) {\n    return this.getRepository().find(options);\n  }\n  /**\n   * Finds entities that match given WHERE conditions.\n   */\n  static findBy(where) {\n    return this.getRepository().findBy(where);\n  }\n  /**\n   * Finds entities that match given find options.\n   * Also counts all entities that match given conditions,\n   * but ignores pagination settings (from and take options).\n   */\n  static findAndCount(options) {\n    return this.getRepository().findAndCount(options);\n  }\n  /**\n   * Finds entities that match given WHERE conditions.\n   * Also counts all entities that match given conditions,\n   * but ignores pagination settings (from and take options).\n   */\n  static findAndCountBy(where) {\n    return this.getRepository().findAndCountBy(where);\n  }\n  /**\n   * Finds entities by ids.\n   * Optionally find options can be applied.\n   *\n   * @deprecated use `findBy` method instead in conjunction with `In` operator, for example:\n   *\n   * .findBy({\n   *     id: In([1, 2, 3])\n   * })\n   */\n  static findByIds(ids) {\n    return this.getRepository().findByIds(ids);\n  }\n  /**\n   * Finds first entity that matches given conditions.\n   */\n  static findOne(options) {\n    return this.getRepository().findOne(options);\n  }\n  /**\n   * Finds first entity that matches given conditions.\n   */\n  static findOneBy(where) {\n    return this.getRepository().findOneBy(where);\n  }\n  /**\n   * Finds first entity that matches given options.\n   *\n   * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n   *\n   * .findOneBy({\n   *     id: 1 // where \"id\" is your primary column name\n   * })\n   */\n  static findOneById(id) {\n    return this.getRepository().findOneById(id);\n  }\n  /**\n   * Finds first entity that matches given conditions.\n   */\n  static findOneOrFail(options) {\n    return this.getRepository().findOneOrFail(options);\n  }\n  /**\n   * Finds first entity that matches given conditions.\n   */\n  static findOneByOrFail(where) {\n    return this.getRepository().findOneByOrFail(where);\n  }\n  /**\n   * Executes a raw SQL query and returns a raw database results.\n   * Raw query execution is supported only by relational databases (MongoDB is not supported).\n   */\n  static query(query, parameters) {\n    return this.getRepository().query(query, parameters);\n  }\n  /**\n   * Clears all the data from the given table/collection (truncates/drops it).\n   */\n  static clear() {\n    return this.getRepository().clear();\n  }\n}","map":{"version":3,"names":["ObjectUtils","BaseEntity","hasId","baseEntity","constructor","getRepository","save","options","remove","softRemove","recover","reload","id","metadata","getEntityIdMap","Error","reloadedEntity","findOneByOrFail","assign","useDataSource","dataSource","target","entity","getId","createQueryBuilder","alias","create","entityOrEntities","merge","mergeIntoEntity","entityLikes","preload","entityLike","thisRepository","insert","update","criteria","partialEntity","upsert","conflictPathsOrOptions","delete","exists","existsBy","where","count","countBy","sum","columnName","average","minimum","maximum","find","findBy","findAndCount","findAndCountBy","findByIds","ids","findOne","findOneBy","findOneById","findOneOrFail","query","parameters","clear"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\repository\\BaseEntity.ts"],"sourcesContent":["import { Repository } from \"./Repository\"\nimport { FindOptionsWhere } from \"../find-options/FindOptionsWhere\"\nimport { DeepPartial } from \"../common/DeepPartial\"\nimport { SaveOptions } from \"./SaveOptions\"\nimport { FindOneOptions } from \"../find-options/FindOneOptions\"\nimport { RemoveOptions } from \"./RemoveOptions\"\nimport { FindManyOptions } from \"../find-options/FindManyOptions\"\nimport { DataSource } from \"../data-source\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { InsertResult } from \"../query-builder/result/InsertResult\"\nimport { UpdateResult } from \"../query-builder/result/UpdateResult\"\nimport { DeleteResult } from \"../query-builder/result/DeleteResult\"\nimport { ObjectId } from \"../driver/mongodb/typings\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { QueryDeepPartialEntity } from \"../query-builder/QueryPartialEntity\"\nimport { UpsertOptions } from \"./UpsertOptions\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport { PickKeysByType } from \"../common/PickKeysByType\"\n\n/**\n * Base abstract entity for all entities, used in ActiveRecord patterns.\n */\nexport class BaseEntity {\n    // -------------------------------------------------------------------------\n    // Private Static Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * DataSource used in all static methods of the BaseEntity.\n     */\n    private static dataSource: DataSource | null\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    hasId(): boolean {\n        const baseEntity = this.constructor as typeof BaseEntity\n        return baseEntity.getRepository().hasId(this)\n    }\n\n    /**\n     * Saves current entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save(options?: SaveOptions): Promise<this> {\n        const baseEntity = this.constructor as typeof BaseEntity\n        return baseEntity.getRepository().save(this, options)\n    }\n\n    /**\n     * Removes current entity from the database.\n     */\n    remove(options?: RemoveOptions): Promise<this> {\n        const baseEntity = this.constructor as typeof BaseEntity\n        return baseEntity.getRepository().remove(this, options) as Promise<this>\n    }\n\n    /**\n     * Records the delete date of current entity.\n     */\n    softRemove(options?: SaveOptions): Promise<this> {\n        const baseEntity = this.constructor as typeof BaseEntity\n        return baseEntity.getRepository().softRemove(this, options)\n    }\n\n    /**\n     * Recovers a given entity in the database.\n     */\n    recover(options?: SaveOptions): Promise<this> {\n        const baseEntity = this.constructor as typeof BaseEntity\n        return baseEntity.getRepository().recover(this, options)\n    }\n\n    /**\n     * Reloads entity data from the database.\n     */\n    async reload(): Promise<void> {\n        const baseEntity = this.constructor as typeof BaseEntity\n        const id = baseEntity.getRepository().metadata.getEntityIdMap(this)\n        if (!id) {\n            throw new Error(\n                `Entity doesn't have id-s set, cannot reload entity`,\n            )\n        }\n        const reloadedEntity: BaseEntity = await baseEntity\n            .getRepository()\n            .findOneByOrFail(id)\n\n        ObjectUtils.assign(this, reloadedEntity)\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Sets DataSource to be used by entity.\n     */\n    static useDataSource(dataSource: DataSource | null) {\n        this.dataSource = dataSource\n    }\n\n    /**\n     * Gets current entity's Repository.\n     */\n    static getRepository<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n    ): Repository<T> {\n        const dataSource = (this as typeof BaseEntity).dataSource\n        if (!dataSource)\n            throw new Error(`DataSource is not set for this entity.`)\n        return dataSource.getRepository<T>(this)\n    }\n\n    /**\n     * Returns object that is managed by this repository.\n     * If this repository manages entity from schema,\n     * then it returns a name of that schema instead.\n     */\n    static get target(): EntityTarget<any> {\n        return this.getRepository().target\n    }\n\n    /**\n     * Checks entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    static hasId(entity: BaseEntity): boolean {\n        return this.getRepository().hasId(entity)\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    static getId<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entity: T,\n    ): any {\n        return this.getRepository<T>().getId(entity)\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    static createQueryBuilder<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        alias?: string,\n    ): SelectQueryBuilder<T> {\n        return this.getRepository<T>().createQueryBuilder(alias)\n    }\n\n    /**\n     * Creates a new entity instance.\n     */\n    static create<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n    ): T\n\n    /**\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that present in entity schema.\n     */\n    static create<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entityLikeArray: DeepPartial<T>[],\n    ): T[]\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    static create<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entityLike: DeepPartial<T>,\n    ): T\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    static create<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entityOrEntities?: any,\n    ) {\n        return this.getRepository<T>().create(entityOrEntities)\n    }\n\n    /**\n     * Merges multiple entities (or entity-like objects) into a given entity.\n     */\n    static merge<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        mergeIntoEntity: T,\n        ...entityLikes: DeepPartial<T>[]\n    ): T {\n        return this.getRepository<T>().merge(\n            mergeIntoEntity,\n            ...entityLikes,\n        ) as T\n    }\n\n    /**\n     * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     *\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\n     * Returns undefined if entity with given id was not found.\n     */\n    static preload<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entityLike: DeepPartial<T>,\n    ): Promise<T | undefined> {\n        const thisRepository = this.getRepository<T>()\n        return thisRepository.preload(entityLike)\n    }\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    static save<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entities: DeepPartial<T>[],\n        options?: SaveOptions,\n    ): Promise<T[]>\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    static save<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entity: DeepPartial<T>,\n        options?: SaveOptions,\n    ): Promise<T>\n\n    /**\n     * Saves one or many given entities.\n     */\n    static save<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entityOrEntities: DeepPartial<T> | DeepPartial<T>[],\n        options?: SaveOptions,\n    ) {\n        return this.getRepository<T>().save(entityOrEntities as any, options)\n    }\n\n    /**\n     * Removes a given entities from the database.\n     */\n    static remove<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entities: T[],\n        options?: RemoveOptions,\n    ): Promise<T[]>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    static remove<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entity: T,\n        options?: RemoveOptions,\n    ): Promise<T>\n\n    /**\n     * Removes one or many given entities.\n     */\n    static remove<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entityOrEntities: T | T[],\n        options?: RemoveOptions,\n    ) {\n        return this.getRepository<T>().remove(entityOrEntities as any, options)\n    }\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    static softRemove<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<T[]>\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    static softRemove<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T>\n\n    /**\n     * Records the delete date of one or many given entities.\n     */\n    static softRemove<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entityOrEntities: T | T[],\n        options?: SaveOptions,\n    ) {\n        return this.getRepository<T>().softRemove(\n            entityOrEntities as any,\n            options,\n        )\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     */\n    static insert<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entity: QueryDeepPartialEntity<T> | QueryDeepPartialEntity<T>[],\n    ): Promise<InsertResult> {\n        return this.getRepository<T>().insert(entity)\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    static update<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | FindOptionsWhere<T>,\n        partialEntity: QueryDeepPartialEntity<T>,\n    ): Promise<UpdateResult> {\n        return this.getRepository<T>().update(criteria, partialEntity)\n    }\n\n    /**\n     * Inserts a given entity into the database, unless a unique constraint conflicts then updates the entity\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT ... ON CONFLICT DO UPDATE/ON DUPLICATE KEY UPDATE query.\n     */\n    static upsert<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        entityOrEntities:\n            | QueryDeepPartialEntity<T>\n            | QueryDeepPartialEntity<T>[],\n        conflictPathsOrOptions: string[] | UpsertOptions<T>,\n    ): Promise<InsertResult> {\n        return this.getRepository<T>().upsert(\n            entityOrEntities,\n            conflictPathsOrOptions,\n        )\n    }\n\n    /**\n     * Deletes entities by a given criteria.\n     * Unlike remove method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    static delete<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | FindOptionsWhere<T>,\n    ): Promise<DeleteResult> {\n        return this.getRepository<T>().delete(criteria)\n    }\n\n    /**\n     * Checks whether any entity exists that matches the given options.\n     */\n    static exists<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        options?: FindManyOptions<T>,\n    ): Promise<boolean> {\n        return this.getRepository<T>().exists(options)\n    }\n\n    /**\n     * Checks whether any entity exists that matches the given conditions.\n     */\n    static existsBy<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        where: FindOptionsWhere<T>,\n    ): Promise<boolean> {\n        return this.getRepository<T>().existsBy(where)\n    }\n\n    /**\n     * Counts entities that match given options.\n     */\n    static count<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        options?: FindManyOptions<T>,\n    ): Promise<number> {\n        return this.getRepository<T>().count(options)\n    }\n\n    /**\n     * Counts entities that match given WHERE conditions.\n     */\n    static countBy<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        where: FindOptionsWhere<T>,\n    ): Promise<number> {\n        return this.getRepository<T>().countBy(where)\n    }\n\n    /**\n     * Return the SUM of a column\n     */\n    static sum<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        columnName: PickKeysByType<T, number>,\n        where: FindOptionsWhere<T>,\n    ): Promise<number | null> {\n        return this.getRepository<T>().sum(columnName, where)\n    }\n\n    /**\n     * Return the AVG of a column\n     */\n    static average<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        columnName: PickKeysByType<T, number>,\n        where: FindOptionsWhere<T>,\n    ): Promise<number | null> {\n        return this.getRepository<T>().average(columnName, where)\n    }\n\n    /**\n     * Return the MIN of a column\n     */\n    static minimum<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        columnName: PickKeysByType<T, number>,\n        where: FindOptionsWhere<T>,\n    ): Promise<number | null> {\n        return this.getRepository<T>().minimum(columnName, where)\n    }\n\n    /**\n     * Return the MAX of a column\n     */\n    static maximum<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        columnName: PickKeysByType<T, number>,\n        where: FindOptionsWhere<T>,\n    ): Promise<number | null> {\n        return this.getRepository<T>().maximum(columnName, where)\n    }\n\n    /**\n     * Finds entities that match given options.\n     */\n    static find<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        options?: FindManyOptions<T>,\n    ): Promise<T[]> {\n        return this.getRepository<T>().find(options)\n    }\n\n    /**\n     * Finds entities that match given WHERE conditions.\n     */\n    static findBy<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        where: FindOptionsWhere<T>,\n    ): Promise<T[]> {\n        return this.getRepository<T>().findBy(where)\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    static findAndCount<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        options?: FindManyOptions<T>,\n    ): Promise<[T[], number]> {\n        return this.getRepository<T>().findAndCount(options)\n    }\n\n    /**\n     * Finds entities that match given WHERE conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    static findAndCountBy<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        where: FindOptionsWhere<T>,\n    ): Promise<[T[], number]> {\n        return this.getRepository<T>().findAndCountBy(where)\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     *\n     * @deprecated use `findBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findBy({\n     *     id: In([1, 2, 3])\n     * })\n     */\n    static findByIds<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        ids: any[],\n    ): Promise<T[]> {\n        return this.getRepository<T>().findByIds(ids)\n    }\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    static findOne<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        options: FindOneOptions<T>,\n    ): Promise<T | null> {\n        return this.getRepository<T>().findOne(options)\n    }\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    static findOneBy<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        where: FindOptionsWhere<T>,\n    ): Promise<T | null> {\n        return this.getRepository<T>().findOneBy(where)\n    }\n\n    /**\n     * Finds first entity that matches given options.\n     *\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findOneBy({\n     *     id: 1 // where \"id\" is your primary column name\n     * })\n     */\n    static findOneById<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        id: string | number | Date | ObjectId,\n    ): Promise<T | null> {\n        return this.getRepository<T>().findOneById(id)\n    }\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    static findOneOrFail<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        options: FindOneOptions<T>,\n    ): Promise<T> {\n        return this.getRepository<T>().findOneOrFail(options)\n    }\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    static findOneByOrFail<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        where: FindOptionsWhere<T>,\n    ): Promise<T> {\n        return this.getRepository<T>().findOneByOrFail(where)\n    }\n\n    /**\n     * Executes a raw SQL query and returns a raw database results.\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\n     */\n    static query<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n        query: string,\n        parameters?: any[],\n    ): Promise<any> {\n        return this.getRepository<T>().query(query, parameters)\n    }\n\n    /**\n     * Clears all the data from the given table/collection (truncates/drops it).\n     */\n    static clear<T extends BaseEntity>(\n        this: { new (): T } & typeof BaseEntity,\n    ): Promise<void> {\n        return this.getRepository<T>().clear()\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}