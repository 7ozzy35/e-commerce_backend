{"ast":null,"code":"import { hash, shorten } from \"../util/StringUtils\";\nimport { VersionUtils } from \"../util/VersionUtils\";\n/**\n * Common driver utility functions.\n */\nexport class DriverUtils {\n  // -------------------------------------------------------------------------\n  // Public Static Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Returns true if given driver is SQLite-based driver.\n   */\n  static isSQLiteFamily(driver) {\n    return [\"sqlite\", \"cordova\", \"react-native\", \"nativescript\", \"sqljs\", \"expo\", \"better-sqlite3\", \"capacitor\"].includes(driver.options.type);\n  }\n  /**\n   * Returns true if given driver is MySQL-based driver.\n   */\n  static isMySQLFamily(driver) {\n    return [\"mysql\", \"mariadb\"].includes(driver.options.type);\n  }\n  static isReleaseVersionOrGreater(driver, version) {\n    return driver.version != null && VersionUtils.isGreaterOrEqual(driver.version, version);\n  }\n  static isPostgresFamily(driver) {\n    return [\"postgres\", \"aurora-postgres\", \"cockroachdb\"].includes(driver.options.type);\n  }\n  /**\n   * Normalizes and builds a new driver options.\n   * Extracts settings from connection url and sets to a new options object.\n   */\n  static buildDriverOptions(options, buildOptions) {\n    if (options.url) {\n      const urlDriverOptions = this.parseConnectionUrl(options.url);\n      if (buildOptions && buildOptions.useSid && urlDriverOptions.database) {\n        urlDriverOptions.sid = urlDriverOptions.database;\n      }\n      for (const key of Object.keys(urlDriverOptions)) {\n        if (typeof urlDriverOptions[key] === \"undefined\") {\n          delete urlDriverOptions[key];\n        }\n      }\n      return Object.assign({}, options, urlDriverOptions);\n    }\n    return Object.assign({}, options);\n  }\n  /**\n   * buildDriverOptions for MongodDB only to support replica set\n   */\n  static buildMongoDBDriverOptions(options, buildOptions) {\n    if (options.url) {\n      const urlDriverOptions = this.parseMongoDBConnectionUrl(options.url);\n      if (buildOptions && buildOptions.useSid && urlDriverOptions.database) {\n        urlDriverOptions.sid = urlDriverOptions.database;\n      }\n      for (const key of Object.keys(urlDriverOptions)) {\n        if (typeof urlDriverOptions[key] === \"undefined\") {\n          delete urlDriverOptions[key];\n        }\n      }\n      return Object.assign({}, options, urlDriverOptions);\n    }\n    return Object.assign({}, options);\n  }\n  /**\n   * Joins and shortens alias if needed.\n   *\n   * If the alias length is greater than the limit allowed by the current\n   * driver, replaces it with a shortend string, if the shortend string\n   * is still too long, it will then hash the alias.\n   *\n   * @param driver Current `Driver`.\n   * @param buildOptions Optional settings.\n   * @param alias Alias parts.\n   *\n   * @return An alias that is no longer than the divers max alias length.\n   */\n  static buildAlias({\n    maxAliasLength\n  }, buildOptions, ...alias) {\n    const joiner = buildOptions && buildOptions.joiner ? buildOptions.joiner : \"_\";\n    let newAlias = alias.length === 1 ? alias[0] : alias.join(joiner);\n    if (maxAliasLength && maxAliasLength > 0 && newAlias.length > maxAliasLength) {\n      if (buildOptions && buildOptions.shorten === true) {\n        const shortenedAlias = shorten(newAlias);\n        if (shortenedAlias.length < maxAliasLength) {\n          return shortenedAlias;\n        }\n      }\n      return hash(newAlias, {\n        length: maxAliasLength\n      });\n    }\n    return newAlias;\n  }\n  /**\n   * @deprecated use `buildAlias` instead.\n   */\n  static buildColumnAlias({\n    maxAliasLength\n  }, buildOptions, ...alias) {\n    if (typeof buildOptions === \"string\") {\n      alias.unshift(buildOptions);\n      buildOptions = {\n        shorten: false,\n        joiner: \"_\"\n      };\n    } else {\n      buildOptions = Object.assign({\n        shorten: false,\n        joiner: \"_\"\n      }, buildOptions);\n    }\n    return this.buildAlias({\n      maxAliasLength\n    }, buildOptions, ...alias);\n  }\n  // -------------------------------------------------------------------------\n  // Private Static Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Extracts connection data from the connection url.\n   */\n  static parseConnectionUrl(url) {\n    const type = url.split(\":\")[0];\n    const firstSlashes = url.indexOf(\"//\");\n    const preBase = url.substr(firstSlashes + 2);\n    const secondSlash = preBase.indexOf(\"/\");\n    const base = secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase;\n    let afterBase = secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined;\n    // remove mongodb query params\n    if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n      afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"));\n    }\n    const lastAtSign = base.lastIndexOf(\"@\");\n    const usernameAndPassword = base.substr(0, lastAtSign);\n    const hostAndPort = base.substr(lastAtSign + 1);\n    let username = usernameAndPassword;\n    let password = \"\";\n    const firstColon = usernameAndPassword.indexOf(\":\");\n    if (firstColon !== -1) {\n      username = usernameAndPassword.substr(0, firstColon);\n      password = usernameAndPassword.substr(firstColon + 1);\n    }\n    const [host, port] = hostAndPort.split(\":\");\n    return {\n      type: type,\n      host: host,\n      username: decodeURIComponent(username),\n      password: decodeURIComponent(password),\n      port: port ? parseInt(port) : undefined,\n      database: afterBase || undefined\n    };\n  }\n  /**\n   * Extracts connection data from the connection url for MongoDB to support replica set.\n   */\n  static parseMongoDBConnectionUrl(url) {\n    const type = url.split(\":\")[0];\n    const firstSlashes = url.indexOf(\"//\");\n    const preBase = url.substr(firstSlashes + 2);\n    const secondSlash = preBase.indexOf(\"/\");\n    const base = secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase;\n    let afterBase = secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined;\n    let afterQuestionMark = \"\";\n    let host = undefined;\n    let port = undefined;\n    let hostReplicaSet = undefined;\n    let replicaSet = undefined;\n    let optionsObject = {};\n    if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n      // split params\n      afterQuestionMark = afterBase.substr(afterBase.indexOf(\"?\") + 1, afterBase.length);\n      const optionsList = afterQuestionMark.split(\"&\");\n      let optionKey;\n      let optionValue;\n      // create optionsObject for merge with connectionUrl object before return\n      optionsList.forEach(optionItem => {\n        optionKey = optionItem.split(\"=\")[0];\n        optionValue = optionItem.split(\"=\")[1];\n        optionsObject[optionKey] = optionValue;\n      });\n      // specific replicaSet value to set options about hostReplicaSet\n      replicaSet = optionsObject[\"replicaSet\"];\n      afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"));\n    }\n    const lastAtSign = base.lastIndexOf(\"@\");\n    const usernameAndPassword = base.substr(0, lastAtSign);\n    const hostAndPort = base.substr(lastAtSign + 1);\n    let username = usernameAndPassword;\n    let password = \"\";\n    const firstColon = usernameAndPassword.indexOf(\":\");\n    if (firstColon !== -1) {\n      username = usernameAndPassword.substr(0, firstColon);\n      password = usernameAndPassword.substr(firstColon + 1);\n    }\n    // If replicaSet have value set It as hostlist, If not set like standalone host\n    if (replicaSet) {\n      hostReplicaSet = hostAndPort;\n    } else {\n      ;\n      [host, port] = hostAndPort.split(\":\");\n    }\n    let connectionUrl = {\n      type: type,\n      host: host,\n      hostReplicaSet: hostReplicaSet,\n      username: decodeURIComponent(username),\n      password: decodeURIComponent(password),\n      port: port ? parseInt(port) : undefined,\n      database: afterBase || undefined\n    };\n    // Loop to set every options in connectionUrl to object\n    for (const [key, value] of Object.entries(optionsObject)) {\n      connectionUrl[key] = value;\n    }\n    return connectionUrl;\n  }\n}","map":{"version":3,"names":["hash","shorten","VersionUtils","DriverUtils","isSQLiteFamily","driver","includes","options","type","isMySQLFamily","isReleaseVersionOrGreater","version","isGreaterOrEqual","isPostgresFamily","buildDriverOptions","buildOptions","url","urlDriverOptions","parseConnectionUrl","useSid","database","sid","key","Object","keys","assign","buildMongoDBDriverOptions","parseMongoDBConnectionUrl","buildAlias","maxAliasLength","alias","joiner","newAlias","length","join","shortenedAlias","buildColumnAlias","unshift","split","firstSlashes","indexOf","preBase","substr","secondSlash","base","afterBase","undefined","lastAtSign","lastIndexOf","usernameAndPassword","hostAndPort","username","password","firstColon","host","port","decodeURIComponent","parseInt","afterQuestionMark","hostReplicaSet","replicaSet","optionsObject","optionsList","optionKey","optionValue","forEach","optionItem","connectionUrl","value","entries"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\driver\\DriverUtils.ts"],"sourcesContent":["import { Driver } from \"./Driver\"\nimport { hash, shorten } from \"../util/StringUtils\"\nimport { VersionUtils } from \"../util/VersionUtils\"\n\n/**\n * Common driver utility functions.\n */\nexport class DriverUtils {\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Returns true if given driver is SQLite-based driver.\n     */\n    static isSQLiteFamily(driver: Driver): boolean {\n        return [\n            \"sqlite\",\n            \"cordova\",\n            \"react-native\",\n            \"nativescript\",\n            \"sqljs\",\n            \"expo\",\n            \"better-sqlite3\",\n            \"capacitor\",\n        ].includes(driver.options.type)\n    }\n\n    /**\n     * Returns true if given driver is MySQL-based driver.\n     */\n    static isMySQLFamily(driver: Driver): boolean {\n        return [\"mysql\", \"mariadb\"].includes(driver.options.type)\n    }\n\n    static isReleaseVersionOrGreater(driver: Driver, version: string): boolean {\n        return (\n            driver.version != null &&\n            VersionUtils.isGreaterOrEqual(driver.version, version)\n        )\n    }\n\n    static isPostgresFamily(driver: Driver): boolean {\n        return [\"postgres\", \"aurora-postgres\", \"cockroachdb\"].includes(\n            driver.options.type,\n        )\n    }\n\n    /**\n     * Normalizes and builds a new driver options.\n     * Extracts settings from connection url and sets to a new options object.\n     */\n    static buildDriverOptions(\n        options: any,\n        buildOptions?: { useSid: boolean },\n    ): any {\n        if (options.url) {\n            const urlDriverOptions = this.parseConnectionUrl(options.url) as {\n                [key: string]: any\n            }\n\n            if (\n                buildOptions &&\n                buildOptions.useSid &&\n                urlDriverOptions.database\n            ) {\n                urlDriverOptions.sid = urlDriverOptions.database\n            }\n\n            for (const key of Object.keys(urlDriverOptions)) {\n                if (typeof urlDriverOptions[key] === \"undefined\") {\n                    delete urlDriverOptions[key]\n                }\n            }\n\n            return Object.assign({}, options, urlDriverOptions)\n        }\n        return Object.assign({}, options)\n    }\n\n    /**\n     * buildDriverOptions for MongodDB only to support replica set\n     */\n    static buildMongoDBDriverOptions(\n        options: any,\n        buildOptions?: { useSid: boolean },\n    ): any {\n        if (options.url) {\n            const urlDriverOptions = this.parseMongoDBConnectionUrl(\n                options.url,\n            ) as { [key: string]: any }\n\n            if (\n                buildOptions &&\n                buildOptions.useSid &&\n                urlDriverOptions.database\n            ) {\n                urlDriverOptions.sid = urlDriverOptions.database\n            }\n\n            for (const key of Object.keys(urlDriverOptions)) {\n                if (typeof urlDriverOptions[key] === \"undefined\") {\n                    delete urlDriverOptions[key]\n                }\n            }\n\n            return Object.assign({}, options, urlDriverOptions)\n        }\n        return Object.assign({}, options)\n    }\n\n    /**\n     * Joins and shortens alias if needed.\n     *\n     * If the alias length is greater than the limit allowed by the current\n     * driver, replaces it with a shortend string, if the shortend string\n     * is still too long, it will then hash the alias.\n     *\n     * @param driver Current `Driver`.\n     * @param buildOptions Optional settings.\n     * @param alias Alias parts.\n     *\n     * @return An alias that is no longer than the divers max alias length.\n     */\n    static buildAlias(\n        { maxAliasLength }: Driver,\n        buildOptions: { shorten?: boolean; joiner?: string } | undefined,\n        ...alias: string[]\n    ): string {\n        const joiner =\n            buildOptions && buildOptions.joiner ? buildOptions.joiner : \"_\"\n\n        let newAlias = alias.length === 1 ? alias[0] : alias.join(joiner)\n\n        if (\n            maxAliasLength &&\n            maxAliasLength > 0 &&\n            newAlias.length > maxAliasLength\n        ) {\n            if (buildOptions && buildOptions.shorten === true) {\n                const shortenedAlias = shorten(newAlias)\n                if (shortenedAlias.length < maxAliasLength) {\n                    return shortenedAlias\n                }\n            }\n\n            return hash(newAlias, { length: maxAliasLength })\n        }\n\n        return newAlias\n    }\n\n    /**\n     * @deprecated use `buildAlias` instead.\n     */\n    static buildColumnAlias(\n        { maxAliasLength }: Driver,\n        buildOptions: { shorten?: boolean; joiner?: string } | string,\n        ...alias: string[]\n    ) {\n        if (typeof buildOptions === \"string\") {\n            alias.unshift(buildOptions)\n            buildOptions = { shorten: false, joiner: \"_\" }\n        } else {\n            buildOptions = Object.assign(\n                { shorten: false, joiner: \"_\" },\n                buildOptions,\n            )\n        }\n        return this.buildAlias(\n            { maxAliasLength } as Driver,\n            buildOptions,\n            ...alias,\n        )\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Extracts connection data from the connection url.\n     */\n    private static parseConnectionUrl(url: string) {\n        const type = url.split(\":\")[0]\n        const firstSlashes = url.indexOf(\"//\")\n        const preBase = url.substr(firstSlashes + 2)\n        const secondSlash = preBase.indexOf(\"/\")\n        const base =\n            secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase\n        let afterBase =\n            secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined\n        // remove mongodb query params\n        if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n            afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"))\n        }\n\n        const lastAtSign = base.lastIndexOf(\"@\")\n        const usernameAndPassword = base.substr(0, lastAtSign)\n        const hostAndPort = base.substr(lastAtSign + 1)\n\n        let username = usernameAndPassword\n        let password = \"\"\n        const firstColon = usernameAndPassword.indexOf(\":\")\n        if (firstColon !== -1) {\n            username = usernameAndPassword.substr(0, firstColon)\n            password = usernameAndPassword.substr(firstColon + 1)\n        }\n        const [host, port] = hostAndPort.split(\":\")\n\n        return {\n            type: type,\n            host: host,\n            username: decodeURIComponent(username),\n            password: decodeURIComponent(password),\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined,\n        }\n    }\n\n    /**\n     * Extracts connection data from the connection url for MongoDB to support replica set.\n     */\n    private static parseMongoDBConnectionUrl(url: string) {\n        const type = url.split(\":\")[0]\n        const firstSlashes = url.indexOf(\"//\")\n        const preBase = url.substr(firstSlashes + 2)\n        const secondSlash = preBase.indexOf(\"/\")\n        const base =\n            secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase\n        let afterBase =\n            secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined\n        let afterQuestionMark = \"\"\n        let host = undefined\n        let port = undefined\n        let hostReplicaSet = undefined\n        let replicaSet = undefined\n\n        let optionsObject: any = {}\n\n        if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n            // split params\n            afterQuestionMark = afterBase.substr(\n                afterBase.indexOf(\"?\") + 1,\n                afterBase.length,\n            )\n\n            const optionsList = afterQuestionMark.split(\"&\")\n            let optionKey: string\n            let optionValue: string\n\n            // create optionsObject for merge with connectionUrl object before return\n            optionsList.forEach((optionItem) => {\n                optionKey = optionItem.split(\"=\")[0]\n                optionValue = optionItem.split(\"=\")[1]\n                optionsObject[optionKey] = optionValue\n            })\n\n            // specific replicaSet value to set options about hostReplicaSet\n            replicaSet = optionsObject[\"replicaSet\"]\n            afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"))\n        }\n\n        const lastAtSign = base.lastIndexOf(\"@\")\n        const usernameAndPassword = base.substr(0, lastAtSign)\n        const hostAndPort = base.substr(lastAtSign + 1)\n\n        let username = usernameAndPassword\n        let password = \"\"\n        const firstColon = usernameAndPassword.indexOf(\":\")\n        if (firstColon !== -1) {\n            username = usernameAndPassword.substr(0, firstColon)\n            password = usernameAndPassword.substr(firstColon + 1)\n        }\n\n        // If replicaSet have value set It as hostlist, If not set like standalone host\n        if (replicaSet) {\n            hostReplicaSet = hostAndPort\n        } else {\n            ;[host, port] = hostAndPort.split(\":\")\n        }\n\n        let connectionUrl: any = {\n            type: type,\n            host: host,\n            hostReplicaSet: hostReplicaSet,\n            username: decodeURIComponent(username),\n            password: decodeURIComponent(password),\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined,\n        }\n\n        // Loop to set every options in connectionUrl to object\n        for (const [key, value] of Object.entries(optionsObject)) {\n            connectionUrl[key] = value\n        }\n\n        return connectionUrl\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}