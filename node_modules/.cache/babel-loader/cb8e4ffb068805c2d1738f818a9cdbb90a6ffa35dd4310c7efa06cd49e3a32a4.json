{"ast":null,"code":"import { TypeORMError } from \"../error\";\n/**\n * Contains all information about entity's relation count.\n */\nexport class RelationCountMetadata {\n  // ---------------------------------------------------------------------\n  // Constructor\n  // ---------------------------------------------------------------------\n  constructor(options) {\n    this.entityMetadata = options.entityMetadata;\n    this.target = options.args.target;\n    this.propertyName = options.args.propertyName;\n    this.relationNameOrFactory = options.args.relation;\n    this.alias = options.args.alias;\n    this.queryBuilderFactory = options.args.queryBuilderFactory;\n  }\n  // ---------------------------------------------------------------------\n  // Public Builder Methods\n  // ---------------------------------------------------------------------\n  /**\n   * Builds some depend relation count metadata properties.\n   * This builder method should be used only after entity metadata, its properties map and all relations are build.\n   */\n  build() {\n    const propertyPath = typeof this.relationNameOrFactory === \"function\" ? this.relationNameOrFactory(this.entityMetadata.propertiesMap) : this.relationNameOrFactory;\n    const relation = this.entityMetadata.findRelationWithPropertyPath(propertyPath);\n    if (!relation) throw new TypeORMError(`Cannot find relation ${propertyPath}. Wrong relation specified for @RelationCount decorator.`);\n    this.relation = relation;\n  }\n}","map":{"version":3,"names":["TypeORMError","RelationCountMetadata","constructor","options","entityMetadata","target","args","propertyName","relationNameOrFactory","relation","alias","queryBuilderFactory","build","propertyPath","propertiesMap","findRelationWithPropertyPath"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\metadata\\RelationCountMetadata.ts"],"sourcesContent":["import { RelationCountMetadataArgs } from \"../metadata-args/RelationCountMetadataArgs\"\nimport { EntityMetadata } from \"./EntityMetadata\"\nimport { RelationMetadata } from \"./RelationMetadata\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { TypeORMError } from \"../error\"\n\n/**\n * Contains all information about entity's relation count.\n */\nexport class RelationCountMetadata {\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata where this column metadata is.\n     */\n    entityMetadata: EntityMetadata\n\n    /**\n     * Relation which needs to be counted.\n     */\n    relation: RelationMetadata\n\n    /**\n     * Relation name which need to count.\n     */\n    relationNameOrFactory: string | ((object: any) => any)\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target: Function | string\n\n    /**\n     * Target's property name to which this metadata is applied.\n     */\n    propertyName: string\n\n    /**\n     * Alias of the joined (destination) table.\n     */\n    alias?: string\n\n    /**\n     * Extra condition applied to \"ON\" section of join.\n     */\n    queryBuilderFactory?: (\n        qb: SelectQueryBuilder<any>,\n    ) => SelectQueryBuilder<any>\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata\n        args: RelationCountMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata\n        this.target = options.args.target\n        this.propertyName = options.args.propertyName\n        this.relationNameOrFactory = options.args.relation\n        this.alias = options.args.alias\n        this.queryBuilderFactory = options.args.queryBuilderFactory\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Builder Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend relation count metadata properties.\n     * This builder method should be used only after entity metadata, its properties map and all relations are build.\n     */\n    build() {\n        const propertyPath =\n            typeof this.relationNameOrFactory === \"function\"\n                ? this.relationNameOrFactory(this.entityMetadata.propertiesMap)\n                : this.relationNameOrFactory\n        const relation =\n            this.entityMetadata.findRelationWithPropertyPath(propertyPath)\n        if (!relation)\n            throw new TypeORMError(\n                `Cannot find relation ${propertyPath}. Wrong relation specified for @RelationCount decorator.`,\n            )\n\n        this.relation = relation\n    }\n}\n"],"mappings":"AAIA,SAASA,YAAY,QAAQ,UAAU;AAEvC;;;AAGA,OAAM,MAAOC,qBAAqB;EA0C9B;EACA;EACA;EAEAC,YAAYC,OAGX;IACG,IAAI,CAACC,cAAc,GAAGD,OAAO,CAACC,cAAc;IAC5C,IAAI,CAACC,MAAM,GAAGF,OAAO,CAACG,IAAI,CAACD,MAAM;IACjC,IAAI,CAACE,YAAY,GAAGJ,OAAO,CAACG,IAAI,CAACC,YAAY;IAC7C,IAAI,CAACC,qBAAqB,GAAGL,OAAO,CAACG,IAAI,CAACG,QAAQ;IAClD,IAAI,CAACC,KAAK,GAAGP,OAAO,CAACG,IAAI,CAACI,KAAK;IAC/B,IAAI,CAACC,mBAAmB,GAAGR,OAAO,CAACG,IAAI,CAACK,mBAAmB;EAC/D;EAEA;EACA;EACA;EAEA;;;;EAIAC,KAAKA,CAAA;IACD,MAAMC,YAAY,GACd,OAAO,IAAI,CAACL,qBAAqB,KAAK,UAAU,GAC1C,IAAI,CAACA,qBAAqB,CAAC,IAAI,CAACJ,cAAc,CAACU,aAAa,CAAC,GAC7D,IAAI,CAACN,qBAAqB;IACpC,MAAMC,QAAQ,GACV,IAAI,CAACL,cAAc,CAACW,4BAA4B,CAACF,YAAY,CAAC;IAClE,IAAI,CAACJ,QAAQ,EACT,MAAM,IAAIT,YAAY,CAClB,wBAAwBa,YAAY,0DAA0D,CACjG;IAEL,IAAI,CAACJ,QAAQ,GAAGA,QAAQ;EAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}