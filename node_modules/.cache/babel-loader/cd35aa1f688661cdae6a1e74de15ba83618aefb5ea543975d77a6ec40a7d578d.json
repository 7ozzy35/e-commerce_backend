{"ast":null,"code":"import { getMetadataArgsStorage } from \"../../globals\";\nimport { ObjectUtils } from \"../../util/ObjectUtils\";\n/**\n * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.\n * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.\n */\nexport function OneToOne(typeFunctionOrTarget, inverseSideOrOptions, options) {\n  // normalize parameters\n  let inverseSideProperty;\n  if (ObjectUtils.isObject(inverseSideOrOptions)) {\n    options = inverseSideOrOptions;\n  } else {\n    inverseSideProperty = inverseSideOrOptions;\n  }\n  return function (object, propertyName) {\n    if (!options) options = {};\n    // now try to determine it its lazy relation\n    let isLazy = options && options.lazy === true ? true : false;\n    if (!isLazy && Reflect && Reflect.getMetadata) {\n      // automatic determination\n      const reflectedType = Reflect.getMetadata(\"design:type\", object, propertyName);\n      if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\") isLazy = true;\n    }\n    getMetadataArgsStorage().relations.push({\n      target: object.constructor,\n      propertyName: propertyName,\n      // propertyType: reflectedType,\n      isLazy: isLazy,\n      relationType: \"one-to-one\",\n      type: typeFunctionOrTarget,\n      inverseSideProperty: inverseSideProperty,\n      options: options\n    });\n  };\n}","map":{"version":3,"names":["getMetadataArgsStorage","ObjectUtils","OneToOne","typeFunctionOrTarget","inverseSideOrOptions","options","inverseSideProperty","isObject","object","propertyName","isLazy","lazy","Reflect","getMetadata","reflectedType","name","toLowerCase","relations","push","target","constructor","relationType","type"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\decorator\\relations\\OneToOne.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { RelationMetadataArgs } from \"../../metadata-args/RelationMetadataArgs\"\nimport { ObjectType } from \"../../common/ObjectType\"\nimport { RelationOptions } from \"../options/RelationOptions\"\nimport { ObjectUtils } from \"../../util/ObjectUtils\"\n\n/**\n * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.\n * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.\n */\nexport function OneToOne<T>(\n    typeFunctionOrTarget: string | ((type?: any) => ObjectType<T>),\n    options?: RelationOptions,\n): PropertyDecorator\n\n/**\n * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.\n * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.\n */\nexport function OneToOne<T>(\n    typeFunctionOrTarget: string | ((type?: any) => ObjectType<T>),\n    inverseSide?: string | ((object: T) => any),\n    options?: RelationOptions,\n): PropertyDecorator\n\n/**\n * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.\n * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.\n */\nexport function OneToOne<T>(\n    typeFunctionOrTarget: string | ((type?: any) => ObjectType<T>),\n    inverseSideOrOptions?: string | ((object: T) => any) | RelationOptions,\n    options?: RelationOptions,\n): PropertyDecorator {\n    // normalize parameters\n    let inverseSideProperty: string | ((object: T) => any)\n    if (ObjectUtils.isObject(inverseSideOrOptions)) {\n        options = <RelationOptions>inverseSideOrOptions\n    } else {\n        inverseSideProperty = inverseSideOrOptions as any\n    }\n\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions\n\n        // now try to determine it its lazy relation\n        let isLazy = options && options.lazy === true ? true : false\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) {\n            // automatic determination\n            const reflectedType = (Reflect as any).getMetadata(\n                \"design:type\",\n                object,\n                propertyName,\n            )\n            if (\n                reflectedType &&\n                typeof reflectedType.name === \"string\" &&\n                reflectedType.name.toLowerCase() === \"promise\"\n            )\n                isLazy = true\n        }\n\n        getMetadataArgsStorage().relations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            isLazy: isLazy,\n            relationType: \"one-to-one\",\n            type: typeFunctionOrTarget,\n            inverseSideProperty: inverseSideProperty,\n            options: options,\n        } as RelationMetadataArgs)\n    }\n}\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,eAAe;AAItD,SAASC,WAAW,QAAQ,wBAAwB;AAqBpD;;;;AAIA,OAAM,SAAUC,QAAQA,CACpBC,oBAA8D,EAC9DC,oBAAsE,EACtEC,OAAyB;EAEzB;EACA,IAAIC,mBAAkD;EACtD,IAAIL,WAAW,CAACM,QAAQ,CAACH,oBAAoB,CAAC,EAAE;IAC5CC,OAAO,GAAoBD,oBAAoB;EACnD,CAAC,MAAM;IACHE,mBAAmB,GAAGF,oBAA2B;EACrD;EAEA,OAAO,UAAUI,MAAc,EAAEC,YAAoB;IACjD,IAAI,CAACJ,OAAO,EAAEA,OAAO,GAAG,EAAqB;IAE7C;IACA,IAAIK,MAAM,GAAGL,OAAO,IAAIA,OAAO,CAACM,IAAI,KAAK,IAAI,GAAG,IAAI,GAAG,KAAK;IAC5D,IAAI,CAACD,MAAM,IAAIE,OAAO,IAAKA,OAAe,CAACC,WAAW,EAAE;MACpD;MACA,MAAMC,aAAa,GAAIF,OAAe,CAACC,WAAW,CAC9C,aAAa,EACbL,MAAM,EACNC,YAAY,CACf;MACD,IACIK,aAAa,IACb,OAAOA,aAAa,CAACC,IAAI,KAAK,QAAQ,IACtCD,aAAa,CAACC,IAAI,CAACC,WAAW,EAAE,KAAK,SAAS,EAE9CN,MAAM,GAAG,IAAI;IACrB;IAEAV,sBAAsB,EAAE,CAACiB,SAAS,CAACC,IAAI,CAAC;MACpCC,MAAM,EAAEX,MAAM,CAACY,WAAW;MAC1BX,YAAY,EAAEA,YAAY;MAC1B;MACAC,MAAM,EAAEA,MAAM;MACdW,YAAY,EAAE,YAAY;MAC1BC,IAAI,EAAEnB,oBAAoB;MAC1BG,mBAAmB,EAAEA,mBAAmB;MACxCD,OAAO,EAAEA;KACY,CAAC;EAC9B,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}