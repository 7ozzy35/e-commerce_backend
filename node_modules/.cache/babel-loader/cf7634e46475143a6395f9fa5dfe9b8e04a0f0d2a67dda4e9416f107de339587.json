{"ast":null,"code":"import { getMetadataArgsStorage } from \"../../globals\";\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(optionsOrOptionsArray) {\n  return function (object, propertyName) {\n    const options = Array.isArray(optionsOrOptionsArray) ? optionsOrOptionsArray : [optionsOrOptionsArray || {}];\n    options.forEach(options => {\n      getMetadataArgsStorage().joinColumns.push({\n        target: object.constructor,\n        propertyName: propertyName,\n        name: options.name,\n        referencedColumnName: options.referencedColumnName,\n        foreignKeyConstraintName: options.foreignKeyConstraintName\n      });\n    });\n  };\n}","map":{"version":3,"names":["getMetadataArgsStorage","JoinColumn","optionsOrOptionsArray","object","propertyName","options","Array","isArray","forEach","joinColumns","push","target","constructor","name","referencedColumnName","foreignKeyConstraintName"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\decorator\\relations\\JoinColumn.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { JoinColumnMetadataArgs } from \"../../metadata-args/JoinColumnMetadataArgs\"\nimport { JoinColumnOptions } from \"../options/JoinColumnOptions\"\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(): PropertyDecorator\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(options: JoinColumnOptions): PropertyDecorator\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(options: JoinColumnOptions[]): PropertyDecorator\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(\n    optionsOrOptionsArray?: JoinColumnOptions | JoinColumnOptions[],\n): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        const options = Array.isArray(optionsOrOptionsArray)\n            ? optionsOrOptionsArray\n            : [optionsOrOptionsArray || {}]\n        options.forEach((options) => {\n            getMetadataArgsStorage().joinColumns.push({\n                target: object.constructor,\n                propertyName: propertyName,\n                name: options.name,\n                referencedColumnName: options.referencedColumnName,\n                foreignKeyConstraintName: options.foreignKeyConstraintName,\n            } as JoinColumnMetadataArgs)\n        })\n    }\n}\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,eAAe;AAyBtD;;;;;AAKA,OAAM,SAAUC,UAAUA,CACtBC,qBAA+D;EAE/D,OAAO,UAAUC,MAAc,EAAEC,YAAoB;IACjD,MAAMC,OAAO,GAAGC,KAAK,CAACC,OAAO,CAACL,qBAAqB,CAAC,GAC9CA,qBAAqB,GACrB,CAACA,qBAAqB,IAAI,EAAE,CAAC;IACnCG,OAAO,CAACG,OAAO,CAAEH,OAAO,IAAI;MACxBL,sBAAsB,EAAE,CAACS,WAAW,CAACC,IAAI,CAAC;QACtCC,MAAM,EAAER,MAAM,CAACS,WAAW;QAC1BR,YAAY,EAAEA,YAAY;QAC1BS,IAAI,EAAER,OAAO,CAACQ,IAAI;QAClBC,oBAAoB,EAAET,OAAO,CAACS,oBAAoB;QAClDC,wBAAwB,EAAEV,OAAO,CAACU;OACX,CAAC;IAChC,CAAC,CAAC;EACN,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}