{"ast":null,"code":"import express from 'express';\nimport { AppDataSource } from './data_source';\nimport { Product } from './entity/Product';\nimport cors from 'cors';\nconst app = express();\napp.use(express.json());\napp.use(cors({\n  origin: 'http://localhost:3000',\n  methods: ['GET', 'POST', 'PUT', 'DELETE'],\n  allowedHeaders: ['Content-Type']\n}));\n\n// Veritabanını başlat\nAppDataSource.initialize().then(() => {\n  console.log('Veritabanına başarıyla bağlanıldı.');\n}).catch(error => {\n  console.error('Veritabanı bağlantı hatası:', error);\n  process.exit(1); // Veritabanı bağlantısı başarısız olursa uygulamayı sonlandır\n});\n\n// Ürün ekleme (CREATE)\napp.post('/product', async (req, res) => {\n  try {\n    if (!AppDataSource.isInitialized) {\n      throw new Error('Veritabanı bağlantısı başlatılmadı');\n    }\n    const productRepository = AppDataSource.getRepository(Product);\n    const newProduct = productRepository.create(req.body);\n    const savedProduct = await productRepository.save(newProduct);\n    console.log('Yeni ürün eklendi:', savedProduct);\n    res.status(201).json(savedProduct);\n  } catch (error) {\n    console.error('Ürün ekleme hatası:', error);\n    res.status(500).json({\n      message: 'Ürün eklenirken bir hata oluştu',\n      error: error instanceof Error ? error.message : 'Bilinmeyen hata'\n    });\n  }\n});\n\n// Tüm ürünleri listeleme (READ)\napp.get('/product', async (req, res) => {\n  try {\n    if (!AppDataSource.isInitialized) {\n      throw new Error('Veritabanı bağlantısı başlatılmadı');\n    }\n    const productRepository = AppDataSource.getRepository(Product);\n    const products = await productRepository.find();\n    console.log('Ürünler başarıyla listelendi:', products);\n    res.json(products);\n  } catch (error) {\n    console.error('Ürün listeleme hatası:', error);\n    res.status(500).json({\n      message: 'Ürünler listelenirken bir hata oluştu',\n      error: error instanceof Error ? error.message : 'Bilinmeyen hata'\n    });\n  }\n});\n\n// Belirli bir ürünü listeleme (READ)\napp.get('/product/:id', async (req, res) => {\n  try {\n    if (!AppDataSource.isInitialized) {\n      throw new Error('Veritabanı bağlantısı başlatılmadı');\n    }\n    const productRepository = AppDataSource.getRepository(Product);\n    const product = await productRepository.findOneBy({\n      id: parseInt(req.params.id)\n    });\n    if (product) {\n      console.log('Ürün bulundu:', product);\n      res.json(product);\n    } else {\n      console.log('Ürün bulunamadı:', req.params.id);\n      res.status(404).json({\n        message: 'Ürün bulunamadı'\n      });\n    }\n  } catch (error) {\n    console.error('Ürün bulma hatası:', error);\n    res.status(500).json({\n      message: 'Ürün bulunurken bir hata oluştu',\n      error: error instanceof Error ? error.message : 'Bilinmeyen hata'\n    });\n  }\n});\n\n// Ürün güncelleme (UPDATE)\napp.put('/product/:id', async (req, res) => {\n  try {\n    if (!AppDataSource.isInitialized) {\n      throw new Error('Veritabanı bağlantısı başlatılmadı');\n    }\n    const productRepository = AppDataSource.getRepository(Product);\n    const updateResult = await productRepository.update(req.params.id, req.body);\n    if (updateResult.affected > 0) {\n      const updatedProduct = await productRepository.findOneBy({\n        id: parseInt(req.params.id)\n      });\n      console.log('Ürün güncellendi:', updatedProduct);\n      res.json(updatedProduct);\n    } else {\n      console.log('Güncellenecek ürün bulunamadı:', req.params.id);\n      res.status(404).json({\n        message: 'Ürün güncellenemedi'\n      });\n    }\n  } catch (error) {\n    console.error('Ürün güncelleme hatası:', error);\n    res.status(500).json({\n      message: 'Ürün güncellenirken bir hata oluştu',\n      error: error instanceof Error ? error.message : 'Bilinmeyen hata'\n    });\n  }\n});\n\n// Ürün silme (DELETE)\napp.delete('/product/:id', async (req, res) => {\n  try {\n    if (!AppDataSource.isInitialized) {\n      throw new Error('Veritabanı bağlantısı başlatılmadı');\n    }\n    const productRepository = AppDataSource.getRepository(Product);\n    const deleteResult = await productRepository.delete(req.params.id);\n    if (deleteResult.affected > 0) {\n      console.log('Ürün silindi:', req.params.id);\n      res.json({\n        message: 'Ürün silindi'\n      });\n    } else {\n      console.log('Silinecek ürün bulunamadı:', req.params.id);\n      res.status(404).json({\n        message: 'Ürün bulunamadı'\n      });\n    }\n  } catch (error) {\n    console.error('Ürün silme hatası:', error);\n    res.status(500).json({\n      message: 'Ürün silinirken bir hata oluştu',\n      error: error instanceof Error ? error.message : 'Bilinmeyen hata'\n    });\n  }\n});\n\n// Sunucuyu başlat\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(`Sunucu ${PORT} portunda çalışıyor.`);\n});","map":{"version":3,"names":["express","AppDataSource","Product","cors","app","use","json","origin","methods","allowedHeaders","initialize","then","console","log","catch","error","process","exit","post","req","res","isInitialized","Error","productRepository","getRepository","newProduct","create","body","savedProduct","save","status","message","get","products","find","product","findOneBy","id","parseInt","params","put","updateResult","update","affected","updatedProduct","delete","deleteResult","PORT","listen"],"sources":["D:/Ronwell Task 1/src/index.ts"],"sourcesContent":["import express, { Request, Response } from 'express';\r\nimport { AppDataSource } from './data_source';\r\nimport { Product } from './entity/Product';\r\nimport cors from 'cors';\r\n\r\nconst app = express();\r\napp.use(express.json());\r\napp.use(cors({\r\n  origin: 'http://localhost:3000',\r\n  methods: ['GET', 'POST', 'PUT', 'DELETE'],\r\n  allowedHeaders: ['Content-Type']\r\n}));\r\n\r\n// Veritabanını başlat\r\nAppDataSource.initialize()\r\n  .then(() => {\r\n    console.log('Veritabanına başarıyla bağlanıldı.');\r\n  })\r\n  .catch((error) => {\r\n    console.error('Veritabanı bağlantı hatası:', error);\r\n    process.exit(1); // Veritabanı bağlantısı başarısız olursa uygulamayı sonlandır\r\n  });\r\n\r\n// Ürün ekleme (CREATE)\r\napp.post('/product', async (req: Request, res: Response) => {\r\n  try {\r\n    if (!AppDataSource.isInitialized) {\r\n      throw new Error('Veritabanı bağlantısı başlatılmadı');\r\n    }\r\n    const productRepository = AppDataSource.getRepository(Product);\r\n    const newProduct = productRepository.create(req.body);\r\n    const savedProduct = await productRepository.save(newProduct);\r\n    console.log('Yeni ürün eklendi:', savedProduct);\r\n    res.status(201).json(savedProduct);\r\n  } catch (error) {\r\n    console.error('Ürün ekleme hatası:', error);\r\n    res.status(500).json({ \r\n      message: 'Ürün eklenirken bir hata oluştu', \r\n      error: error instanceof Error ? error.message : 'Bilinmeyen hata'\r\n    });\r\n  }\r\n});\r\n\r\n// Tüm ürünleri listeleme (READ)\r\napp.get('/product', async (req: Request, res: Response) => {\r\n  try {\r\n    if (!AppDataSource.isInitialized) {\r\n      throw new Error('Veritabanı bağlantısı başlatılmadı');\r\n    }\r\n    const productRepository = AppDataSource.getRepository(Product);\r\n    const products = await productRepository.find();\r\n    console.log('Ürünler başarıyla listelendi:', products);\r\n    res.json(products);\r\n  } catch (error) {\r\n    console.error('Ürün listeleme hatası:', error);\r\n    res.status(500).json({ \r\n      message: 'Ürünler listelenirken bir hata oluştu', \r\n      error: error instanceof Error ? error.message : 'Bilinmeyen hata'\r\n    });\r\n  }\r\n});\r\n\r\n// Belirli bir ürünü listeleme (READ)\r\napp.get('/product/:id', async (req: Request, res: Response) => {\r\n  try {\r\n    if (!AppDataSource.isInitialized) {\r\n      throw new Error('Veritabanı bağlantısı başlatılmadı');\r\n    }\r\n    const productRepository = AppDataSource.getRepository(Product);\r\n    const product = await productRepository.findOneBy({ id: parseInt(req.params.id) });\r\n    if (product) {\r\n      console.log('Ürün bulundu:', product);\r\n      res.json(product);\r\n    } else {\r\n      console.log('Ürün bulunamadı:', req.params.id);\r\n      res.status(404).json({ message: 'Ürün bulunamadı' });\r\n    }\r\n  } catch (error) {\r\n    console.error('Ürün bulma hatası:', error);\r\n    res.status(500).json({ \r\n      message: 'Ürün bulunurken bir hata oluştu', \r\n      error: error instanceof Error ? error.message : 'Bilinmeyen hata'\r\n    });\r\n  }\r\n});\r\n\r\n// Ürün güncelleme (UPDATE)\r\napp.put('/product/:id', async (req: Request, res: Response) => {\r\n  try {\r\n    if (!AppDataSource.isInitialized) {\r\n      throw new Error('Veritabanı bağlantısı başlatılmadı');\r\n    }\r\n    const productRepository = AppDataSource.getRepository(Product);\r\n    const updateResult = await productRepository.update(req.params.id, req.body);\r\n    if (updateResult.affected > 0) {\r\n      const updatedProduct = await productRepository.findOneBy({ id: parseInt(req.params.id) });\r\n      console.log('Ürün güncellendi:', updatedProduct);\r\n      res.json(updatedProduct);\r\n    } else {\r\n      console.log('Güncellenecek ürün bulunamadı:', req.params.id);\r\n      res.status(404).json({ message: 'Ürün güncellenemedi' });\r\n    }\r\n  } catch (error) {\r\n    console.error('Ürün güncelleme hatası:', error);\r\n    res.status(500).json({ \r\n      message: 'Ürün güncellenirken bir hata oluştu', \r\n      error: error instanceof Error ? error.message : 'Bilinmeyen hata'\r\n    });\r\n  }\r\n});\r\n\r\n// Ürün silme (DELETE)\r\napp.delete('/product/:id', async (req: Request, res: Response) => {\r\n  try {\r\n    if (!AppDataSource.isInitialized) {\r\n      throw new Error('Veritabanı bağlantısı başlatılmadı');\r\n    }\r\n    const productRepository = AppDataSource.getRepository(Product);\r\n    const deleteResult = await productRepository.delete(req.params.id);\r\n    if (deleteResult.affected > 0) {\r\n      console.log('Ürün silindi:', req.params.id);\r\n      res.json({ message: 'Ürün silindi' });\r\n    } else {\r\n      console.log('Silinecek ürün bulunamadı:', req.params.id);\r\n      res.status(404).json({ message: 'Ürün bulunamadı' });\r\n    }\r\n  } catch (error) {\r\n    console.error('Ürün silme hatası:', error);\r\n    res.status(500).json({ \r\n      message: 'Ürün silinirken bir hata oluştu', \r\n      error: error instanceof Error ? error.message : 'Bilinmeyen hata'\r\n    });\r\n  }\r\n});\r\n\r\n// Sunucuyu başlat\r\nconst PORT = 3000;\r\napp.listen(PORT, () => {\r\n  console.log(`Sunucu ${PORT} portunda çalışıyor.`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}