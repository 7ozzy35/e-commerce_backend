{"ast":null,"code":"import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { NativescriptQueryRunner } from \"./NativescriptQueryRunner\";\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\n/**\n * Organizes communication with sqlite DBMS within Nativescript.\n */\nexport class NativescriptDriver extends AbstractSqliteDriver {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connection) {\n    super(connection);\n    this.connection = connection;\n    this.options = connection.options;\n    this.database = this.options.database;\n    this.driver = this.options.driver;\n    // load sqlite package\n    this.loadDependencies();\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Closes connection with database.\n   */\n  async disconnect() {\n    return new Promise((ok, fail) => {\n      this.queryRunner = undefined;\n      this.databaseConnection.close().then(ok).catch(fail);\n    });\n  }\n  /**\n   * Creates a query runner used to execute database queries.\n   */\n  createQueryRunner(mode) {\n    if (!this.queryRunner) {\n      this.queryRunner = new NativescriptQueryRunner(this);\n    }\n    return this.queryRunner;\n  }\n  normalizeType(column) {\n    if (column.type === Buffer) {\n      return \"blob\";\n    }\n    return super.normalizeType(column);\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates connection with the database.\n   */\n  createDatabaseConnection() {\n    return new Promise((ok, fail) => {\n      const options = Object.assign({}, {\n        readOnly: this.options.readOnly,\n        key: this.options.key,\n        multithreading: this.options.multithreading,\n        migrate: this.options.migrate,\n        iosFlags: this.options.iosFlags,\n        androidFlags: this.options.androidFlags\n      }, this.options.extra || {});\n      new this.sqlite(this.options.database, options, (err, db) => {\n        if (err) return fail(err);\n        // use object mode to work with TypeORM\n        db.resultType(this.sqlite.RESULTSASOBJECT);\n        // we need to enable foreign keys in sqlite to make sure all foreign key related features\n        // working properly. this also makes onDelete work with sqlite.\n        db.execSQL(`PRAGMA foreign_keys = ON`, [], (err, result) => {\n          if (err) return fail(err);\n          // We are all set\n          ok(db);\n        });\n      });\n    });\n  }\n  /**\n   * If driver dependency is not given explicitly, then try to load it via \"require\".\n   */\n  loadDependencies() {\n    this.sqlite = this.driver;\n    if (!this.driver) {\n      throw new DriverPackageNotInstalledError(\"Nativescript\", \"nativescript-sqlite\");\n    }\n  }\n}","map":{"version":3,"names":["AbstractSqliteDriver","NativescriptQueryRunner","DriverPackageNotInstalledError","NativescriptDriver","constructor","connection","options","database","driver","loadDependencies","disconnect","Promise","ok","fail","queryRunner","undefined","databaseConnection","close","then","catch","createQueryRunner","mode","normalizeType","column","type","Buffer","createDatabaseConnection","Object","assign","readOnly","key","multithreading","migrate","iosFlags","androidFlags","extra","sqlite","err","db","resultType","RESULTSASOBJECT","execSQL","result"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\driver\\nativescript\\NativescriptDriver.ts"],"sourcesContent":["import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\"\nimport { NativescriptConnectionOptions } from \"./NativescriptConnectionOptions\"\nimport { NativescriptQueryRunner } from \"./NativescriptQueryRunner\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { DataSource } from \"../../data-source/DataSource\"\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\nimport { ColumnType } from \"../types/ColumnTypes\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\n\n/**\n * Organizes communication with sqlite DBMS within Nativescript.\n */\nexport class NativescriptDriver extends AbstractSqliteDriver {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: NativescriptConnectionOptions\n\n    /**\n     * Nativescript driver module\n     * this is most likely `nativescript-sqlite`\n     * but user can pass his own\n     */\n    driver: any\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        super(connection)\n\n        this.connection = connection\n        this.options = connection.options as NativescriptConnectionOptions\n        this.database = this.options.database\n        this.driver = this.options.driver\n\n        // load sqlite package\n        this.loadDependencies()\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.queryRunner = undefined\n            this.databaseConnection.close().then(ok).catch(fail)\n        })\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner) {\n            this.queryRunner = new NativescriptQueryRunner(this)\n        }\n\n        return this.queryRunner\n    }\n\n    normalizeType(column: {\n        type?: ColumnType\n        length?: number | string\n        precision?: number | null\n        scale?: number\n    }): string {\n        if ((column.type as any) === Buffer) {\n            return \"blob\"\n        }\n\n        return super.normalizeType(column)\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected createDatabaseConnection() {\n        return new Promise<void>((ok, fail) => {\n            const options = Object.assign(\n                {},\n                {\n                    readOnly: this.options.readOnly,\n                    key: this.options.key,\n                    multithreading: this.options.multithreading,\n                    migrate: this.options.migrate,\n                    iosFlags: this.options.iosFlags,\n                    androidFlags: this.options.androidFlags,\n                },\n                this.options.extra || {},\n            )\n\n            new this.sqlite(\n                this.options.database,\n                options,\n                (err: Error, db: any): any => {\n                    if (err) return fail(err)\n\n                    // use object mode to work with TypeORM\n                    db.resultType(this.sqlite.RESULTSASOBJECT)\n\n                    // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                    // working properly. this also makes onDelete work with sqlite.\n                    db.execSQL(\n                        `PRAGMA foreign_keys = ON`,\n                        [],\n                        (err: Error, result: any): any => {\n                            if (err) return fail(err)\n                            // We are all set\n                            ok(db)\n                        },\n                    )\n                },\n            )\n        })\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        this.sqlite = this.driver\n        if (!this.driver) {\n            throw new DriverPackageNotInstalledError(\n                \"Nativescript\",\n                \"nativescript-sqlite\",\n            )\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}