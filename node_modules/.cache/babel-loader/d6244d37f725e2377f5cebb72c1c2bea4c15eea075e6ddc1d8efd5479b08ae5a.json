{"ast":null,"code":"import { TypeORMError } from \"../error\";\n/**\n * Contains all information about entity's relation count.\n */\nexport class RelationIdMetadata {\n  // ---------------------------------------------------------------------\n  // Constructor\n  // ---------------------------------------------------------------------\n  constructor(options) {\n    this.entityMetadata = options.entityMetadata;\n    this.target = options.args.target;\n    this.propertyName = options.args.propertyName;\n    this.relationNameOrFactory = options.args.relation;\n    this.alias = options.args.alias;\n    this.queryBuilderFactory = options.args.queryBuilderFactory;\n  }\n  // ---------------------------------------------------------------------\n  // Public Methods\n  // ---------------------------------------------------------------------\n  /**\n   * Sets relation id value from the given entity.\n   *\n   * todo: make it to work in embeds as well.\n   */\n  setValue(entity) {\n    const inverseEntity = this.relation.getEntityValue(entity);\n    if (Array.isArray(inverseEntity)) {\n      entity[this.propertyName] = inverseEntity.map(item => {\n        return this.relation.inverseEntityMetadata.getEntityIdMixedMap(item);\n      }).filter(item => item !== null && item !== undefined);\n    } else {\n      const value = this.relation.inverseEntityMetadata.getEntityIdMixedMap(inverseEntity);\n      if (value !== undefined) entity[this.propertyName] = value;\n    }\n  }\n  // ---------------------------------------------------------------------\n  // Public Builder Methods\n  // ---------------------------------------------------------------------\n  /**\n   * Builds some depend relation id properties.\n   * This builder method should be used only after entity metadata, its properties map and all relations are build.\n   */\n  build() {\n    const propertyPath = typeof this.relationNameOrFactory === \"function\" ? this.relationNameOrFactory(this.entityMetadata.propertiesMap) : this.relationNameOrFactory;\n    const relation = this.entityMetadata.findRelationWithPropertyPath(propertyPath);\n    if (!relation) throw new TypeORMError(`Cannot find relation ${propertyPath}. Wrong relation specified for @RelationId decorator.`);\n    this.relation = relation;\n  }\n}","map":{"version":3,"names":["TypeORMError","RelationIdMetadata","constructor","options","entityMetadata","target","args","propertyName","relationNameOrFactory","relation","alias","queryBuilderFactory","setValue","entity","inverseEntity","getEntityValue","Array","isArray","map","item","inverseEntityMetadata","getEntityIdMixedMap","filter","undefined","value","build","propertyPath","propertiesMap","findRelationWithPropertyPath"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\metadata\\RelationIdMetadata.ts"],"sourcesContent":["import { RelationIdMetadataArgs } from \"../metadata-args/RelationIdMetadataArgs\"\nimport { EntityMetadata } from \"./EntityMetadata\"\nimport { RelationMetadata } from \"./RelationMetadata\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { TypeORMError } from \"../error\"\n\n/**\n * Contains all information about entity's relation count.\n */\nexport class RelationIdMetadata {\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata where this column metadata is.\n     */\n    entityMetadata: EntityMetadata\n\n    /**\n     * Relation from which ids will be extracted.\n     */\n    relation: RelationMetadata\n\n    /**\n     * Relation name which need to count.\n     */\n    relationNameOrFactory: string | ((object: any) => any)\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target: Function | string\n\n    /**\n     * Target's property name to which this metadata is applied.\n     */\n    propertyName: string\n\n    /**\n     * Alias of the joined (destination) table.\n     */\n    alias?: string\n\n    /**\n     * Extra condition applied to \"ON\" section of join.\n     */\n    queryBuilderFactory?: (\n        qb: SelectQueryBuilder<any>,\n    ) => SelectQueryBuilder<any>\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata\n        args: RelationIdMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata\n        this.target = options.args.target\n        this.propertyName = options.args.propertyName\n        this.relationNameOrFactory = options.args.relation\n        this.alias = options.args.alias\n        this.queryBuilderFactory = options.args.queryBuilderFactory\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Sets relation id value from the given entity.\n     *\n     * todo: make it to work in embeds as well.\n     */\n    setValue(entity: ObjectLiteral) {\n        const inverseEntity = this.relation.getEntityValue(entity)\n\n        if (Array.isArray(inverseEntity)) {\n            entity[this.propertyName] = inverseEntity\n                .map((item) => {\n                    return this.relation.inverseEntityMetadata.getEntityIdMixedMap(\n                        item,\n                    )\n                })\n                .filter((item) => item !== null && item !== undefined)\n        } else {\n            const value =\n                this.relation.inverseEntityMetadata.getEntityIdMixedMap(\n                    inverseEntity,\n                )\n            if (value !== undefined) entity[this.propertyName] = value\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Builder Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend relation id properties.\n     * This builder method should be used only after entity metadata, its properties map and all relations are build.\n     */\n    build() {\n        const propertyPath =\n            typeof this.relationNameOrFactory === \"function\"\n                ? this.relationNameOrFactory(this.entityMetadata.propertiesMap)\n                : this.relationNameOrFactory\n        const relation =\n            this.entityMetadata.findRelationWithPropertyPath(propertyPath)\n        if (!relation)\n            throw new TypeORMError(\n                `Cannot find relation ${propertyPath}. Wrong relation specified for @RelationId decorator.`,\n            )\n\n        this.relation = relation\n    }\n}\n"],"mappings":"AAKA,SAASA,YAAY,QAAQ,UAAU;AAEvC;;;AAGA,OAAM,MAAOC,kBAAkB;EA0C3B;EACA;EACA;EAEAC,YAAYC,OAGX;IACG,IAAI,CAACC,cAAc,GAAGD,OAAO,CAACC,cAAc;IAC5C,IAAI,CAACC,MAAM,GAAGF,OAAO,CAACG,IAAI,CAACD,MAAM;IACjC,IAAI,CAACE,YAAY,GAAGJ,OAAO,CAACG,IAAI,CAACC,YAAY;IAC7C,IAAI,CAACC,qBAAqB,GAAGL,OAAO,CAACG,IAAI,CAACG,QAAQ;IAClD,IAAI,CAACC,KAAK,GAAGP,OAAO,CAACG,IAAI,CAACI,KAAK;IAC/B,IAAI,CAACC,mBAAmB,GAAGR,OAAO,CAACG,IAAI,CAACK,mBAAmB;EAC/D;EAEA;EACA;EACA;EAEA;;;;;EAKAC,QAAQA,CAACC,MAAqB;IAC1B,MAAMC,aAAa,GAAG,IAAI,CAACL,QAAQ,CAACM,cAAc,CAACF,MAAM,CAAC;IAE1D,IAAIG,KAAK,CAACC,OAAO,CAACH,aAAa,CAAC,EAAE;MAC9BD,MAAM,CAAC,IAAI,CAACN,YAAY,CAAC,GAAGO,aAAa,CACpCI,GAAG,CAAEC,IAAI,IAAI;QACV,OAAO,IAAI,CAACV,QAAQ,CAACW,qBAAqB,CAACC,mBAAmB,CAC1DF,IAAI,CACP;MACL,CAAC,CAAC,CACDG,MAAM,CAAEH,IAAI,IAAKA,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAKI,SAAS,CAAC;IAC9D,CAAC,MAAM;MACH,MAAMC,KAAK,GACP,IAAI,CAACf,QAAQ,CAACW,qBAAqB,CAACC,mBAAmB,CACnDP,aAAa,CAChB;MACL,IAAIU,KAAK,KAAKD,SAAS,EAAEV,MAAM,CAAC,IAAI,CAACN,YAAY,CAAC,GAAGiB,KAAK;IAC9D;EACJ;EAEA;EACA;EACA;EAEA;;;;EAIAC,KAAKA,CAAA;IACD,MAAMC,YAAY,GACd,OAAO,IAAI,CAAClB,qBAAqB,KAAK,UAAU,GAC1C,IAAI,CAACA,qBAAqB,CAAC,IAAI,CAACJ,cAAc,CAACuB,aAAa,CAAC,GAC7D,IAAI,CAACnB,qBAAqB;IACpC,MAAMC,QAAQ,GACV,IAAI,CAACL,cAAc,CAACwB,4BAA4B,CAACF,YAAY,CAAC;IAClE,IAAI,CAACjB,QAAQ,EACT,MAAM,IAAIT,YAAY,CAClB,wBAAwB0B,YAAY,uDAAuD,CAC9F;IAEL,IAAI,CAACjB,QAAQ,GAAGA,QAAQ;EAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}