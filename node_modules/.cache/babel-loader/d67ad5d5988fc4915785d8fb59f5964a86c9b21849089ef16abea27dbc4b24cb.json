{"ast":null,"code":"import { FindOperator } from \"../FindOperator\";\nexport function Raw(valueOrSqlGenerator, sqlGeneratorParameters) {\n  if (typeof valueOrSqlGenerator !== \"function\") {\n    return new FindOperator(\"raw\", valueOrSqlGenerator, false);\n  }\n  return new FindOperator(\"raw\", [], true, true, valueOrSqlGenerator, sqlGeneratorParameters);\n}","map":{"version":3,"names":["FindOperator","Raw","valueOrSqlGenerator","sqlGeneratorParameters"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\find-options\\operator\\Raw.ts"],"sourcesContent":["import { FindOperator } from \"../FindOperator\"\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\n\n/**\n * Find Options Operator.\n * Example: { someField: Raw(\"12\") }\n */\nexport function Raw<T>(value: string): FindOperator<any>\n\n/**\n * Find Options Operator.\n * Example: { someField: Raw((columnAlias) => `${columnAlias} = 5`) }\n */\nexport function Raw<T>(\n    sqlGenerator: (columnAlias: string) => string,\n): FindOperator<any>\n\n/**\n * Find Options Operator.\n * For escaping parameters use next syntax:\n * Example: { someField: Raw((columnAlias) => `${columnAlias} = :value`, { value: 5 }) }\n */\nexport function Raw<T>(\n    sqlGenerator: (columnAlias: string) => string,\n    parameters: ObjectLiteral,\n): FindOperator<any>\n\nexport function Raw<T>(\n    valueOrSqlGenerator: string | ((columnAlias: string) => string),\n    sqlGeneratorParameters?: ObjectLiteral,\n): FindOperator<any> {\n    if (typeof valueOrSqlGenerator !== \"function\") {\n        return new FindOperator(\"raw\", valueOrSqlGenerator, false)\n    }\n\n    return new FindOperator(\n        \"raw\",\n        [],\n        true,\n        true,\n        valueOrSqlGenerator,\n        sqlGeneratorParameters,\n    )\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,iBAAiB;AA2B9C,OAAM,SAAUC,GAAGA,CACfC,mBAA+D,EAC/DC,sBAAsC;EAEtC,IAAI,OAAOD,mBAAmB,KAAK,UAAU,EAAE;IAC3C,OAAO,IAAIF,YAAY,CAAC,KAAK,EAAEE,mBAAmB,EAAE,KAAK,CAAC;EAC9D;EAEA,OAAO,IAAIF,YAAY,CACnB,KAAK,EACL,EAAE,EACF,IAAI,EACJ,IAAI,EACJE,mBAAmB,EACnBC,sBAAsB,CACzB;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}