{"ast":null,"code":"import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\";\nimport { PostgresQueryRunner } from \"../postgres/PostgresQueryRunner\";\nimport { QueryResult } from \"../../query-runner/QueryResult\";\nimport { TypeORMError } from \"../../error\";\nclass PostgresQueryRunnerWrapper extends PostgresQueryRunner {\n  constructor(driver, mode) {\n    super(driver, mode);\n  }\n}\n/**\n * Runs queries on a single postgres database connection.\n */\nexport class AuroraPostgresQueryRunner extends PostgresQueryRunnerWrapper {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(driver, client, mode) {\n    super(driver, mode);\n    this.client = client;\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates/uses database connection from the connection pool to perform further operations.\n   * Returns obtained database connection.\n   */\n  connect() {\n    if (this.databaseConnection) return Promise.resolve(this.databaseConnection);\n    if (this.databaseConnectionPromise) return this.databaseConnectionPromise;\n    if (this.mode === \"slave\" && this.driver.isReplicated) {\n      this.databaseConnectionPromise = this.driver.obtainSlaveConnection().then(([connection, release]) => {\n        this.driver.connectedQueryRunners.push(this);\n        this.databaseConnection = connection;\n        this.releaseCallback = release;\n        return this.databaseConnection;\n      });\n    } else {\n      // master\n      this.databaseConnectionPromise = this.driver.obtainMasterConnection().then(([connection, release]) => {\n        this.driver.connectedQueryRunners.push(this);\n        this.databaseConnection = connection;\n        this.releaseCallback = release;\n        return this.databaseConnection;\n      });\n    }\n    return this.databaseConnectionPromise;\n  }\n  /**\n   * Starts transaction on the current connection.\n   */\n  async startTransaction(isolationLevel) {\n    this.isTransactionActive = true;\n    try {\n      await this.broadcaster.broadcast(\"BeforeTransactionStart\");\n    } catch (err) {\n      this.isTransactionActive = false;\n      throw err;\n    }\n    if (this.transactionDepth === 0) {\n      this.transactionDepth += 1;\n      await this.client.startTransaction();\n    } else {\n      this.transactionDepth += 1;\n      await this.query(`SAVEPOINT typeorm_${this.transactionDepth} - 1`);\n    }\n    await this.broadcaster.broadcast(\"AfterTransactionStart\");\n  }\n  /**\n   * Commits transaction.\n   * Error will be thrown if transaction was not started.\n   */\n  async commitTransaction() {\n    if (!this.isTransactionActive) throw new TransactionNotStartedError();\n    await this.broadcaster.broadcast(\"BeforeTransactionCommit\");\n    if (this.transactionDepth > 1) {\n      this.transactionDepth -= 1;\n      await this.query(`RELEASE SAVEPOINT typeorm_${this.transactionDepth}`);\n    } else {\n      this.transactionDepth -= 1;\n      await this.client.commitTransaction();\n      this.isTransactionActive = false;\n    }\n    await this.broadcaster.broadcast(\"AfterTransactionCommit\");\n  }\n  /**\n   * Rollbacks transaction.\n   * Error will be thrown if transaction was not started.\n   */\n  async rollbackTransaction() {\n    if (!this.isTransactionActive) throw new TransactionNotStartedError();\n    await this.broadcaster.broadcast(\"BeforeTransactionRollback\");\n    if (this.transactionDepth > 1) {\n      this.transactionDepth -= 1;\n      await this.query(`ROLLBACK TO SAVEPOINT typeorm_${this.transactionDepth}`);\n    } else {\n      this.transactionDepth -= 1;\n      await this.client.rollbackTransaction();\n      this.isTransactionActive = false;\n    }\n    await this.broadcaster.broadcast(\"AfterTransactionRollback\");\n  }\n  /**\n   * Executes a given SQL query.\n   */\n  async query(query, parameters, useStructuredResult = false) {\n    if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n    const raw = await this.client.query(query, parameters);\n    const result = new QueryResult();\n    result.raw = raw;\n    if (raw?.hasOwnProperty(\"records\") && Array.isArray(raw.records)) {\n      result.records = raw.records;\n    }\n    if (raw?.hasOwnProperty(\"numberOfRecordsUpdated\")) {\n      result.affected = raw.numberOfRecordsUpdated;\n    }\n    if (!useStructuredResult) {\n      return result.raw;\n    }\n    return result;\n  }\n  /**\n   * Change table comment.\n   */\n  changeTableComment(tableOrName, comment) {\n    throw new TypeORMError(`aurora-postgres driver does not support change comment.`);\n  }\n}","map":{"version":3,"names":["QueryRunnerAlreadyReleasedError","TransactionNotStartedError","PostgresQueryRunner","QueryResult","TypeORMError","PostgresQueryRunnerWrapper","constructor","driver","mode","AuroraPostgresQueryRunner","client","connect","databaseConnection","Promise","resolve","databaseConnectionPromise","isReplicated","obtainSlaveConnection","then","connection","release","connectedQueryRunners","push","releaseCallback","obtainMasterConnection","startTransaction","isolationLevel","isTransactionActive","broadcaster","broadcast","err","transactionDepth","query","commitTransaction","rollbackTransaction","parameters","useStructuredResult","isReleased","raw","result","hasOwnProperty","Array","isArray","records","affected","numberOfRecordsUpdated","changeTableComment","tableOrName","comment"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\driver\\aurora-postgres\\AuroraPostgresQueryRunner.ts"],"sourcesContent":["import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { IsolationLevel } from \"../types/IsolationLevel\"\nimport { AuroraPostgresDriver } from \"./AuroraPostgresDriver\"\nimport { PostgresQueryRunner } from \"../postgres/PostgresQueryRunner\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { QueryResult } from \"../../query-runner/QueryResult\"\nimport { Table } from \"../../schema-builder/table/Table\"\nimport { TypeORMError } from \"../../error\"\n\nclass PostgresQueryRunnerWrapper extends PostgresQueryRunner {\n    driver: any\n\n    constructor(driver: any, mode: ReplicationMode) {\n        super(driver, mode)\n    }\n}\n\n/**\n * Runs queries on a single postgres database connection.\n */\nexport class AuroraPostgresQueryRunner\n    extends PostgresQueryRunnerWrapper\n    implements QueryRunner\n{\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: AuroraPostgresDriver\n\n    protected client: any\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Promise used to obtain a database connection for a first time.\n     */\n    protected databaseConnectionPromise: Promise<any>\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        driver: AuroraPostgresDriver,\n        client: any,\n        mode: ReplicationMode,\n    ) {\n        super(driver, mode)\n\n        this.client = client\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<any> {\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection)\n\n        if (this.databaseConnectionPromise)\n            return this.databaseConnectionPromise\n\n        if (this.mode === \"slave\" && this.driver.isReplicated) {\n            this.databaseConnectionPromise = this.driver\n                .obtainSlaveConnection()\n                .then(([connection, release]: any[]) => {\n                    this.driver.connectedQueryRunners.push(this)\n                    this.databaseConnection = connection\n                    this.releaseCallback = release\n                    return this.databaseConnection\n                })\n        } else {\n            // master\n            this.databaseConnectionPromise = this.driver\n                .obtainMasterConnection()\n                .then(([connection, release]: any[]) => {\n                    this.driver.connectedQueryRunners.push(this)\n                    this.databaseConnection = connection\n                    this.releaseCallback = release\n                    return this.databaseConnection\n                })\n        }\n\n        return this.databaseConnectionPromise\n    }\n\n    /**\n     * Starts transaction on the current connection.\n     */\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\n        this.isTransactionActive = true\n        try {\n            await this.broadcaster.broadcast(\"BeforeTransactionStart\")\n        } catch (err) {\n            this.isTransactionActive = false\n            throw err\n        }\n\n        if (this.transactionDepth === 0) {\n            this.transactionDepth += 1\n            await this.client.startTransaction()\n        } else {\n            this.transactionDepth += 1\n            await this.query(`SAVEPOINT typeorm_${this.transactionDepth} - 1`)\n        }\n\n        await this.broadcaster.broadcast(\"AfterTransactionStart\")\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\n\n        await this.broadcaster.broadcast(\"BeforeTransactionCommit\")\n\n        if (this.transactionDepth > 1) {\n            this.transactionDepth -= 1\n            await this.query(\n                `RELEASE SAVEPOINT typeorm_${this.transactionDepth}`,\n            )\n        } else {\n            this.transactionDepth -= 1\n            await this.client.commitTransaction()\n            this.isTransactionActive = false\n        }\n\n        await this.broadcaster.broadcast(\"AfterTransactionCommit\")\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\n\n        await this.broadcaster.broadcast(\"BeforeTransactionRollback\")\n\n        if (this.transactionDepth > 1) {\n            this.transactionDepth -= 1\n            await this.query(\n                `ROLLBACK TO SAVEPOINT typeorm_${this.transactionDepth}`,\n            )\n        } else {\n            this.transactionDepth -= 1\n            await this.client.rollbackTransaction()\n            this.isTransactionActive = false\n        }\n\n        await this.broadcaster.broadcast(\"AfterTransactionRollback\")\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(\n        query: string,\n        parameters?: any[],\n        useStructuredResult = false,\n    ): Promise<any> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        const raw = await this.client.query(query, parameters)\n\n        const result = new QueryResult()\n\n        result.raw = raw\n\n        if (raw?.hasOwnProperty(\"records\") && Array.isArray(raw.records)) {\n            result.records = raw.records\n        }\n\n        if (raw?.hasOwnProperty(\"numberOfRecordsUpdated\")) {\n            result.affected = raw.numberOfRecordsUpdated\n        }\n\n        if (!useStructuredResult) {\n            return result.raw\n        }\n\n        return result\n    }\n\n    /**\n     * Change table comment.\n     */\n    changeTableComment(\n        tableOrName: Table | string,\n        comment?: string,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `aurora-postgres driver does not support change comment.`,\n        )\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}