{"ast":null,"code":"import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { SqljsQueryRunner } from \"./SqljsQueryRunner\";\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\";\nimport { PlatformTools } from \"../../platform/PlatformTools\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { TypeORMError } from \"../../error\";\nexport class SqljsDriver extends AbstractSqliteDriver {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connection) {\n    super(connection);\n    // If autoSave is enabled by user, location or autoSaveCallback have to be set\n    // because either autoSave saves to location or calls autoSaveCallback.\n    if (this.options.autoSave && !this.options.location && !this.options.autoSaveCallback) {\n      throw new DriverOptionNotSetError(`location or autoSaveCallback`);\n    }\n    // load sql.js package\n    this.loadDependencies();\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Performs connection to the database.\n   */\n  async connect() {\n    this.databaseConnection = await this.createDatabaseConnection();\n  }\n  /**\n   * Closes connection with database.\n   */\n  async disconnect() {\n    this.queryRunner = undefined;\n    this.databaseConnection.close();\n  }\n  /**\n   * Creates a query runner used to execute database queries.\n   */\n  createQueryRunner(mode) {\n    if (!this.queryRunner) this.queryRunner = new SqljsQueryRunner(this);\n    return this.queryRunner;\n  }\n  /**\n   * Loads a database from a given file (Node.js), local storage key (browser) or array.\n   * This will delete the current database!\n   */\n  async load(fileNameOrLocalStorageOrData, checkIfFileOrLocalStorageExists = true) {\n    if (typeof fileNameOrLocalStorageOrData === \"string\") {\n      // content has to be loaded\n      if (PlatformTools.type === \"node\") {\n        // Node.js\n        // fileNameOrLocalStorageOrData should be a path to the file\n        if (PlatformTools.fileExist(fileNameOrLocalStorageOrData)) {\n          const database = PlatformTools.readFileSync(fileNameOrLocalStorageOrData);\n          return this.createDatabaseConnectionWithImport(database);\n        } else if (checkIfFileOrLocalStorageExists) {\n          throw new TypeORMError(`File ${fileNameOrLocalStorageOrData} does not exist`);\n        } else {\n          // File doesn't exist and checkIfFileOrLocalStorageExists is set to false.\n          // Therefore open a database without importing an existing file.\n          // File will be written on first write operation.\n          return this.createDatabaseConnectionWithImport();\n        }\n      } else {\n        // browser\n        // fileNameOrLocalStorageOrData should be a local storage / indexedDB key\n        let localStorageContent = null;\n        if (this.options.useLocalForage) {\n          if (window.localforage) {\n            localStorageContent = await window.localforage.getItem(fileNameOrLocalStorageOrData);\n          } else {\n            throw new TypeORMError(`localforage is not defined - please import localforage.js into your site`);\n          }\n        } else {\n          localStorageContent = PlatformTools.getGlobalVariable().localStorage.getItem(fileNameOrLocalStorageOrData);\n        }\n        if (localStorageContent != null) {\n          // localStorage value exists.\n          return this.createDatabaseConnectionWithImport(JSON.parse(localStorageContent));\n        } else if (checkIfFileOrLocalStorageExists) {\n          throw new TypeORMError(`File ${fileNameOrLocalStorageOrData} does not exist`);\n        } else {\n          // localStorage value doesn't exist and checkIfFileOrLocalStorageExists is set to false.\n          // Therefore open a database without importing anything.\n          // localStorage value will be written on first write operation.\n          return this.createDatabaseConnectionWithImport();\n        }\n      }\n    } else {\n      return this.createDatabaseConnectionWithImport(fileNameOrLocalStorageOrData);\n    }\n  }\n  /**\n   * Saved the current database to the given file (Node.js), local storage key (browser) or\n   * indexedDB key (browser with enabled useLocalForage option).\n   * If no location path is given, the location path in the options (if specified) will be used.\n   */\n  async save(location) {\n    if (!location && !this.options.location) {\n      throw new TypeORMError(`No location is set, specify a location parameter or add the location option to your configuration`);\n    }\n    let path = \"\";\n    if (location) {\n      path = location;\n    } else if (this.options.location) {\n      path = this.options.location;\n    }\n    if (PlatformTools.type === \"node\") {\n      try {\n        const content = Buffer.from(this.databaseConnection.export());\n        await PlatformTools.writeFile(path, content);\n      } catch (e) {\n        throw new TypeORMError(`Could not save database, error: ${e}`);\n      }\n    } else {\n      const database = this.databaseConnection.export();\n      // convert Uint8Array to number array to improve local-storage storage\n      const databaseArray = [].slice.call(database);\n      if (this.options.useLocalForage) {\n        if (window.localforage) {\n          await window.localforage.setItem(path, JSON.stringify(databaseArray));\n        } else {\n          throw new TypeORMError(`localforage is not defined - please import localforage.js into your site`);\n        }\n      } else {\n        PlatformTools.getGlobalVariable().localStorage.setItem(path, JSON.stringify(databaseArray));\n      }\n    }\n  }\n  /**\n   * This gets called by the QueryRunner when a change to the database is made.\n   * If a custom autoSaveCallback is specified, it get's called with the database as Uint8Array,\n   * otherwise the save method is called which saves it to file (Node.js), local storage (browser)\n   * or indexedDB (browser with enabled useLocalForage option).\n   * Don't auto-save when in transaction as the call to export will end the current transaction\n   */\n  async autoSave() {\n    if (this.options.autoSave && !this.queryRunner?.isTransactionActive) {\n      if (this.options.autoSaveCallback) {\n        await this.options.autoSaveCallback(this.export());\n      } else {\n        await this.save();\n      }\n    }\n  }\n  /**\n   * Returns the current database as Uint8Array.\n   */\n  export() {\n    return this.databaseConnection.export();\n  }\n  /**\n   * Creates generated map of values generated or returned by database after INSERT query.\n   */\n  createGeneratedMap(metadata, insertResult) {\n    const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {\n      // seems to be the only way to get the inserted id, see https://github.com/kripken/sql.js/issues/77\n      if (generatedColumn.isPrimary && generatedColumn.generationStrategy === \"increment\") {\n        const query = \"SELECT last_insert_rowid()\";\n        try {\n          let result = this.databaseConnection.exec(query);\n          this.connection.logger.logQuery(query);\n          return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(result[0].values[0][0]));\n        } catch (e) {\n          this.connection.logger.logQueryError(e, query, []);\n        }\n      }\n      return map;\n    }, {});\n    return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates connection with the database.\n   * If the location option is set, the database is loaded first.\n   */\n  createDatabaseConnection() {\n    if (this.options.location) {\n      return this.load(this.options.location, false);\n    }\n    return this.createDatabaseConnectionWithImport(this.options.database);\n  }\n  /**\n   * Creates connection with an optional database.\n   * If database is specified it is loaded, otherwise a new empty database is created.\n   */\n  async createDatabaseConnectionWithImport(database) {\n    // sql.js < 1.0 exposes an object with a `Database` method.\n    const isLegacyVersion = typeof this.sqlite.Database === \"function\";\n    const sqlite = isLegacyVersion ? this.sqlite : await this.sqlite(this.options.sqlJsConfig);\n    if (database && database.length > 0) {\n      this.databaseConnection = new sqlite.Database(database);\n    } else {\n      this.databaseConnection = new sqlite.Database();\n    }\n    this.databaseConnection.exec(`PRAGMA foreign_keys = ON`);\n    return this.databaseConnection;\n  }\n  /**\n   * If driver dependency is not given explicitly, then try to load it via \"require\".\n   */\n  loadDependencies() {\n    if (PlatformTools.type === \"browser\") {\n      const sqlite = this.options.driver || window.SQL;\n      this.sqlite = sqlite;\n    } else {\n      try {\n        const sqlite = this.options.driver || PlatformTools.load(\"sql.js\");\n        this.sqlite = sqlite;\n      } catch (e) {\n        throw new DriverPackageNotInstalledError(\"sql.js\", \"sql.js\");\n      }\n    }\n  }\n}","map":{"version":3,"names":["AbstractSqliteDriver","SqljsQueryRunner","DriverPackageNotInstalledError","DriverOptionNotSetError","PlatformTools","OrmUtils","TypeORMError","SqljsDriver","constructor","connection","options","autoSave","location","autoSaveCallback","loadDependencies","connect","databaseConnection","createDatabaseConnection","disconnect","queryRunner","undefined","close","createQueryRunner","mode","load","fileNameOrLocalStorageOrData","checkIfFileOrLocalStorageExists","type","fileExist","database","readFileSync","createDatabaseConnectionWithImport","localStorageContent","useLocalForage","window","localforage","getItem","getGlobalVariable","localStorage","JSON","parse","save","path","content","Buffer","from","export","writeFile","e","databaseArray","slice","call","setItem","stringify","isTransactionActive","createGeneratedMap","metadata","insertResult","generatedMap","generatedColumns","reduce","map","generatedColumn","isPrimary","generationStrategy","query","result","exec","logger","logQuery","mergeDeep","createValueMap","values","logQueryError","Object","keys","length","isLegacyVersion","sqlite","Database","sqlJsConfig","driver","SQL"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\driver\\sqljs\\SqljsDriver.ts"],"sourcesContent":["import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\"\nimport { SqljsConnectionOptions } from \"./SqljsConnectionOptions\"\nimport { SqljsQueryRunner } from \"./SqljsQueryRunner\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { DataSource } from \"../../data-source/DataSource\"\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\"\nimport { PlatformTools } from \"../../platform/PlatformTools\"\nimport { EntityMetadata } from \"../../metadata/EntityMetadata\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { TypeORMError } from \"../../error\"\n\n// This is needed to satisfy the typescript compiler.\ninterface Window {\n    SQL: any\n    localforage: any\n}\ndeclare let window: Window\n\nexport class SqljsDriver extends AbstractSqliteDriver {\n    // The driver specific options.\n    options: SqljsConnectionOptions\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        super(connection)\n\n        // If autoSave is enabled by user, location or autoSaveCallback have to be set\n        // because either autoSave saves to location or calls autoSaveCallback.\n        if (\n            this.options.autoSave &&\n            !this.options.location &&\n            !this.options.autoSaveCallback\n        ) {\n            throw new DriverOptionNotSetError(`location or autoSaveCallback`)\n        }\n\n        // load sql.js package\n        this.loadDependencies()\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    async connect(): Promise<void> {\n        this.databaseConnection = await this.createDatabaseConnection()\n    }\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        this.queryRunner = undefined\n        this.databaseConnection.close()\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner) this.queryRunner = new SqljsQueryRunner(this)\n\n        return this.queryRunner\n    }\n\n    /**\n     * Loads a database from a given file (Node.js), local storage key (browser) or array.\n     * This will delete the current database!\n     */\n    async load(\n        fileNameOrLocalStorageOrData: string | Uint8Array,\n        checkIfFileOrLocalStorageExists: boolean = true,\n    ): Promise<any> {\n        if (typeof fileNameOrLocalStorageOrData === \"string\") {\n            // content has to be loaded\n            if (PlatformTools.type === \"node\") {\n                // Node.js\n                // fileNameOrLocalStorageOrData should be a path to the file\n                if (PlatformTools.fileExist(fileNameOrLocalStorageOrData)) {\n                    const database = PlatformTools.readFileSync(\n                        fileNameOrLocalStorageOrData,\n                    )\n                    return this.createDatabaseConnectionWithImport(database)\n                } else if (checkIfFileOrLocalStorageExists) {\n                    throw new TypeORMError(\n                        `File ${fileNameOrLocalStorageOrData} does not exist`,\n                    )\n                } else {\n                    // File doesn't exist and checkIfFileOrLocalStorageExists is set to false.\n                    // Therefore open a database without importing an existing file.\n                    // File will be written on first write operation.\n                    return this.createDatabaseConnectionWithImport()\n                }\n            } else {\n                // browser\n                // fileNameOrLocalStorageOrData should be a local storage / indexedDB key\n                let localStorageContent = null\n                if (this.options.useLocalForage) {\n                    if (window.localforage) {\n                        localStorageContent = await window.localforage.getItem(\n                            fileNameOrLocalStorageOrData,\n                        )\n                    } else {\n                        throw new TypeORMError(\n                            `localforage is not defined - please import localforage.js into your site`,\n                        )\n                    }\n                } else {\n                    localStorageContent =\n                        PlatformTools.getGlobalVariable().localStorage.getItem(\n                            fileNameOrLocalStorageOrData,\n                        )\n                }\n\n                if (localStorageContent != null) {\n                    // localStorage value exists.\n                    return this.createDatabaseConnectionWithImport(\n                        JSON.parse(localStorageContent),\n                    )\n                } else if (checkIfFileOrLocalStorageExists) {\n                    throw new TypeORMError(\n                        `File ${fileNameOrLocalStorageOrData} does not exist`,\n                    )\n                } else {\n                    // localStorage value doesn't exist and checkIfFileOrLocalStorageExists is set to false.\n                    // Therefore open a database without importing anything.\n                    // localStorage value will be written on first write operation.\n                    return this.createDatabaseConnectionWithImport()\n                }\n            }\n        } else {\n            return this.createDatabaseConnectionWithImport(\n                fileNameOrLocalStorageOrData,\n            )\n        }\n    }\n\n    /**\n     * Saved the current database to the given file (Node.js), local storage key (browser) or\n     * indexedDB key (browser with enabled useLocalForage option).\n     * If no location path is given, the location path in the options (if specified) will be used.\n     */\n    async save(location?: string) {\n        if (!location && !this.options.location) {\n            throw new TypeORMError(\n                `No location is set, specify a location parameter or add the location option to your configuration`,\n            )\n        }\n\n        let path = \"\"\n        if (location) {\n            path = location\n        } else if (this.options.location) {\n            path = this.options.location\n        }\n\n        if (PlatformTools.type === \"node\") {\n            try {\n                const content = Buffer.from(this.databaseConnection.export())\n                await PlatformTools.writeFile(path, content)\n            } catch (e) {\n                throw new TypeORMError(`Could not save database, error: ${e}`)\n            }\n        } else {\n            const database: Uint8Array = this.databaseConnection.export()\n            // convert Uint8Array to number array to improve local-storage storage\n            const databaseArray = [].slice.call(database)\n            if (this.options.useLocalForage) {\n                if (window.localforage) {\n                    await window.localforage.setItem(\n                        path,\n                        JSON.stringify(databaseArray),\n                    )\n                } else {\n                    throw new TypeORMError(\n                        `localforage is not defined - please import localforage.js into your site`,\n                    )\n                }\n            } else {\n                PlatformTools.getGlobalVariable().localStorage.setItem(\n                    path,\n                    JSON.stringify(databaseArray),\n                )\n            }\n        }\n    }\n\n    /**\n     * This gets called by the QueryRunner when a change to the database is made.\n     * If a custom autoSaveCallback is specified, it get's called with the database as Uint8Array,\n     * otherwise the save method is called which saves it to file (Node.js), local storage (browser)\n     * or indexedDB (browser with enabled useLocalForage option).\n     * Don't auto-save when in transaction as the call to export will end the current transaction\n     */\n    async autoSave() {\n        if (this.options.autoSave && !this.queryRunner?.isTransactionActive) {\n            if (this.options.autoSaveCallback) {\n                await this.options.autoSaveCallback(this.export())\n            } else {\n                await this.save()\n            }\n        }\n    }\n\n    /**\n     * Returns the current database as Uint8Array.\n     */\n    export(): Uint8Array {\n        return this.databaseConnection.export()\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata: EntityMetadata, insertResult: any) {\n        const generatedMap = metadata.generatedColumns.reduce(\n            (map, generatedColumn) => {\n                // seems to be the only way to get the inserted id, see https://github.com/kripken/sql.js/issues/77\n                if (\n                    generatedColumn.isPrimary &&\n                    generatedColumn.generationStrategy === \"increment\"\n                ) {\n                    const query = \"SELECT last_insert_rowid()\"\n                    try {\n                        let result = this.databaseConnection.exec(query)\n                        this.connection.logger.logQuery(query)\n                        return OrmUtils.mergeDeep(\n                            map,\n                            generatedColumn.createValueMap(\n                                result[0].values[0][0],\n                            ),\n                        )\n                    } catch (e) {\n                        this.connection.logger.logQueryError(e, query, [])\n                    }\n                }\n\n                return map\n            },\n            {} as ObjectLiteral,\n        )\n\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     * If the location option is set, the database is loaded first.\n     */\n    protected createDatabaseConnection(): Promise<any> {\n        if (this.options.location) {\n            return this.load(this.options.location, false)\n        }\n\n        return this.createDatabaseConnectionWithImport(this.options.database)\n    }\n\n    /**\n     * Creates connection with an optional database.\n     * If database is specified it is loaded, otherwise a new empty database is created.\n     */\n    protected async createDatabaseConnectionWithImport(\n        database?: Uint8Array,\n    ): Promise<any> {\n        // sql.js < 1.0 exposes an object with a `Database` method.\n        const isLegacyVersion = typeof this.sqlite.Database === \"function\"\n        const sqlite = isLegacyVersion\n            ? this.sqlite\n            : await this.sqlite(this.options.sqlJsConfig)\n        if (database && database.length > 0) {\n            this.databaseConnection = new sqlite.Database(database)\n        } else {\n            this.databaseConnection = new sqlite.Database()\n        }\n\n        this.databaseConnection.exec(`PRAGMA foreign_keys = ON`)\n\n        return this.databaseConnection\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        if (PlatformTools.type === \"browser\") {\n            const sqlite = this.options.driver || window.SQL\n            this.sqlite = sqlite\n        } else {\n            try {\n                const sqlite =\n                    this.options.driver || PlatformTools.load(\"sql.js\")\n                this.sqlite = sqlite\n            } catch (e) {\n                throw new DriverPackageNotInstalledError(\"sql.js\", \"sql.js\")\n            }\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}