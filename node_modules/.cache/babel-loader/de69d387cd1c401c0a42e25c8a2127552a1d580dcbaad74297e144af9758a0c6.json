{"ast":null,"code":"import { DataSource } from \"../data-source/DataSource\";\nimport { ConnectionNotFoundError } from \"../error/ConnectionNotFoundError\";\nimport { AlreadyHasActiveConnectionError } from \"../error/AlreadyHasActiveConnectionError\";\n/**\n * ConnectionManager is used to store and manage multiple orm connections.\n * It also provides useful factory methods to simplify connection creation.\n *\n * @deprecated\n */\nexport class ConnectionManager {\n  constructor() {\n    /**\n     * Internal lookup to quickly get from a connection name to the Connection object.\n     */\n    this.connectionMap = new Map();\n  }\n  /**\n   * List of connections registered in this connection manager.\n   */\n  get connections() {\n    return Array.from(this.connectionMap.values());\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Checks if connection with the given name exist in the manager.\n   */\n  has(name) {\n    return this.connectionMap.has(name);\n  }\n  /**\n   * Gets registered connection with the given name.\n   * If connection name is not given then it will get a default connection.\n   * Throws error if connection with the given name was not found.\n   */\n  get(name = \"default\") {\n    const connection = this.connectionMap.get(name);\n    if (!connection) throw new ConnectionNotFoundError(name);\n    return connection;\n  }\n  /**\n   * Creates a new connection based on the given connection options and registers it in the manager.\n   * Connection won't be established, you'll need to manually call connect method to establish connection.\n   */\n  create(options) {\n    // check if such connection is already registered\n    const existConnection = this.connectionMap.get(options.name || \"default\");\n    if (existConnection) {\n      // if connection is registered and its not closed then throw an error\n      if (existConnection.isInitialized) throw new AlreadyHasActiveConnectionError(options.name || \"default\");\n    }\n    // create a new connection\n    const connection = new DataSource(options);\n    this.connectionMap.set(connection.name, connection);\n    return connection;\n  }\n}","map":{"version":3,"names":["DataSource","ConnectionNotFoundError","AlreadyHasActiveConnectionError","ConnectionManager","constructor","connectionMap","Map","connections","Array","from","values","has","name","get","connection","create","options","existConnection","isInitialized","set"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\connection\\ConnectionManager.ts"],"sourcesContent":["import { DataSource } from \"../data-source/DataSource\"\nimport { ConnectionNotFoundError } from \"../error/ConnectionNotFoundError\"\nimport { DataSourceOptions } from \"../data-source/DataSourceOptions\"\nimport { AlreadyHasActiveConnectionError } from \"../error/AlreadyHasActiveConnectionError\"\n\n/**\n * ConnectionManager is used to store and manage multiple orm connections.\n * It also provides useful factory methods to simplify connection creation.\n *\n * @deprecated\n */\nexport class ConnectionManager {\n    /**\n     * List of connections registered in this connection manager.\n     */\n    get connections(): DataSource[] {\n        return Array.from(this.connectionMap.values())\n    }\n\n    /**\n     * Internal lookup to quickly get from a connection name to the Connection object.\n     */\n    private readonly connectionMap: Map<string, DataSource> = new Map()\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if connection with the given name exist in the manager.\n     */\n    has(name: string): boolean {\n        return this.connectionMap.has(name)\n    }\n\n    /**\n     * Gets registered connection with the given name.\n     * If connection name is not given then it will get a default connection.\n     * Throws error if connection with the given name was not found.\n     */\n    get(name: string = \"default\"): DataSource {\n        const connection = this.connectionMap.get(name)\n        if (!connection) throw new ConnectionNotFoundError(name)\n\n        return connection\n    }\n\n    /**\n     * Creates a new connection based on the given connection options and registers it in the manager.\n     * Connection won't be established, you'll need to manually call connect method to establish connection.\n     */\n    create(options: DataSourceOptions): DataSource {\n        // check if such connection is already registered\n        const existConnection = this.connectionMap.get(\n            options.name || \"default\",\n        )\n        if (existConnection) {\n            // if connection is registered and its not closed then throw an error\n            if (existConnection.isInitialized)\n                throw new AlreadyHasActiveConnectionError(\n                    options.name || \"default\",\n                )\n        }\n\n        // create a new connection\n        const connection = new DataSource(options)\n        this.connectionMap.set(connection.name, connection)\n        return connection\n    }\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,2BAA2B;AACtD,SAASC,uBAAuB,QAAQ,kCAAkC;AAE1E,SAASC,+BAA+B,QAAQ,0CAA0C;AAE1F;;;;;;AAMA,OAAM,MAAOC,iBAAiB;EAA9BC,YAAA;IAQI;;;IAGiB,KAAAC,aAAa,GAA4B,IAAIC,GAAG,EAAE;EA+CvE;EAzDI;;;EAGA,IAAIC,WAAWA,CAAA;IACX,OAAOC,KAAK,CAACC,IAAI,CAAC,IAAI,CAACJ,aAAa,CAACK,MAAM,EAAE,CAAC;EAClD;EAOA;EACA;EACA;EAEA;;;EAGAC,GAAGA,CAACC,IAAY;IACZ,OAAO,IAAI,CAACP,aAAa,CAACM,GAAG,CAACC,IAAI,CAAC;EACvC;EAEA;;;;;EAKAC,GAAGA,CAACD,IAAA,GAAe,SAAS;IACxB,MAAME,UAAU,GAAG,IAAI,CAACT,aAAa,CAACQ,GAAG,CAACD,IAAI,CAAC;IAC/C,IAAI,CAACE,UAAU,EAAE,MAAM,IAAIb,uBAAuB,CAACW,IAAI,CAAC;IAExD,OAAOE,UAAU;EACrB;EAEA;;;;EAIAC,MAAMA,CAACC,OAA0B;IAC7B;IACA,MAAMC,eAAe,GAAG,IAAI,CAACZ,aAAa,CAACQ,GAAG,CAC1CG,OAAO,CAACJ,IAAI,IAAI,SAAS,CAC5B;IACD,IAAIK,eAAe,EAAE;MACjB;MACA,IAAIA,eAAe,CAACC,aAAa,EAC7B,MAAM,IAAIhB,+BAA+B,CACrCc,OAAO,CAACJ,IAAI,IAAI,SAAS,CAC5B;IACT;IAEA;IACA,MAAME,UAAU,GAAG,IAAId,UAAU,CAACgB,OAAO,CAAC;IAC1C,IAAI,CAACX,aAAa,CAACc,GAAG,CAACL,UAAU,CAACF,IAAI,EAAEE,UAAU,CAAC;IACnD,OAAOA,UAAU;EACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}