{"ast":null,"code":"import { RedisQueryResultCache } from \"./RedisQueryResultCache\";\nimport { DbQueryResultCache } from \"./DbQueryResultCache\";\nimport { TypeORMError } from \"../error/TypeORMError\";\n/**\n * Caches query result into Redis database.\n */\nexport class QueryResultCacheFactory {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connection) {\n    this.connection = connection;\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates a new query result cache based on connection options.\n   */\n  create() {\n    if (!this.connection.options.cache) throw new TypeORMError(`To use cache you need to enable it in connection options by setting cache: true or providing some caching options. Example: { host: ..., username: ..., cache: true }`);\n    const cache = this.connection.options.cache;\n    if (cache.provider && typeof cache.provider === \"function\") {\n      return cache.provider(this.connection);\n    }\n    if (cache.type === \"redis\" || cache.type === \"ioredis\" || cache.type === \"ioredis/cluster\") {\n      return new RedisQueryResultCache(this.connection, cache.type);\n    } else {\n      return new DbQueryResultCache(this.connection);\n    }\n  }\n}","map":{"version":3,"names":["RedisQueryResultCache","DbQueryResultCache","TypeORMError","QueryResultCacheFactory","constructor","connection","create","options","cache","provider","type"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\cache\\QueryResultCacheFactory.ts"],"sourcesContent":["import { RedisQueryResultCache } from \"./RedisQueryResultCache\"\nimport { DbQueryResultCache } from \"./DbQueryResultCache\"\nimport { QueryResultCache } from \"./QueryResultCache\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { TypeORMError } from \"../error/TypeORMError\"\n\n/**\n * Caches query result into Redis database.\n */\nexport class QueryResultCacheFactory {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: DataSource) {}\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new query result cache based on connection options.\n     */\n    create(): QueryResultCache {\n        if (!this.connection.options.cache)\n            throw new TypeORMError(\n                `To use cache you need to enable it in connection options by setting cache: true or providing some caching options. Example: { host: ..., username: ..., cache: true }`,\n            )\n\n        const cache: any = this.connection.options.cache\n\n        if (cache.provider && typeof cache.provider === \"function\") {\n            return cache.provider(this.connection)\n        }\n\n        if (\n            cache.type === \"redis\" ||\n            cache.type === \"ioredis\" ||\n            cache.type === \"ioredis/cluster\"\n        ) {\n            return new RedisQueryResultCache(this.connection, cache.type)\n        } else {\n            return new DbQueryResultCache(this.connection)\n        }\n    }\n}\n"],"mappings":"AAAA,SAASA,qBAAqB,QAAQ,yBAAyB;AAC/D,SAASC,kBAAkB,QAAQ,sBAAsB;AAGzD,SAASC,YAAY,QAAQ,uBAAuB;AAEpD;;;AAGA,OAAM,MAAOC,uBAAuB;EAChC;EACA;EACA;EAEAC,YAAsBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;EAAe;EAE/C;EACA;EACA;EAEA;;;EAGAC,MAAMA,CAAA;IACF,IAAI,CAAC,IAAI,CAACD,UAAU,CAACE,OAAO,CAACC,KAAK,EAC9B,MAAM,IAAIN,YAAY,CAClB,uKAAuK,CAC1K;IAEL,MAAMM,KAAK,GAAQ,IAAI,CAACH,UAAU,CAACE,OAAO,CAACC,KAAK;IAEhD,IAAIA,KAAK,CAACC,QAAQ,IAAI,OAAOD,KAAK,CAACC,QAAQ,KAAK,UAAU,EAAE;MACxD,OAAOD,KAAK,CAACC,QAAQ,CAAC,IAAI,CAACJ,UAAU,CAAC;IAC1C;IAEA,IACIG,KAAK,CAACE,IAAI,KAAK,OAAO,IACtBF,KAAK,CAACE,IAAI,KAAK,SAAS,IACxBF,KAAK,CAACE,IAAI,KAAK,iBAAiB,EAClC;MACE,OAAO,IAAIV,qBAAqB,CAAC,IAAI,CAACK,UAAU,EAAEG,KAAK,CAACE,IAAI,CAAC;IACjE,CAAC,MAAM;MACH,OAAO,IAAIT,kBAAkB,CAAC,IAAI,CAACI,UAAU,CAAC;IAClD;EACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}