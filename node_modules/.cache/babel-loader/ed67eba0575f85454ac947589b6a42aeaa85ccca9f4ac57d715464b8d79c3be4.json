{"ast":null,"code":"/**\n * This metadata contains all information about entity's listeners.\n */\nexport class EntityListenerMetadata {\n  // ---------------------------------------------------------------------\n  // Constructor\n  // ---------------------------------------------------------------------\n  constructor(options) {\n    this.entityMetadata = options.entityMetadata;\n    this.embeddedMetadata = options.embeddedMetadata;\n    this.target = options.args.target;\n    this.propertyName = options.args.propertyName;\n    this.type = options.args.type;\n  }\n  // ---------------------------------------------------------------------\n  // Public Methods\n  // ---------------------------------------------------------------------\n  /**\n   * Checks if entity listener is allowed to be executed on the given entity.\n   */\n  isAllowed(entity) {\n    // todo: create in entity metadata method like isInherited?\n    return this.entityMetadata.target === entity.constructor ||\n    // todo: .constructor won't work for entity schemas, but there are no entity listeners in schemas since there are no objects, right?\n    typeof this.entityMetadata.target === \"function\" && entity.constructor.prototype instanceof this.entityMetadata.target; // todo: also need to implement entity schema inheritance\n  }\n  /**\n   * Executes listener method of the given entity.\n   */\n  execute(entity) {\n    if (!this.embeddedMetadata) return entity[this.propertyName]();\n    this.callEntityEmbeddedMethod(entity, this.embeddedMetadata.propertyPath.split(\".\"));\n  }\n  // ---------------------------------------------------------------------\n  // Protected Methods\n  // ---------------------------------------------------------------------\n  /**\n   * Calls embedded entity listener method no matter how nested it is.\n   */\n  callEntityEmbeddedMethod(entity, propertyPaths) {\n    const propertyPath = propertyPaths.shift();\n    if (!propertyPath || !entity[propertyPath]) return;\n    if (propertyPaths.length === 0) {\n      if (Array.isArray(entity[propertyPath])) {\n        entity[propertyPath].map(embedded => embedded[this.propertyName]());\n      } else {\n        entity[propertyPath][this.propertyName]();\n      }\n    } else {\n      if (entity[propertyPath]) this.callEntityEmbeddedMethod(entity[propertyPath], propertyPaths);\n    }\n  }\n}","map":{"version":3,"names":["EntityListenerMetadata","constructor","options","entityMetadata","embeddedMetadata","target","args","propertyName","type","isAllowed","entity","prototype","execute","callEntityEmbeddedMethod","propertyPath","split","propertyPaths","shift","length","Array","isArray","map","embedded"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\metadata\\EntityListenerMetadata.ts"],"sourcesContent":["import { EventListenerType } from \"./types/EventListenerTypes\"\nimport { EntityListenerMetadataArgs } from \"../metadata-args/EntityListenerMetadataArgs\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { EntityMetadata } from \"./EntityMetadata\"\nimport { EmbeddedMetadata } from \"./EmbeddedMetadata\"\n\n/**\n * This metadata contains all information about entity's listeners.\n */\nexport class EntityListenerMetadata {\n    // ---------------------------------------------------------------------\n    // Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the listener.\n     */\n    entityMetadata: EntityMetadata\n\n    /**\n     * Embedded metadata of the listener, in the case if listener is in embedded.\n     */\n    embeddedMetadata?: EmbeddedMetadata\n\n    /**\n     * Target class to which metadata is applied.\n     * This can be different then entityMetadata.target in the case if listener is in the embedded.\n     */\n    target: Function | string\n\n    /**\n     * Target's property name to which this metadata is applied.\n     */\n    propertyName: string\n\n    /**\n     * The type of the listener.\n     */\n    type: EventListenerType\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata\n        embeddedMetadata?: EmbeddedMetadata\n        args: EntityListenerMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata\n        this.embeddedMetadata = options.embeddedMetadata\n        this.target = options.args.target\n        this.propertyName = options.args.propertyName\n        this.type = options.args.type\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Checks if entity listener is allowed to be executed on the given entity.\n     */\n    isAllowed(entity: ObjectLiteral) {\n        // todo: create in entity metadata method like isInherited?\n        return (\n            this.entityMetadata.target === entity.constructor || // todo: .constructor won't work for entity schemas, but there are no entity listeners in schemas since there are no objects, right?\n            (typeof this.entityMetadata.target === \"function\" &&\n                entity.constructor.prototype instanceof\n                    this.entityMetadata.target)\n        ) // todo: also need to implement entity schema inheritance\n    }\n\n    /**\n     * Executes listener method of the given entity.\n     */\n    execute(entity: ObjectLiteral) {\n        if (!this.embeddedMetadata) return entity[this.propertyName]()\n\n        this.callEntityEmbeddedMethod(\n            entity,\n            this.embeddedMetadata.propertyPath.split(\".\"),\n        )\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Calls embedded entity listener method no matter how nested it is.\n     */\n    protected callEntityEmbeddedMethod(\n        entity: ObjectLiteral,\n        propertyPaths: string[],\n    ): void {\n        const propertyPath = propertyPaths.shift()\n        if (!propertyPath || !entity[propertyPath]) return\n\n        if (propertyPaths.length === 0) {\n            if (Array.isArray(entity[propertyPath])) {\n                entity[propertyPath].map((embedded: ObjectLiteral) =>\n                    embedded[this.propertyName](),\n                )\n            } else {\n                entity[propertyPath][this.propertyName]()\n            }\n        } else {\n            if (entity[propertyPath])\n                this.callEntityEmbeddedMethod(\n                    entity[propertyPath],\n                    propertyPaths,\n                )\n        }\n    }\n}\n"],"mappings":"AAMA;;;AAGA,OAAM,MAAOA,sBAAsB;EA+B/B;EACA;EACA;EAEAC,YAAYC,OAIX;IACG,IAAI,CAACC,cAAc,GAAGD,OAAO,CAACC,cAAc;IAC5C,IAAI,CAACC,gBAAgB,GAAGF,OAAO,CAACE,gBAAgB;IAChD,IAAI,CAACC,MAAM,GAAGH,OAAO,CAACI,IAAI,CAACD,MAAM;IACjC,IAAI,CAACE,YAAY,GAAGL,OAAO,CAACI,IAAI,CAACC,YAAY;IAC7C,IAAI,CAACC,IAAI,GAAGN,OAAO,CAACI,IAAI,CAACE,IAAI;EACjC;EAEA;EACA;EACA;EAEA;;;EAGAC,SAASA,CAACC,MAAqB;IAC3B;IACA,OACI,IAAI,CAACP,cAAc,CAACE,MAAM,KAAKK,MAAM,CAACT,WAAW;IAAI;IACpD,OAAO,IAAI,CAACE,cAAc,CAACE,MAAM,KAAK,UAAU,IAC7CK,MAAM,CAACT,WAAW,CAACU,SAAS,YACxB,IAAI,CAACR,cAAc,CAACE,MAAO,CACtC,CAAC;EACN;EAEA;;;EAGAO,OAAOA,CAACF,MAAqB;IACzB,IAAI,CAAC,IAAI,CAACN,gBAAgB,EAAE,OAAOM,MAAM,CAAC,IAAI,CAACH,YAAY,CAAC,EAAE;IAE9D,IAAI,CAACM,wBAAwB,CACzBH,MAAM,EACN,IAAI,CAACN,gBAAgB,CAACU,YAAY,CAACC,KAAK,CAAC,GAAG,CAAC,CAChD;EACL;EAEA;EACA;EACA;EAEA;;;EAGUF,wBAAwBA,CAC9BH,MAAqB,EACrBM,aAAuB;IAEvB,MAAMF,YAAY,GAAGE,aAAa,CAACC,KAAK,EAAE;IAC1C,IAAI,CAACH,YAAY,IAAI,CAACJ,MAAM,CAACI,YAAY,CAAC,EAAE;IAE5C,IAAIE,aAAa,CAACE,MAAM,KAAK,CAAC,EAAE;MAC5B,IAAIC,KAAK,CAACC,OAAO,CAACV,MAAM,CAACI,YAAY,CAAC,CAAC,EAAE;QACrCJ,MAAM,CAACI,YAAY,CAAC,CAACO,GAAG,CAAEC,QAAuB,IAC7CA,QAAQ,CAAC,IAAI,CAACf,YAAY,CAAC,EAAE,CAChC;MACL,CAAC,MAAM;QACHG,MAAM,CAACI,YAAY,CAAC,CAAC,IAAI,CAACP,YAAY,CAAC,EAAE;MAC7C;IACJ,CAAC,MAAM;MACH,IAAIG,MAAM,CAACI,YAAY,CAAC,EACpB,IAAI,CAACD,wBAAwB,CACzBH,MAAM,CAACI,YAAY,CAAC,EACpBE,aAAa,CAChB;IACT;EACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}