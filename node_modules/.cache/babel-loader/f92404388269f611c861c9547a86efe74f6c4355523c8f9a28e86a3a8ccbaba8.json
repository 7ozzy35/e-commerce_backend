{"ast":null,"code":"/**\n */\nclass LoadMapItem {\n  constructor(plainEntity, metadata, parentLoadMapItem, relation) {\n    this.plainEntity = plainEntity;\n    this.metadata = metadata;\n    this.parentLoadMapItem = parentLoadMapItem;\n    this.relation = relation;\n  }\n  get target() {\n    return this.metadata.target;\n  }\n  get id() {\n    return this.metadata.getEntityIdMixedMap(this.plainEntity);\n  }\n}\nclass LoadMap {\n  constructor() {\n    this.loadMapItems = [];\n  }\n  get mainLoadMapItem() {\n    return this.loadMapItems.find(item => !item.relation && !item.parentLoadMapItem);\n  }\n  addLoadMap(newLoadMap) {\n    const item = this.loadMapItems.find(item => item.target === newLoadMap.target && item.id === newLoadMap.id);\n    if (!item) this.loadMapItems.push(newLoadMap);\n  }\n  fillEntities(target, entities) {\n    entities.forEach(entity => {\n      const item = this.loadMapItems.find(loadMapItem => {\n        return loadMapItem.target === target && loadMapItem.metadata.compareEntities(entity, loadMapItem.plainEntity);\n      });\n      if (item) item.entity = entity;\n    });\n  }\n  groupByTargetIds() {\n    const groups = [];\n    this.loadMapItems.forEach(loadMapItem => {\n      let group = groups.find(group => group.target === loadMapItem.target);\n      if (!group) {\n        group = {\n          target: loadMapItem.target,\n          ids: []\n        };\n        groups.push(group);\n      }\n      group.ids.push(loadMapItem.id);\n    });\n    return groups;\n  }\n}\n/**\n * Transforms plain old javascript object\n * Entity is constructed based on its entity metadata.\n */\nexport class PlainObjectToDatabaseEntityTransformer {\n  constructor(manager) {\n    this.manager = manager;\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  async transform(plainObject, metadata) {\n    // if plain object does not have id then nothing to load really\n    if (!metadata.hasAllPrimaryKeys(plainObject)) return Promise.reject(\"Given object does not have a primary column, cannot transform it to database entity.\");\n    // create a special load map that will hold all metadata that will be used to operate with entities easily\n    const loadMap = new LoadMap();\n    const fillLoadMap = (entity, entityMetadata, parentLoadMapItem, relation) => {\n      const item = new LoadMapItem(entity, entityMetadata, parentLoadMapItem, relation);\n      loadMap.addLoadMap(item);\n      entityMetadata.extractRelationValuesFromEntity(entity, metadata.relations).filter(value => value !== null && value !== undefined).forEach(([relation, value, inverseEntityMetadata]) => fillLoadMap(value, inverseEntityMetadata, item, relation));\n    };\n    fillLoadMap(plainObject, metadata);\n    // load all entities and store them in the load map\n    await Promise.all(loadMap.groupByTargetIds().map(targetWithIds => {\n      // todo: fix type hinting\n      return this.manager.findByIds(targetWithIds.target, targetWithIds.ids).then(entities => loadMap.fillEntities(targetWithIds.target, entities));\n    }));\n    // go through each item in the load map and set their entity relationship using metadata stored in load map\n    loadMap.loadMapItems.forEach(loadMapItem => {\n      if (!loadMapItem.relation || !loadMapItem.entity || !loadMapItem.parentLoadMapItem || !loadMapItem.parentLoadMapItem.entity) return;\n      if (loadMapItem.relation.isManyToMany || loadMapItem.relation.isOneToMany) {\n        if (!loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName]) loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = [];\n        loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName].push(loadMapItem.entity);\n      } else {\n        loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = loadMapItem.entity;\n      }\n    });\n    return loadMap.mainLoadMapItem ? loadMap.mainLoadMapItem.entity : undefined;\n  }\n}","map":{"version":3,"names":["LoadMapItem","constructor","plainEntity","metadata","parentLoadMapItem","relation","target","id","getEntityIdMixedMap","LoadMap","loadMapItems","mainLoadMapItem","find","item","addLoadMap","newLoadMap","push","fillEntities","entities","forEach","entity","loadMapItem","compareEntities","groupByTargetIds","groups","group","ids","PlainObjectToDatabaseEntityTransformer","manager","transform","plainObject","hasAllPrimaryKeys","Promise","reject","loadMap","fillLoadMap","entityMetadata","extractRelationValuesFromEntity","relations","filter","value","undefined","inverseEntityMetadata","all","map","targetWithIds","findByIds","then","isManyToMany","isOneToMany","propertyName"],"sources":["D:\\Ronwell Task 1\\node_modules\\typeorm\\browser\\src\\query-builder\\transformer\\PlainObjectToDatabaseEntityTransformer.ts"],"sourcesContent":["import { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { EntityMetadata } from \"../../metadata/EntityMetadata\"\nimport { EntityManager } from \"../../entity-manager/EntityManager\"\nimport { RelationMetadata } from \"../../metadata/RelationMetadata\"\n\n/**\n */\nclass LoadMapItem {\n    entity?: ObjectLiteral\n    plainEntity: ObjectLiteral\n    metadata: EntityMetadata\n    parentLoadMapItem?: LoadMapItem\n    relation?: RelationMetadata\n\n    constructor(\n        plainEntity: ObjectLiteral,\n        metadata: EntityMetadata,\n        parentLoadMapItem?: LoadMapItem,\n        relation?: RelationMetadata,\n    ) {\n        this.plainEntity = plainEntity\n        this.metadata = metadata\n        this.parentLoadMapItem = parentLoadMapItem\n        this.relation = relation\n    }\n\n    get target(): Function | string {\n        return this.metadata.target\n    }\n\n    get id(): any {\n        return this.metadata.getEntityIdMixedMap(this.plainEntity)\n    }\n}\n\nclass LoadMap {\n    loadMapItems: LoadMapItem[] = []\n\n    get mainLoadMapItem(): LoadMapItem | undefined {\n        return this.loadMapItems.find(\n            (item) => !item.relation && !item.parentLoadMapItem,\n        )\n    }\n\n    addLoadMap(newLoadMap: LoadMapItem) {\n        const item = this.loadMapItems.find(\n            (item) =>\n                item.target === newLoadMap.target && item.id === newLoadMap.id,\n        )\n        if (!item) this.loadMapItems.push(newLoadMap)\n    }\n\n    fillEntities(target: Function | string, entities: any[]) {\n        entities.forEach((entity) => {\n            const item = this.loadMapItems.find((loadMapItem) => {\n                return (\n                    loadMapItem.target === target &&\n                    loadMapItem.metadata.compareEntities(\n                        entity,\n                        loadMapItem.plainEntity,\n                    )\n                )\n            })\n            if (item) item.entity = entity\n        })\n    }\n\n    groupByTargetIds(): { target: Function | string; ids: any[] }[] {\n        const groups: { target: Function | string; ids: any[] }[] = []\n        this.loadMapItems.forEach((loadMapItem) => {\n            let group = groups.find(\n                (group) => group.target === loadMapItem.target,\n            )\n            if (!group) {\n                group = { target: loadMapItem.target, ids: [] }\n                groups.push(group)\n            }\n\n            group.ids.push(loadMapItem.id)\n        })\n        return groups\n    }\n}\n\n/**\n * Transforms plain old javascript object\n * Entity is constructed based on its entity metadata.\n */\nexport class PlainObjectToDatabaseEntityTransformer {\n    constructor(private manager: EntityManager) {}\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    async transform(\n        plainObject: ObjectLiteral,\n        metadata: EntityMetadata,\n    ): Promise<ObjectLiteral | undefined> {\n        // if plain object does not have id then nothing to load really\n        if (!metadata.hasAllPrimaryKeys(plainObject))\n            return Promise.reject(\n                \"Given object does not have a primary column, cannot transform it to database entity.\",\n            )\n\n        // create a special load map that will hold all metadata that will be used to operate with entities easily\n        const loadMap = new LoadMap()\n        const fillLoadMap = (\n            entity: ObjectLiteral,\n            entityMetadata: EntityMetadata,\n            parentLoadMapItem?: LoadMapItem,\n            relation?: RelationMetadata,\n        ) => {\n            const item = new LoadMapItem(\n                entity,\n                entityMetadata,\n                parentLoadMapItem,\n                relation,\n            )\n            loadMap.addLoadMap(item)\n\n            entityMetadata\n                .extractRelationValuesFromEntity(entity, metadata.relations)\n                .filter((value) => value !== null && value !== undefined)\n                .forEach(([relation, value, inverseEntityMetadata]) =>\n                    fillLoadMap(value, inverseEntityMetadata, item, relation),\n                )\n        }\n        fillLoadMap(plainObject, metadata)\n        // load all entities and store them in the load map\n        await Promise.all(\n            loadMap.groupByTargetIds().map((targetWithIds) => {\n                // todo: fix type hinting\n                return this.manager\n                    .findByIds<ObjectLiteral>(\n                        targetWithIds.target as any,\n                        targetWithIds.ids,\n                    )\n                    .then((entities) =>\n                        loadMap.fillEntities(targetWithIds.target, entities),\n                    )\n            }),\n        )\n\n        // go through each item in the load map and set their entity relationship using metadata stored in load map\n        loadMap.loadMapItems.forEach((loadMapItem) => {\n            if (\n                !loadMapItem.relation ||\n                !loadMapItem.entity ||\n                !loadMapItem.parentLoadMapItem ||\n                !loadMapItem.parentLoadMapItem.entity\n            )\n                return\n\n            if (\n                loadMapItem.relation.isManyToMany ||\n                loadMapItem.relation.isOneToMany\n            ) {\n                if (\n                    !loadMapItem.parentLoadMapItem.entity[\n                        loadMapItem.relation.propertyName\n                    ]\n                )\n                    loadMapItem.parentLoadMapItem.entity[\n                        loadMapItem.relation.propertyName\n                    ] = []\n                loadMapItem.parentLoadMapItem.entity[\n                    loadMapItem.relation.propertyName\n                ].push(loadMapItem.entity)\n            } else {\n                loadMapItem.parentLoadMapItem.entity[\n                    loadMapItem.relation.propertyName\n                ] = loadMapItem.entity\n            }\n        })\n\n        return loadMap.mainLoadMapItem\n            ? loadMap.mainLoadMapItem.entity\n            : undefined\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}